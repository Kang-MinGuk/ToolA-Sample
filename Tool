using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using Excel = Microsoft.Office.Interop.Excel;
using System.Net;
using System.Text.RegularExpressions;
using System.Threading;
using System.Collections;
using System.Globalization;
using MySql.Data.MySqlClient;
using ServiceStack.Redis;

namespace superorange
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();

            lv_noticelist_server.FullRowSelect = true;
            lv_noticelist_items.GridLines = true;
            pb_noticelist_noti.SizeMode = PictureBoxSizeMode.StretchImage;

            try
            {
                settotalcheck("config err");
                loadfile("config.txt");

                settotalcheck("bill err");
                setdata(BILLINGTEMPLATE, billingtemplate);

                settotalcheck("lobbymenu err");
                setdata(LOBBYMENU, lobbymenutemplate);

                settotalcheck("rankingevent err");
                setdata(RANKINGEVENT, rankingeventtemplate);

                settotalcheck("subeventinfo err");
                setdata(SUBEVENTINFO, subeventinfo);

                settotalcheck("itemtemplate err");
                setdata(ITEMTEMPLATE, itemtemplate);

                settotalcheck("sometemplate err");
                setdata(SOMETEMPLATE, sometemplate);

                settotalcheck("accessorytemplate err");
                setdata(ACCESSORYTEMPLATE, accessoryTemplate);

                settotalcheck("newmissiontemplate err");
                setdata(NEWMISSION, newMissionTemplate);

                settotalcheck("speicalmissiontemplate err");
                setdata(SPECIALNEWMISSION, specialMissionTemplate);

                settotalcheck("Success");

                Deletefile(BILLINGTEMPLATE);
                Deletefile(LOBBYMENU);
                Deletefile(RANKINGEVENT);
                Deletefile(SUBEVENTINFO);
                Deletefile(ITEMTEMPLATE);
                Deletefile(SOMETEMPLATE);
                Deletefile(ACCESSORYTEMPLATE);
                Deletefile(NEWMISSION);
                Deletefile(SPECIALNEWMISSION);
                string lastServerIndex = requestsuperorangetotal(10, "1", "0", "", "");

                int.TryParse(lastServerIndex, out int _lastServerIndex);
                _iLastServerIndex = _lastServerIndex;

                string[] combineServerLists = requestsuperorangetotal(31, "40", "").Split('#');

                Dictionary<string, int> tempDic = new Dictionary<string, int>();

                for (int i = 0; i < _iLastServerIndex; i++)
                {
                    if (string.IsNullOrEmpty(combineServerLists[i]) == false)
                    {
                        if (tempDic.ContainsKey(combineServerLists[i]) == false)
                            tempDic.Add(combineServerLists[i], 1);
                    }
                    else
                    {
                        int serverIndex = i + 1;
                        if (tempDic.ContainsKey(serverIndex.ToString()) == false)
                            tempDic.Add(serverIndex.ToString(), 1);
                    }
                }

                foreach (var temp in tempDic)
                    combineServerList.Add(temp.Key);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

        }

        private void settotalcheck(string str)
        {
            tb_totalcheck.Text = str;
        }

        public enum billingTemplate_
        {
            index,              // 인덱스
            type,               // 타입 구분
            subtype,            // 서브 타입 (안씀)
            Title,              // 상품 제목
            titlekey,
            desc,               //
            desckey,
            itemcode,           // 패키지 코드
            binaryindex,        // 서버에서 체크할 구매 제한 인덱스
            day,                // 월정액제 날짜
            dayindex,           // 월정액제 인덱스
            MaxBuyCount,        // 상품 구매 가능 횟수
            postdesc,           // 상품 세부 제목
            postdesckey,
            price,              // 가격
            priceKey,
            iosprice,           // ios가격
            iospriceKey,
            priceMyCard,
            priceMyCardKey,
            rewardtype1,        // 지급 품목
            rewardvalue1,       // 지급 수량
            rewarddesc1,        // 지급 품목 설명
            rewarddesc1key,
            rewardtype2,
            rewardvalue2,
            rewarddesc2,
            rewarddesc2key,
            rewardtype3,
            rewardvalue3,
            rewarddesc3,
            rewarddesc3key,
            rewardtype4,
            rewardvalue4,
            rewarddesc4,
            rewarddesc4key,
            rewardtype5,
            rewardvalue5,
            rewarddesc5,
            rewarddesc5key,
            rewardtype6,
            rewardvalue6,
            rewarddesc6,
            rewarddesc6key,
            rewardtype7,
            rewardvalue7,
            rewarddesc7,
            rewarddesc7key,
            rewardtype8,
            rewardvalue8,
            rewarddesc8,
            rewarddesc8key,
            reward1Effect,
            reward2Effect,
            reward3Effect,
            reward4Effect,
            reward5Effect,
            reward6Effect,
            reward7Effect,
            reward8Effect,
            ConditionType,
            ConditionValue,
            LinkData,
            TWPrice,
            max,
        }

        public enum lobbymenutemplate_
        {
            index,
            actiontype,
            actionvalue1,
            actionvalue2,
            iconname,
            label,
            labelkey,
            needguidemission,
            displayEffect,
            max,
        }

        public enum AccessoryTemplate_
        {
            id,
            type,
            grade,
            subgrade,
            icon,
            name,
            namekey,
            desc,
            desckey,
            nextaccessoryid,
            decompositiontype,
            decompositionval,
            decompositionprice,
            enchantval,
            enchantrate,
            evolutiongoodsid,
            isnotaction,
            statusskill1,
            statusskill2,
            statusskill3,
            effectskillDesc1,
            effectskill1,
            effectskillDesc2,
            effectskill2,
            effectskillDesc3,
            effectskill3,
            effectskillDesc4,
            effectskill4,
            effectskillDesc5,
            effectskill5,
            effectskillDesc6,
            effectskill6,
            effectskillDesc7,
            effectskill7,
            effectskillDesc8,
            effectskill8,
            effectskillDesc9,
            effectskill9,
            effectskillDesc10,
            effectskill10,
            groupskillhave,
            rgrade,
            SortIndex,
            Max
        }

        public enum someTemplate_
        {
            ID,
            type,
            grade,
            group,
            name,
            namekey,
            profile_src,
            full_src,
            returncrystal,
            returncrystalmax,
            rich,
            manner,
            sexy,
            total,
            spawnarea,
            getnormalType,
            getnormalValue,
            getType,
            getValue,
            getnormalrate,
            minuscrystal,
            skill1,
            skill2,
            skill3,
            skill4,
            skill5,
            skill6,
            skill7,
            skill8,
            skill9,
            skill10,
            skill11,
            skill12,
            skill13,
            skill14,
            skill15,
            skill16,
            skill17,
            skill18,
            skill19,
            skill20,
            skill21,
            skill22,
            skill23,
            skill24,
            skill25,
            skill26,
            skill27,
            skill28,
            skill29,
            skill30,
            datement,
            getment,
            onenightment,
            madement,
            desc,
            desckey,
            InfoMent,
            infomentkey,
            Voice,
            Legendary,
            isOpen,
            sameTextureID,
            mainID,
            Class,
            subGroup,
            webURL,
            instar,
            instarEvolutionID,
            sortNumber,
            groupSkill,
            stylekey,
            styleColor,
            backColor,
            stylename,
            blind,
            someGroupNameKey,

            max,
        }

        public enum itemTemplate_
        {
            ID,
            type,
            bigtype,
            grade,
            name,
            namekey,
            profile_src,
            full_src,
            pricetype,
            pricevalue,
            rich,
            manner,
            sexy,
            richrate,
            mannerrate,
            sexyrate,
            returntype,
            returnvalue,
            buytime_min,
            soptionGroup,
            soptionAddStat,
            setoptionId,
            isOpen,
            passiveName,
            passiveNamekey,
            addSkillIndex,
            passiveName2,
            passiveName2key,
            addSkillIndex2,
            passiveName3,
            passiveName3key,
            addSkillIndex3,
            passiveName4,
            passiveName4key,
            addSkillIndex4,
            passiveName5,
            passiveName5key,
            addSkillIndex5,
            passiveName6,
            passiveName6key,
            addSkillIndex6,
            passiveName7,
            passiveName7key,
            addSkillIndex7,
            passiveName8,
            passiveName8key,
            addSkillIndex8,
            passiveName9,
            passiveName9key,
            addSkillIndex9,
            passiveName10,
            passiveName10key,
            addSkillIndex10,
            sortNumber,
            rgrade,
            max,
        }

        public enum ST_Guild
        {
            id = 0,
            name,
            level,
            guildpoint,
            guildmembermax,
            jointype,
            title,
            guildmasterid,

            createtime,
            membercount,
            guildexp,

            guildpointtotal,
            GuildSubMasterID,       // 부길드장 ID
            MasterTransferTime,     // 길드장 양도 시간 : 5일
            SubMasterTransferTime,  // 부길드장 양도 시간 : 3일
            guild_emblem,           // 엠블럼 선택
            guild_Haveemblem,       // 구입한 엠블럼
            temp10,

            max,
        }

        public enum ST_Guildmember
        {
            id = 0,
            guildindex,
            joindatetime,
            grade = 3,                  //master, submaster, normal, waiting
            pointgrade,             // 기여도에따른등급? 안씀말고
            lastjoincheckdatetime,
            myguildpoint,
            totalpower,             //실시간으로 불러다 가라.
            vipgrade,               //실시간으로 불러다 가라.
            nickname,

            lastjoincheck_id,       //길드회비 냇던 아이디
            myguildpointtotal,
            mygivepoint,
            lastconnecttime,
            StoreBuyCount,
            Contribution,
            temp8,
            temp9,
            temp10,

            max,
        }

        public enum rankingevent_
        {
            index,
            type,
            flag,
            title,
            titlekey,
            prefab_lobby,
            prefab_play,
            backimg,
            totalflag,
            temp2,
            starttime,
            endtime,
            datedesc,
            datadesckey,
            timedesc,
            titmedesckey,

            item1icon,
            item1title,
            item1desc,
            item1firstcount,
            item1pricetype,
            item1pricevalue,
            item1limitcount,
            item1point,

            item2icon,
            item2title,
            item2desc,
            item2firstcount,
            item2pricetype,
            item2pricevalue,
            item2limitcount,
            item2point,

            item3icon,
            item3title,
            item3desc,
            item3firstcount,
            item3pricetype,
            item3pricevalue,
            item3limitcount,
            item3point,

            item4icon,
            item4title,
            item4desc,
            item4firstcount,
            item4pricetype,
            item4pricevalue,
            item4limitcount,
            item4point,

            hitmaxcount,
            tipindex,
            desc,
            desckey,
            titleeventkey,
            max,
        }

        public enum subeventinfo_
        {
            index,
            name,
            dummy,
            linkrankingevent,
            dummy2,
            guildrewardname,
            linkguildrankingevent,
            max,
        }

        public enum newMissionTemplate_
        {
            id,
            linkid,
            type,
            conditiontype,
            conditionvalue,
            needvalue,
            conditiontype2,
            conditionvalue2,
            needvalue2,
            rewardtype,
            rewardvalue,
            rewardtype2,
            rewardvalue2,
            linkui,
            linkui2,
            title,
            titlekey,
            title2,
            title2key,
            desc,
            desckey,
            desc2,
            desc2key,

            max,
        }

        public enum SpecialMissionTemplate_
        {
            id,
            linkid,
            type,
            conditiontype,
            conditionvalue,
            needvalue,
            conditiontype2,
            conditionvalue2,
            needvalue2,
            rewardtype,
            rewardvalue,
            rewardtype2,
            rewardvalue2,
            linkui,
            linkui2,
            title,
            titlekey,
            title2,
            title2key,
            desc,
            desckey,
            desc2,
            desc2key,

            max,
        }

        static string BILLINGTEMPLATE = "os_billingtemplate";
        static string LOBBYMENU = "os_lobbymenu";
        static string RANKINGEVENT = "os_rankingevent";
        static string SUBEVENTINFO = "subeventinfo";
        static string ITEMTEMPLATE = "os_itemtemplate";
        static string SOMETEMPLATE = "os_sometemplate";
        static string ACCESSORYTEMPLATE = "os_Accessory";
        static string NEWMISSION = "os_newMission";
        public string SPECIALNEWMISSION = "os_SpecialMission";
        public static string[,] billingtemplate = new string[500, (int)billingTemplate_.max];
        public static string[,] lobbymenutemplate = new string[100, (int)lobbymenutemplate_.max];
        public static string[,] rankingeventtemplate = new string[100, (int)rankingevent_.max];
        public static string[,] subeventinfo = new string[500, (int)subeventinfo_.max];
        public static string[,] itemtemplate = new string[500, (int)itemTemplate_.max];
        public static string[,] sometemplate = new string[500, (int)someTemplate_.max];
        public static string[,] accessoryTemplate = new string[600, (int)AccessoryTemplate_.Max];
        public static string[,] newMissionTemplate = new string[300, (int)newMissionTemplate_.max];
        public static string[,] specialMissionTemplate = new string[300, (int)SpecialMissionTemplate_.max];

        public static string MySqlIP = "";
        public static string MySqlPort = "";
        public static string MySqlDatabase = "";
        public static string MySqlUid = "";
        public static string MySqlPassword = "";
        private static void setdata(int line, string Data, string[,] arraydata)
        {
            string[] Datas2 = Data.Split(',');

            for (int j = 0; j < Datas2.Length; j++)
            {
                if (arraydata.GetLength(1) > j)
                    arraydata[line, j] = Datas2[j];
            }
        }

        private void exceltocsv(string filename)
        {
            string filepath = tb_datapath.Text;
            Excel.Application app = new Excel.Application();
            Excel.Workbook wb = app.Workbooks.Open(filepath + "\\" + filename + ".xlsx");
            wb.SaveAs(filepath + "\\" + filename + ".csv", Excel.XlFileFormat.xlCSV);


            wb.Close(false);
            app.Quit();
        }

        private void setdata(string file_name, string[,] arraydata)
        {
            exceltocsv(file_name);
            string filepath = tb_datapath.Text;
            string filename = filepath + "\\" + file_name;
            filename += ".csv";

            int linecount = 0;

            try
            {
                using (StreamReader sr = new StreamReader(filename, Encoding.GetEncoding("euc-kr")))
                {


                    while (!sr.EndOfStream)
                    {
                        string data = sr.ReadLine();

                        string[] Datas2 = data.Split(',');
                        setdata(linecount, data, arraydata);

                        linecount++;
                    }

                    sr.Close();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + file_name + " line : " + linecount + " " + ex.Message);
            }
        }

        private void loadfile(string Path)
        {
            string[] TextArea = System.IO.File.ReadAllLines(Path);
            if (TextArea.Length > 0)
            {
                for (int i = 0; i < TextArea.Length; i += 2)
                {
                    string Category = TextArea[i];
                    string Data = TextArea[i + 1];

                    if (Category == "data") tb_datapath.Text = Data;
                    if (Category == "image") tb_imagepath.Text = Data;
                    if (Category == "realtime") tb_notice_realtime.Text = Data;
                    if (Category == "gachaimg") tb_notice_gacha.Text = Data;
                    if (Category == "texture") tb_notice_texture.Text = Data;
                    if (Category == "item") tb_ranker_itempath.Text = Data;
                    if (Category == "") tb_ranker_path.Text = Data;
                    if (Category == "gacha") tb_gacha_banner.Text = Data;
                    if (Category == "User") SelectFAQAnswerAdmin = Data;
                }
            }
            else
            {

            }
        }

        private void Deletefile(string filename)
        {
            string filepath = tb_datapath.Text;
            FileInfo file = new FileInfo(filepath + "\\" + filename + ".csv");
            file.Delete();
        }

        private void bt_changetab1_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 0; }
        private void bt_changetab2_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 1; }
        private void bt_changetab3_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 2; }
        private void bt_changetab4_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 3; }
        private void bt_changetab5_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 4; }
        private void bt_changetab6_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 5; }
        private void bt_changetab7_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 6; }
        private void bt_changetab8_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 7; }
        private void bt_changetab9_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 8; }
        private void bt_changetab10_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 9; }
        private void bt_changetab11_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 10; }
        private void bt_changetab12_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 10; }
        private void bt_changetab13_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 11; }
        private void bt_changetab14_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 12; }
        private void bt_changetab15_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 13; }
        private void bt_changetab16_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 14; }
        private void bt_changetab17_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 17; }
        private void button6_Click(object sender, EventArgs e) { tabControl1.SelectedIndex = 20; }
        private Button createbutton(int left, int top, int width, int height, string text, Control parent)
        {
            Button button = new Button();
            button.Location = new Point(left, top);
            button.Width = width;
            button.Height = height;
            button.Text = text;

            if (button != null)
                parent.Controls.Add(button);

            return button;
        }

        private void LoadData()
        {
            string dateValue = tb_LoadDateText.Text;

            switch (loadIndex)
            {
                case 0:
                    {
                        List<string> serverList = GetServerList();

                        if (string.IsNullOrEmpty(dateValue))
                            dateValue = DateTime.Now.ToString("yyyy-MM-dd");

                        Dictionary<string, string> retDatas = new Dictionary<string, string>();

                        for (int i = 0; i < serverList.Count; i++)
                        {
                            string retData = requestsuperorangetotal(23, serverList[i], "0", dateValue);

                            retDatas.Add(serverList[i], retData);
                        }

                        string textData = "";

                        foreach (var temp in retDatas)
                        {
                            if (string.IsNullOrEmpty(temp.Value) || string.IsNullOrEmpty(temp.Key))
                                continue;

                            string[] datas = temp.Value.Split('@');

                            if (string.IsNullOrEmpty(datas[1]))
                                continue;

                            string[] serverPurchaseInfo = datas[1].Split('&');
                            string buyCount = serverPurchaseInfo[1].Split('-')[1];
                            string buyPrice = serverPurchaseInfo[2].Split('-')[1];
                            string userCount = datas[0];
                            string[] packageDatas = datas[2].Split('&');

                            string serverIndex = temp.Key;
                            int.TryParse(serverIndex, out int ServerIndex);
                            if (ServerIndex <= 100)
                                ServerIndex /= 5;

                            textData += string.Format("서버 : {0} / 구매 유저수 : {1} / 판매 상품 갯수 : {2} / 판매 금액 : {3}\n", ServerIndex, userCount, buyCount, buyPrice);

                            for (int j = 0; j < packageDatas.Length; j++)
                            {
                                string[] packageData = packageDatas[j].Split('-');

                                textData += string.Format("{0} : {1}\n", packageData[0], packageData[1]);
                            }

                            textData += "\n-----------------------------------------------------------\n";
                        }

                        tb_datasearch.Text = textData;
                    }
                    break;
            }
        }

        private Label createtext(int left, int top, int width, string text, Control parent)
        {
            Label labelcontrol = new Label();
            labelcontrol.Location = new System.Drawing.Point(left, top);
            labelcontrol.Text = text;
            labelcontrol.Width = width;

            parent.Controls.Add(labelcontrol);

            return labelcontrol;
        }

        ToolTip tooltip = new ToolTip();

        private void CreateTooltip(Control parent, string text)
        {
            tooltip.AutoPopDelay = 10000;
            tooltip.InitialDelay = 500;

            tooltip.SetToolTip(parent, text);
        }
        private PictureBox createpicturebox(int left, int top, int width, int height, string filename, string filepath, Control parent, bool border = false)
        {
            Bitmap bmp;
            PictureBox pictureboxcontrol = new PictureBox();
            pictureboxcontrol.Left = left;
            pictureboxcontrol.Top = top;
            pictureboxcontrol.Width = width;
            pictureboxcontrol.Height = height;
            pictureboxcontrol.SizeMode = PictureBoxSizeMode.StretchImage;

            if (border)
                pictureboxcontrol.BorderStyle = BorderStyle.FixedSingle;
            try
            {
                string fullfilename = filepath + "\\" + filename;
                fullfilename += ".png";

                parent.Controls.Add(pictureboxcontrol);

                bmp = new Bitmap(fullfilename);
                pictureboxcontrol.Image = (Image)bmp;

            }
            catch
            {

            }

            return pictureboxcontrol;
            //this.Controls["panel1"].Controls.Add(pictureboxcontrol);
        }

        private void bt_checkdata_Click(object sender, EventArgs e)
        {
            richTextBox1.Clear();

            foreach (Control items in this.Controls["tabControl1"].Controls["tabpage1"].Controls["panel1"].Controls)
            {
                items.Dispose();
            }
            this.Controls["tabControl1"].Controls["tabpage1"].Controls["panel1"].Controls.Clear();


            string curdate = tb_date.Text;

            DateTime now = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = now.ToString("yyyy-MM-dd");

                tb_date.Text = curdate;
            }

            Dictionary<int, string> dicData = new Dictionary<int, string>();
            List<int> listimage = new List<int>();

            string fulldata = textBox1.Text;

            string[] ddd = fulldata.Split('$');

            for (int i = 0; i < ddd.Length; i++)

            {
                string[] datas = ddd[i].Split('_');

                if (datas.Length > 3)
                {
                    string startdate = datas[0];
                    string enddate = datas[1];
                    string lobbymenu = datas[2];
                    string packagenumber = datas[3];
                    string packagename = datas[4];
                    string serverlist = "";
                    if (datas.Length > 5) serverlist = datas[5];

                    if (DateTime.Parse(startdate).Year <= DateTime.Parse(curdate).Year &&
                        DateTime.Parse(enddate).Year >= DateTime.Parse(curdate).Year &&
                        (DateTime.Parse(startdate).Year < DateTime.Parse(curdate).Year || DateTime.Parse(startdate).Month <= DateTime.Parse(curdate).Month) &&
                        (DateTime.Parse(enddate).Year > DateTime.Parse(curdate).Year || DateTime.Parse(enddate).Month >= DateTime.Parse(curdate).Month) &&
                        (DateTime.Parse(startdate).Year < DateTime.Parse(curdate).Year || DateTime.Parse(startdate).Month < DateTime.Parse(curdate).Month || DateTime.Parse(startdate).Day <= DateTime.Parse(curdate).Day) &&
                        (DateTime.Parse(enddate).Year > DateTime.Parse(curdate).Year || DateTime.Parse(enddate).Month > DateTime.Parse(curdate).Month || DateTime.Parse(enddate).Day >= DateTime.Parse(curdate).Day))
                    {

                        if (serverlist.Length > 0)
                        {
                            string[] splitserverlist = serverlist.Split(':');

                            for (int j = int.Parse(splitserverlist[0]); j <= int.Parse(splitserverlist[1]); j++)
                            {
                                if (dicData.ContainsKey(j))
                                {
                                    dicData[j] += "<" + lobbymenu + ">" + billingtemplate[int.Parse(packagenumber), (int)billingTemplate_.Title];
                                }
                                else
                                {
                                    dicData.Add(j, "<" + lobbymenu + ">" + billingtemplate[int.Parse(packagenumber), (int)billingTemplate_.Title]);
                                }
                            }

                            listimage.Add(int.Parse(lobbymenu));
                        }
                    }
                }
                else
                {
                    MessageBox.Show("err");
                    return;
                }
            }

            var list = dicData.Keys.ToList();
            list.Sort();

            foreach (var index in list)
            {
                string inputdata = index + ":" + dicData[index] + Environment.NewLine;
                richTextBox1.AppendText(inputdata);
            }

            loadimgdata(listimage);
        }



        private void loadimgdata(List<int> listimage)
        {
            int icount = 0;
            //foreach(var ddd in this.Controls["tabControl1"].Controls["tabpage1"].Controls["panel1"].Controls)
            //{
            //    string strsdsdf = "dd";
            //}
            foreach (var items in listimage)
            {
                createpicturebox(0, icount * 100, 80, 80, lobbymenutemplate[items, (int)lobbymenutemplate_.iconname], tb_imagepath.Text, this.Controls["tabControl1"].Controls["tabpage1"].Controls["panel1"]);
                createtext(120, icount * 105, 25, items.ToString(), this.Controls["tabControl1"].Controls["tabpage1"].Controls["panel1"]);

                icount++;
            }
        }

        //데이터에 있는 모든 타입을 다 가져온 후 그것들만 일단 뿌려주자.

        private void bt_date_plus_Click(object sender, EventArgs e)
        {
            string curdate = tb_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(1).ToString("yyyy-MM-dd");
            }

            tb_date.Text = curdate;

            bt_checkdata_Click(sender, e);
        }

        private void bt_date_minus_Click(object sender, EventArgs e)
        {
            string curdate = tb_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(-1).ToString("yyyy-MM-dd");
            }

            tb_date.Text = curdate;

            bt_checkdata_Click(sender, e);
        }

        private static string thread_getHttpRequest(string url)
        {
            WebRequest request = WebRequest.Create(url); // 호출할 url
            request.Method = "GET";
            string responseFromServer = "";

            try
            {
                WebResponse response = request.GetResponse();
                Stream dataStream = response.GetResponseStream();
                StreamReader reader = new StreamReader(dataStream);

                responseFromServer = reader.ReadToEnd();

                reader.Close();
                dataStream.Close();
                response.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return responseFromServer;
        }

        private string getHttpRequest(string url)
        {
            WebRequest request = WebRequest.Create(url); // 호출할 url
            request.Method = "GET";
            string responseFromServer = "";

            try
            {
                WebResponse response = request.GetResponse();
                Stream dataStream = response.GetResponseStream();
                StreamReader reader = new StreamReader(dataStream);

                responseFromServer = reader.ReadToEnd();

                reader.Close();
                dataStream.Close();
                response.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return responseFromServer;
        }

        private Color getcolor(int i)
        {
            switch (i)
            {
                case 1: return Color.MediumPurple;
                case 2: return Color.MediumSeaGreen;
                case 3: return Color.MediumSlateBlue;
                case 4: return Color.MediumSpringGreen;
                case 5: return Color.MediumTurquoise;
                case 6: return Color.MediumVioletRed;
                case 7: return Color.Firebrick;
                case 8: return Color.MediumOrchid;
                case 9: return Color.MintCream;
                case 10: return Color.Moccasin;
                case 11: return Color.NavajoWhite;
                case 12: return Color.DodgerBlue;
                case 13: return Color.OldLace;
                case 14: return Color.Olive;
                case 15: return Color.OliveDrab;
                case 16: return Color.Orange;
                case 17: return Color.MistyRose;
                case 18: return Color.OrangeRed;
                case 19: return Color.DeepPink;
                case 20: return Color.DeepSkyBlue;
                case 21: return Color.LightBlue;
                case 22: return Color.LightCoral;
                case 23: return Color.LightGoldenrodYellow;
                case 24: return Color.LightGreen;
                case 25: return Color.LightGray;
                case 26: return Color.LightPink;
                case 27: return Color.LightSalmon;
                case 28: return Color.MediumAquamarine;
                case 29: return Color.LightSeaGreen;
                case 30: return Color.LightSlateGray;
                case 31: return Color.LightSteelBlue;
                case 32: return Color.LightYellow;
                case 33: return Color.Lime;
                case 34: return Color.LimeGreen;
                case 35: return Color.Linen;
                case 36: return Color.Magenta;
                case 37: return Color.LightSkyBlue;
                case 38: return Color.LemonChiffon;
                case 39: return Color.Orchid;
                case 40: return Color.PaleGreen;
                case 41: return Color.SlateBlue;
                case 42: return Color.SlateGray;
                case 43: return Color.Snow;
                case 44: return Color.SpringGreen;
                case 45: return Color.SteelBlue;
                case 46: return Color.Tan;
                case 47: return Color.Teal;
                case 48: return Color.SkyBlue;
                case 49: return Color.Thistle;
                case 50: return Color.Turquoise;
                case 51: return Color.Violet;
                case 52: return Color.Wheat;
                case 53: return Color.White;
                case 54: return Color.WhiteSmoke;
                case 55: return Color.Yellow;
                case 56: return Color.YellowGreen;
                case 57: return Color.Tomato;
                case 58: return Color.PaleGoldenrod;
                case 59: return Color.Silver;
                case 61: return Color.SeaShell;
                case 62: return Color.PaleTurquoise;
                case 63: return Color.PaleVioletRed;
                case 64: return Color.PapayaWhip;
                case 65: return Color.PeachPuff;
                case 66: return Color.Peru;
                case 67: return Color.Pink;
                case 68: return Color.Plum;
                case 69: return Color.Sienna;
                case 70: return Color.PowderBlue;
                case 71: return Color.Red;
                case 72: return Color.RosyBrown;
                case 73: return Color.RoyalBlue;
                case 74: return Color.SaddleBrown;
                case 75: return Color.Salmon;
                case 76: return Color.SandyBrown;
                case 77: return Color.SeaGreen;
                case 78: return Color.Purple;
                case 79: return Color.LawnGreen;
                case 80: return Color.LightCyan;
                case 81: return Color.Lavender;
                case 82: return Color.DarkKhaki;
                case 83: return Color.DarkGreen;
                case 84: return Color.DarkGray;
                case 85: return Color.DarkGoldenrod;
                case 86: return Color.DarkCyan;
                case 87: return Color.DarkBlue;
                case 88: return Color.Cyan;
                case 89: return Color.Crimson;
                case 90: return Color.Cornsilk;
                case 91: return Color.LavenderBlush;
                case 92: return Color.Coral;
                case 93: return Color.Chocolate;
                case 94: return Color.Chartreuse;
                case 95: return Color.DarkMagenta;
                case 96: return Color.CadetBlue;
                case 97: return Color.Brown;
                case 98: return Color.BlueViolet;
                case 99: return Color.Blue;
                case 100: return Color.BlanchedAlmond;
                case 101: return Color.Black;
                case 102: return Color.Bisque;
                case 103: return Color.Beige;
                case 104: return Color.Azure;
                case 105: return Color.Aquamarine;
                case 106: return Color.Aqua;
                case 107: return Color.AntiqueWhite;
                case 108: return Color.AliceBlue;
                case 109: return Color.Transparent;
                case 110: return Color.BurlyWood;
                case 111: return Color.DarkOliveGreen;
                case 112: return Color.CornflowerBlue;
                case 113: return Color.DarkOrchid;
                case 114: return Color.Khaki;
                case 115: return Color.Ivory;
                case 116: return Color.DarkOrange;
                case 117: return Color.Indigo;
                case 118: return Color.IndianRed;
                case 119: return Color.HotPink;
                case 120: return Color.Honeydew;
                case 121: return Color.GreenYellow;
                case 122: return Color.Green;
                case 123: return Color.Gray;
                case 124: return Color.Goldenrod;
                case 125: return Color.GhostWhite;
                case 126: return Color.Gainsboro;
                case 127: return Color.Fuchsia;
                case 128: return Color.Gold;
                case 129: return Color.FloralWhite;
                case 130: return Color.DarkRed;
                case 131: return Color.DarkSalmon;
                case 132: return Color.DarkSeaGreen;
                case 133: return Color.ForestGreen;
                case 134: return Color.DarkSlateGray;
                case 135: return Color.DarkTurquoise;
                case 136: return Color.DarkSlateBlue;
                //case 137: return Color.DeepPink;
                //case 138: return Color.DeepSkyBlue;
                case 139: return Color.DimGray;
                //case 140: return Color.DodgerBlue;
                //case 141: return Color.Firebrick;
                case 142: return Color.DarkViolet;
                default: return Color.Red;
            }
        }

        class ShuffleArray
        {
            private int[] arrStr;

            public ShuffleArray SetArrStr(int[] arrStr)
            {
                this.arrStr = arrStr;
                return this;
            }

            public int[] GetArrStr()
            {
                return this.arrStr;
            }

            public int[] SetShuffle()
            {
                return this.ArrayShuffle(arrStr);
            }

            private int[] ArrayShuffle(int[] arrStr)
            {
                int maxValue = arrStr.Length;
                int tmpValue;
                int swapValue;
                Random rnd = new Random();

                for (int i = 0; i < maxValue; i++)
                {
                    tmpValue = rnd.Next(maxValue - i) + i;
                    swapValue = arrStr[i];
                    arrStr[i] = arrStr[tmpValue];
                    arrStr[tmpValue] = swapValue;
                }

                return arrStr;
            }
        }
        private void bt_event_check_Click(object sender, EventArgs e)
        {
            string curdate = tb_event_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
                tb_event_date.Text = curdate;
            }

            listView1.Clear();
            listView1.LabelEdit = true;
            listView1.View = View.Details;
            listView1.BeginUpdate();

            var tempserver = listView1.Columns.Add("server");
            tempserver.Width = 30;
            listView1.Columns.Add("&");
            listView1.Columns.Add("index");
            listView1.Columns.Add("unique");
            var temp0 = listView1.Columns.Add("template");
            temp0.Width = 130;

            listView1.Columns.Add("dailycharge");
            listView1.Columns.Add("dailypackage");
            listView1.Columns.Add("개인보상");
            listView1.Columns.Add("길드보상");
            listView1.Columns.Add("상점");
            listView1.Columns.Add("기간한정");
            listView1.Columns.Add("스페셜보상");
            listView1.Columns.Add("통합이벤트여부");
            listView1.Columns.Add("통합이벤트보상");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            var temp1 = listView1.Columns.Add(""); temp1.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("index");
            listView1.Columns.Add("Unique");
            temp1 = listView1.Columns.Add("template");
            temp1.Width = 130;

            listView1.Columns.Add("개인");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            var temp2 = listView1.Columns.Add(""); temp2.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("2index");
            listView1.Columns.Add("Unique");
            temp2 = listView1.Columns.Add("template"); temp2.Width = 130;

            listView1.Columns.Add("개인");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            var temp3 = listView1.Columns.Add(""); temp3.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("3index");
            listView1.Columns.Add("Unique");
            temp3 = listView1.Columns.Add("template"); temp3.Width = 130;
            listView1.Columns.Add("개인");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            //var tempserver2 = listView1.Columns.Add("server");
            //tempserver2.Width = 30;

            var temp4 = listView1.Columns.Add(""); temp4.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("4index");
            listView1.Columns.Add("Unique");
            temp4 = listView1.Columns.Add("template"); temp4.Width = 130;
            listView1.Columns.Add("개인");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            var temp5 = listView1.Columns.Add(""); temp5.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("5index");
            listView1.Columns.Add("Unique");
            temp5 = listView1.Columns.Add("template"); temp5.Width = 130;
            listView1.Columns.Add("길드");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");

            var temp_contest = listView1.Columns.Add(""); temp_contest.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("contest index");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            listView1.Columns.Add("Unique");
            listView1.Columns.Add("1");
            listView1.Columns.Add("2");

            var temp6 = listView1.Columns.Add(""); temp6.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("6index");
            listView1.Columns.Add("Unique");
            temp6 = listView1.Columns.Add("template"); temp6.Width = 130;
            listView1.Columns.Add("서버");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            var temp7 = listView1.Columns.Add(""); temp7.Width = 1;
            //listView1.Columns.Add("&");
            listView1.Columns.Add("7index");
            listView1.Columns.Add("Unique");
            temp7 = listView1.Columns.Add("template"); temp7.Width = 130;
            listView1.Columns.Add("개인");
            listView1.Columns.Add("이벤트 시작");
            listView1.Columns.Add("이벤트 끝");
            listView1.EndUpdate();

            string lastserverid = tb_lastserverid.Text;
            //if (lastserverid.Length == 0)
            //{
            //    lastserverid = "85";
            //    tb_lastserverid.Text = lastserverid;
            //}

            int[] colorarray = new int[143];
            for (int i = 1; i <= 142; i++)
                colorarray[i] = i;
            ShuffleArray sa = new ShuffleArray();
            sa.SetArrStr(colorarray);
            colorarray = sa.SetShuffle();

            Dictionary<string, int> diccheckunique = new Dictionary<string, int>();
            Dictionary<string, int> diccolor = new Dictionary<string, int>();

            int colornumber = 1;
            //for (int serverid = 1; serverid <= int.Parse(lastserverid); serverid++)
            for (int i = 0; i < combineServerList.Count; i++)
            {
                string serverNum = combineServerList[i];

                if (string.IsNullOrEmpty(serverNum))
                    continue;

                int.TryParse(serverNum, out int serverid);
                string eventtypedata1 = settingrankingeventinfo(serverNum, curdate, "1");

                string[] splitdatas1 = eventtypedata1.Split('\r');
                string[] eventTotalData = splitdatas1[0].Split('#');
                string[] getdatas1 = eventTotalData[0].Split(',');

                ListViewItem items = new ListViewItem(serverid.ToString());
                items.UseItemStyleForSubItems = false;
                if (serverid % 2 == 0)
                {
                    items.BackColor = Color.Lavender;
                }
                items.SubItems.Add("&");
                if (getdatas1.Length >= 13)
                {
                    string eventID = getdatas1[0];
                    string startDate = getdatas1[1];
                    string endDate = getdatas1[2];
                    string uniqueIndex = getdatas1[3];
                    string templateIndex = getdatas1[4];
                    string dailyCharge = getdatas1[5];
                    string dailyPackage = getdatas1[6];
                    string reward = getdatas1[7];
                    string guildReward = getdatas1[8];
                    string dailyStore = getdatas1[9];
                    string periodReward = getdatas1[10];
                    string specialReward = getdatas1[11];
                    string totalFlag = getdatas1[12];
                    string totalReward = getdatas1[13];

                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    if (diccheckunique.ContainsKey(uniqueIndex) == false)
                    {
                        diccheckunique.Add(uniqueIndex, 1);
                        diccolor.Add(uniqueIndex, colornumber);
                        subitems.BackColor = getcolor(colornumber);
                        colornumber++;
                    }
                    else
                    {
                        diccheckunique[uniqueIndex] = diccheckunique[uniqueIndex] + 1;
                        subitems.BackColor = getcolor(diccolor[uniqueIndex]);
                    }                    

                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 연속충전, 일일충전, 개인보상, 길드보상, 상점, 기간한정, 스페셜보상, 통합인덱스, 통합보상, 시작일, 종료일

                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];

                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(dailyCharge); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(dailyPackage); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(guildReward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(dailyStore); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(periodReward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(specialReward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(totalFlag); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(totalReward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                }
                else
                {
                    if (getdatas1[0] == "error")
                    {
                        var subitems = items.SubItems.Add(""); subitems.BackColor = Color.Red;
                    }
                    else
                    {
                        items.SubItems.Add("");
                    }

                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");

                //2
                //string eventtypedata2 = settingrankingeventinfo(serverid.ToString(), curdate, "2");

                //string[] splitdatas2 = eventtypedata2.Split('\r');
                string[] getdatas2 = eventTotalData[1].Split(',');

                if (getdatas2.Length >= 3)
                {
                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 개인보상, 시작일, 종료일
                    string eventID = "";
                    if (getdatas2.Length < 9)
                        eventID = getdatas2[0];
                    else
                    {
                        if (getdatas2[0] != "0")
                            eventID = getdatas2[0];
                        else
                            eventID = getdatas2[7];
                    }
                    string startDate = getdatas2[1];
                    string endDate = getdatas2[2];
                    string uniqueIndex = getdatas2[3];
                    string templateIndex = getdatas2[4];
                    string reward = getdatas2[5];

                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightSeaGreen;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];

                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string linkrankingevent = subeventinfo[int.Parse(reward), (int)subeventinfo_.linkrankingevent];

                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    if (linkrankingevent != templateIndex)
                        subitems.BackColor = Color.Red;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");
                //3
                //string eventtypedata3 = settingrankingeventinfo(serverid.ToString(), curdate, "3");

                //string[] splitdatas3 = eventtypedata3.Split('\r');
                string[] getdatas3 = eventTotalData[2].Split(',');

                if (getdatas3.Length >= 3)
                {
                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 개인보상, 시작일, 종료일
                    string eventID = "";
                    if (getdatas3.Length < 9)
                        eventID = getdatas3[0];
                    else
                    {
                        if (getdatas3[0] != "0")
                            eventID = getdatas3[0];
                        else
                            eventID = getdatas3[7];
                    }
                    string startDate = getdatas3[1];
                    string endDate = getdatas3[2];
                    string uniqueIndex = getdatas3[3];
                    string templateIndex = getdatas3[4];
                    string reward = getdatas3[5];

                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightSalmon;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];
                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string linkrankingevent = subeventinfo[int.Parse(reward), (int)subeventinfo_.linkrankingevent];

                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    if (linkrankingevent != templateIndex)
                        subitems.BackColor = Color.Red;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");
                //4
                //string eventtypedata4 = settingrankingeventinfo(serverid.ToString(), curdate, "4");

                //string[] splitdatas4 = eventtypedata4.Split('\r');
                string[] getdatas4 = eventTotalData[3].Split(',');

                if (getdatas4.Length >= 3)
                {
                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 개인보상, 시작일, 종료일
                    string eventID = "";
                    if (getdatas4.Length < 9)
                        eventID = getdatas4[0];
                    else
                    {
                        if (getdatas4[0] != "0")
                            eventID = getdatas4[0];
                        else
                            eventID = getdatas4[7];
                    }
                    string startDate = getdatas4[1];
                    string endDate = getdatas4[2];
                    string uniqueIndex = getdatas4[3];
                    string templateIndex = getdatas4[4];
                    string reward = getdatas4[5];
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightPink;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];
                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string linkrankingevent = subeventinfo[int.Parse(reward), (int)subeventinfo_.linkrankingevent];
                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    if (linkrankingevent != templateIndex)
                        subitems.BackColor = Color.Red;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");
                //5
                //string eventtypedata5 = settingrankingeventinfo(serverid.ToString(), curdate, "5");

                //string[] splitdatas5 = eventtypedata5.Split('\r');
                string[] getdatas5 = eventTotalData[4].Split(',');

                //var serverid2 = items.SubItems.Add(""); if (serverid % 2 == 0) serverid2.BackColor = Color.Yellow;

                if (getdatas5.Length >= 3)
                {
                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 개인보상, 시작일, 종료일
                    string eventID = "";
                    if (getdatas5.Length < 9)
                        eventID = getdatas5[0];
                    else
                    {
                        if (getdatas5[0] != "0")
                            eventID = getdatas5[0];
                        else
                            eventID = getdatas5[7];
                    }
                    string startDate = getdatas5[1];
                    string endDate = getdatas5[2];
                    string uniqueIndex = getdatas5[3];
                    string templateIndex = getdatas5[4];
                    string reward = getdatas5[5];

                    var temp = items.SubItems.Add("&"); if (serverid % 2 == 0) temp.BackColor = Color.Yellow;
                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightSkyBlue;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];

                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string linkrankingevent = subeventinfo[int.Parse(reward), (int)subeventinfo_.linkrankingevent];
                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    if (linkrankingevent != templateIndex)
                        subitems.BackColor = Color.Red;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");                               

                //6
                //string eventtypedata6 = settingrankingeventinfo(serverid.ToString(), curdate, "6");

                //string[] splitdatas6 = eventtypedata6.Split('\r');
                string[] getdatas6 = eventTotalData[5].Split(',');

                if (getdatas6.Length >= 3)
                {
                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 개인보상, 시작일, 종료일
                    string eventID = "";
                    if (getdatas6.Length < 9)
                        eventID = getdatas2[0];
                    else
                    {
                        if (getdatas6[0] != "0")
                            eventID = getdatas6[0];
                        else
                            eventID = getdatas6[7];
                    }
                    string startDate = getdatas6[1];
                    string endDate = getdatas6[2];
                    string uniqueIndex = getdatas6[3];
                    string templateIndex = getdatas6[4];
                    string reward = getdatas6[5];

                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightGray;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];
                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string linkrankingevent = subeventinfo[int.Parse(reward), (int)subeventinfo_.linkguildrankingevent];
                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    if (linkrankingevent != templateIndex)
                        subitems.BackColor = Color.Red;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");

                //contest
                string eventtypedata_contest = settingrankingeventinfo(serverid.ToString(), curdate, "contest");

                string[] splitdatas_contest = eventtypedata_contest.Split('\r');
                string[] getdatas_contest = splitdatas_contest[0].Split('#');

                if (getdatas_contest.Length >= 10)
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    var subitems = items.SubItems.Add(getdatas_contest[0]); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightGray;
                    subitems = items.SubItems.Add(getdatas_contest[1]); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(getdatas_contest[2]); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(getdatas_contest[3]); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(getdatas_contest[5]); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(getdatas_contest[6]); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");

                //7
                //string eventtypedata7 = settingrankingeventinfo(serverid.ToString(), curdate, "7");

                //string[] splitdatas7 = eventtypedata7.Split('\r');
                string[] getdatas7 = eventTotalData[6].Split(',');

                if (getdatas7.Length >= 3)
                {
                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 개인보상, 시작일, 종료일
                    string eventID = "";
                    if (getdatas7.Length < 9)
                        eventID = getdatas7[0];
                    else
                    {
                        if (getdatas7[0] != "0")
                            eventID = getdatas7[0];
                        else
                            eventID = getdatas7[7];
                    }
                    string startDate = getdatas7[1];
                    string endDate = getdatas7[2];
                    string uniqueIndex = getdatas7[3];
                    string templateIndex = getdatas7[4];
                    string reward = getdatas7[5];

                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightYellow;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];
                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string linkrankingevent = subeventinfo[int.Parse(reward), (int)subeventinfo_.linkrankingevent];
                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    if (linkrankingevent != templateIndex)
                        subitems.BackColor = Color.Red;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add("&"); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                //items.SubItems.Add("&");
                //8
                //string eventtypedata8 = settingrankingeventinfo(serverid.ToString(), curdate, "8");

                //string[] splitdatas8 = eventtypedata8.Split('\r');
                string[] getdatas8 = eventTotalData[7].Split(',');

                if (getdatas8.Length >= 3)
                {
                    // 이벤트ID, 유니크인덱스, 템플릿인덱스, 개인보상, 시작일, 종료일
                    string eventID = "";
                    if (getdatas8.Length < 9)
                        eventID = getdatas8[0];
                    else
                    {
                        if (getdatas8[0] != "0")
                            eventID = getdatas8[0];
                        else
                            eventID = getdatas8[7];
                    }
                    string startDate = getdatas8[1];
                    string endDate = getdatas8[2];
                    string uniqueIndex = getdatas8[3];
                    string templateIndex = getdatas8[4];
                    string reward = getdatas8[5];

                    var temp = items.SubItems.Add(""); temp.BackColor = Color.Black;
                    var subitems = items.SubItems.Add(eventID); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    //subitems.ForeColor = Color.LightBlue;
                    subitems = items.SubItems.Add(uniqueIndex); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    string eventtitle = rankingeventtemplate[int.Parse(templateIndex), (int)rankingevent_.title];
                    subitems = items.SubItems.Add(templateIndex + "-" + eventtitle); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    string linkrankingevent = subeventinfo[int.Parse(reward), (int)subeventinfo_.linkrankingevent];
                    subitems = items.SubItems.Add(reward); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;

                    if (linkrankingevent != templateIndex)
                        subitems.BackColor = Color.Red;
                    subitems = items.SubItems.Add(startDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                    subitems = items.SubItems.Add(endDate); if (serverid % 2 == 0) subitems.BackColor = Color.Lavender;
                }
                else
                {
                    var temp = items.SubItems.Add(""); temp.BackColor = Color.Black;
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                    items.SubItems.Add("");
                }
                listView1.Items.Add(items);                
            }
            listView1.EndUpdate();
            //listView2.Items[listView2.Items.Count - 1].EnsureVisible();
            //listView2.scro


        }

        public enum ServerState
        {
            Local,      // 루프백 아이피
            Test,       // 빌드 테스트
            Beta,       // 라이브 테스트
            Live,       //라이브
            LiveTW,
        }

        public static ServerState ConnectState = ServerState.Live;
        private string settingrankingeventinfo(string serverid, string date, string eventtype)
        {
            string requesturl = "https://server" + serverid + "" + date + "&value3=" + eventtype;
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "" + date + "&value3=" + eventtype;
                    break;
                case ServerState.Test:
                    requesturl = "" + date + "&value3=" + eventtype;
                    break;
                case ServerState.Beta:
                    requesturl = "" + date + "&value3=" + eventtype;
                    break;
                case ServerState.Live:
                    requesturl = "" + date + "&value3=" + eventtype + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + date + "&value3=" + eventtype + "&server=" + serverid + "&User=superorange";
                    break;
            }
            return getHttpRequest(requesturl);
        }

        private string requestnoticelistAll(string serverid, string date)
        {
            string requesturl = "https://server" + serverid + "" + date;
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "" + date;
                    break;
                case ServerState.Test:
                    requesturl = "" + date;
                    break;
                case ServerState.Beta:
                    requesturl = "" + date;
                    break;
                case ServerState.Live:
                    requesturl = "" + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + "&server=" + serverid + "&User=superorange";
                    break;
            }

            return getHttpRequest(requesturl);
        }

        private string requestrankerinfo(string serverid)
        {
            string requesturl = "https://server" + serverid + "";
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "";
                    break;
                case ServerState.Test:
                    requesturl = "";
                    break;
                case ServerState.Beta:
                    requesturl = "";
                    break;
                case ServerState.Live:
                    requesturl = "" +  "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + "&server=" + serverid + "&User=superorange";
                    break;
            }
            return getHttpRequest(requesturl);
        }
        private string requestgachainfo(string serverid, string date)
        {
            string requesturl = "https://server" + serverid + "" + date;
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "" + date;
                    break;
                case ServerState.Test:
                    requesturl = "" + date;
                    break;
                case ServerState.Beta:
                    requesturl = "" + date;
                    break;
                case ServerState.Live:
                    requesturl = "" + date + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + date + "&server=" + serverid + "&User=superorange";
                    break;
            }
            return getHttpRequest(requesturl);
        }
        private string requestloaddata(string version)
        {
            string requesturl = "" + version + "&user=1&data=1";

            return getHttpRequest(requesturl);
        }
        private string requestserverinfo(string serverid, string date)
        {
            string requesturl = "https://server" + serverid + "" + date;
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "" + date + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.Test:
                    requesturl = "" + date;
                    break;
                case ServerState.Beta:
                    requesturl = "" + date;
                    break;
                case ServerState.Live:
                    requesturl = "" + date + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + date + "&server=" + serverid + "&User=superorange";
                    break;
            }
            return getHttpRequest(requesturl);
        }
        private string requestserverguildlist(string serverid)
        {
            string requesturl = "https://server" + serverid + "";
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "";
                    break;
                case ServerState.Test:
                    requesturl = "";
                    break;
                case ServerState.Beta:
                    requesturl = "";
                    break;
                case ServerState.Live:
                    requesturl = "" + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + "&server=" + serverid + "&User=superorange";
                    break;
            }
            return getHttpRequest(requesturl);
        }

        private string requestserverguildmembers(string serverid, string guildid)
        {
            string requesturl = "https://server" + serverid + "" + guildid;
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "" + guildid;
                    break;
                case ServerState.Test:
                    requesturl = "" + guildid;
                    break;
                case ServerState.Beta:
                    requesturl = "" + guildid;
                    break;
                case ServerState.Live:
                    requesturl = "" + guildid + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + "&server=" + serverid + "&User=superorange";
                    break;
            }
            return getHttpRequest(requesturl);
        }

        private static string thread_requestserverusercondition(string serverid, string data)
        {
            string requesturl = "https://server" + serverid + "" + data;
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "" + data;
                    break;
                case ServerState.Test:
                    requesturl = "" + data;
                    break;
                case ServerState.Beta:
                    requesturl = "" + data;
                    break;
                case ServerState.Live:
                    requesturl = "" + data + "&server=" + serverid + "&User=superorange";
                   break;
                case ServerState.LiveTW:
                    requesturl = "" + data + "&server=" + serverid + "&User=superorange";
                    break;
            }
            string wwwdatas = thread_getHttpRequest(requesturl);
            string[] wwwdata = wwwdatas.Split('\r');

            return wwwdata[0];
        }

        private string requestserverusercondition(string serverid, string data)
        {
            string requesturl = "https://server" + serverid + "" + data;
            switch (ConnectState)
            {
                case ServerState.Local:
                    requesturl = "" + data;
                    break;
                case ServerState.Test:
                    requesturl = "" + data;
                    break;
                case ServerState.Beta:
                    requesturl = "" + data;
                    break;
                case ServerState.Live:
                    requesturl = "" + data + "&server=" + serverid + "&User=superorange";
                    break;
                case ServerState.LiveTW:
                    requesturl = "" + data + "&server=" + serverid + "&User=superorange";
                    break;
            }
            string wwwdatas = getHttpRequest(requesturl);
            string[] wwwdata = wwwdatas.Split('\r');

            return wwwdata[0];
        }
        private void bt_event_dateright_Click(object sender, EventArgs e)
        {
            string curdate = tb_event_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(1).ToString("yyyy-MM-dd");
            }

            tb_event_date.Text = curdate;

            //bt_event_check_Click(sender, e);
        }

        private void bt_event_dateleft_Click(object sender, EventArgs e)
        {
            string curdate = tb_event_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(-1).ToString("yyyy-MM-dd");
            }

            tb_event_date.Text = curdate;

            //bt_event_check_Click(sender, e);
        }

        private void bt_notice_check_Click(object sender, EventArgs e)
        {
            string data = tb_notice_in.Text;

            string ddd = data.Replace("\r\n", "\\" + "n");

            tb_notice_out.Text = ddd;
        }

        private void bt_notice_recheck_Click(object sender, EventArgs e)
        {
            string data = tb_notice_out.Text;

            string ddd = data.Replace("\\n", "\r\n");

            tb_notice_reout.Text = ddd;
        }

        public enum NoticeMessage
        {
            id,         // 번호
            title,      // 타이틀
            desc,       // 내용
            see,        // 밖 레드닷
            eSort,      // 정렬
            isOpen,    // 열렸니?
            ListTitle,  // 리스트 타이틀
            Type,       // 타입
            filepath,    // 텍스쳐
            ShowTimer,  //공지시간
            PointSee,   // 애만 봤나?
            ServerByServer,   // 어느서버부터어느서버까지
            CountSee,      // 몇명봤니?
            showLobbyFlag,
            max = 21, // 맥스지만 실제론 토탈이냐 서버냐임(temp가 20 넘으면 숫자 변경)
        }



        public static Dictionary<int, string[,]> servernoticedata = new Dictionary<int, string[,]>();

        private void bt_noticelist_check_Click(object sender, EventArgs e)
        {
            string curdate = tb_noticelist_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }

            tb_noticelist_date.Text = curdate;

            servernoticedata.Clear();

            string lastserverid = tb_notice_serverlist.Text;
            if (lastserverid.Length == 0)
            {
                lastserverid = _iLastServerIndex.ToString();
                tb_notice_serverlist.Text = lastserverid;
            }

            for (int serverid = 1; serverid <= int.Parse(lastserverid); serverid++)
            {
                string retdata = requestnoticelistAll(serverid.ToString(), curdate);

                string[] splitdatas = retdata.Split('\r');
                string[] getdatas = splitdatas[0].Split('&');

                string[,] noticedata = new string[100, (int)NoticeMessage.max];

                int icount = 0;
                foreach (var items in getdatas)
                {
                    if (items.Length <= 0) continue;

                    string[] noti = items.Split('#');
                    for (int i = 0; i < (int)NoticeMessage.max; i++)
                    {
                        noticedata[icount, i] = noti[i];
                    }

                    icount++;
                }

                servernoticedata.Add(serverid, noticedata);
            }

            lv_noticelist_server.Clear();

            lv_noticelist_server.View = View.Details;
            lv_noticelist_server.BeginUpdate();

            var tempserver = lv_noticelist_server.Columns.Add("server");
            tempserver.Width = 30;

            var titlcolumn = lv_noticelist_server.Columns.Add("title");
            titlcolumn.Width = 1000;

            //뷰어
            for (int i = 1; i <= servernoticedata.Count; i++)
            {
                string[,] ddd = servernoticedata[i];

                ListViewItem lvitem = new ListViewItem(i.ToString());
                lvitem.UseItemStyleForSubItems = false;

                string addstring = "";
                for (int j = 0; j < 100; j++)
                {
                    addstring += ddd[j, (int)NoticeMessage.ListTitle] + ",";
                }
                lvitem.SubItems.Add(addstring);

                lv_noticelist_server.Items.Add(lvitem);
            }
            lv_noticelist_server.EndUpdate();

        }

        Dictionary<int, int> sortdata = new Dictionary<int, int>();

        public int lastcheckserverindex = 0;
        private void lv_noticelist_server_SelectedIndexChanged(object sender, EventArgs e)
        {
            ListView lv = sender as ListView;

            if (lv.SelectedItems.Count <= 0) return;

            int selectRow = lv.SelectedItems[0].Index;

            lv_noticelist_items.Clear();

            lv_noticelist_items.View = View.Details;
            lv_noticelist_items.BeginUpdate();

            var tempserver = lv_noticelist_items.Columns.Add("title");
            tempserver.Width = 350;

            //var titlcolumn = lv_noticelist_items.Columns.Add("title");
            //titlcolumn.Width = 1000;

            string[,] ddd = servernoticedata[selectRow + 1];
            lastcheckserverindex = selectRow + 1;

            for (int i = 0; i < 100; i++)
            {
                if (ddd[i, (int)NoticeMessage.id] == null) continue;
                if (ddd[i, (int)NoticeMessage.id].Length <= 0) continue;

                if (sortdata.ContainsKey(int.Parse(ddd[i, (int)NoticeMessage.eSort])))
                    sortdata[int.Parse(ddd[i, (int)NoticeMessage.eSort])] = i;
                else
                    sortdata.Add(int.Parse(ddd[i, (int)NoticeMessage.eSort]), i);
            }

            var sortlist = sortdata.Keys.ToList();
            sortlist.Sort();
            sortlist.Reverse();


            foreach (var index in sortlist)
            {
                ListViewItem lvitem = new ListViewItem(ddd[sortdata[index], (int)NoticeMessage.ListTitle] + "- [ " + ddd[sortdata[index], (int)NoticeMessage.title] + " ] ");

                lv_noticelist_items.Items.Add(lvitem);
            }
            lv_noticelist_items.EndUpdate();
        }

        private void lv_noticelist_items_SelectedIndexChanged(object sender, EventArgs e)
        {
            ListView lv = sender as ListView;

            if (lv.SelectedItems.Count <= 0) return;

            int selectRow = lv.SelectedItems[0].Index;


            int count = 0;
            int index = 0;

            var sortlist = sortdata.Keys.ToList();
            sortlist.Sort();
            sortlist.Reverse();

            foreach (var item in sortlist)
            {
                if (count == selectRow)
                    index = item;

                count++;
            }


            tb_noticelist_notice.Clear();

            string Type = servernoticedata[lastcheckserverindex][sortdata[index], (int)NoticeMessage.Type];
            string filename = servernoticedata[lastcheckserverindex][sortdata[index], (int)NoticeMessage.filepath];

            string filepath = tb_notice_realtime.Text;


            pb_noticelist_noti.Image = null;
            if (filename.Length > 0 && Type != "0")
            {
                string fullfilename = filepath + "\\" + filename;
                fullfilename += ".png";

                Bitmap bmp = null;

                if (File.Exists(fullfilename))
                    bmp = new Bitmap(fullfilename);

                if (bmp == null)
                {
                    if (Type == "2")
                    {
                        filepath = tb_notice_gacha.Text;
                    }
                    else
                    {
                        filepath = tb_notice_texture.Text;
                    }

                    fullfilename = filepath + "\\" + filename;
                    fullfilename += ".png";

                    bmp = new Bitmap(fullfilename);
                }

                pb_noticelist_noti.Image = (Image)bmp;
            }

            string data = servernoticedata[lastcheckserverindex][sortdata[index], (int)NoticeMessage.desc];

            string ddd = data.Replace("\\n", "\r\n");

            tb_noticelist_notice.Text = ddd;
        }

        private void bt_noticelist_left_Click(object sender, EventArgs e)
        {
            string curdate = tb_noticelist_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(-1).ToString("yyyy-MM-dd");
            }

            tb_noticelist_date.Text = curdate;
        }

        private void bt_noticelist_right_Click(object sender, EventArgs e)
        {
            string curdate = tb_noticelist_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(1).ToString("yyyy-MM-dd");
            }

            tb_noticelist_date.Text = curdate;
        }

        private enum rankerdata_
        {
            rank,
            id,
            myrank,
            point,
            viptotalcrystal,
            lastconnecttime,

            nickname,
            myrank1,
            point1,
            tid1,
            tid2,
            tid3,
            level1,
            level2,
            level3,
            itemid1,
            itemid2,
            itemid3,
            itemid4,
            itemid5,
            itemid6,
            itemlevel1,
            itemlevel2,
            itemlevel3,
            itemlevel4,
            itemlevel5,
            itemlevel6,
            hp,
            viptotalgrade,
            guildemblem,
            costume1,
            costume2,
            costume3,
            skillfriendship1,
            skillfriendship2,
            skillfriendship3,
            accdata1,
            accdata2,
            accdata3,

            max,
        }

        Dictionary<string, string> ranker_alldata = new Dictionary<string, string>();

        private void bt_ranker_load_Click(object sender, EventArgs e)
        {
            //데이터 가져오고.
            string lastserverid_before = tb_ranker_serverbefore.Text;
            string lastserverid = tb_ranker_server.Text;

            if (lastserverid_before.Length == 0)
            {
                lastserverid_before = "1";
                tb_ranker_serverbefore.Text = lastserverid_before;
            }
            if (lastserverid.Length == 0)
            {
                lastserverid = "85";
                tb_ranker_server.Text = lastserverid;
            }



            ranker_alldata.Clear();

            for (int serverid = int.Parse(lastserverid_before); serverid <= int.Parse(lastserverid); serverid++)
            {
                string eventtypedata = requestrankerinfo(serverid.ToString());

                string[] splitdatas = eventtypedata.Split('\r');
                string[] getdatas = splitdatas[0].Split('|');

                ranker_alldata.Add(serverid.ToString(), splitdatas[0]);

                int x = 23;
                int y = 23;
                createtext(0, (y + 5) * serverid + 5, 20, serverid.ToString(), (Control)pannel_ranker);

                for (int i = 0; i < /*getdatas.Length-1*/5; i++)
                {
                    string[] userdata = getdatas[i].Split('#');

                    if (userdata[(int)rankerdata_.itemid1].Length > 0)
                        createpicturebox(x * 1 + i * x * 7, (y + 5) * serverid, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid1]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)pannel_ranker);
                    if (userdata[(int)rankerdata_.itemid2].Length > 0)
                        createpicturebox(x * 2 + i * x * 7, (y + 5) * serverid, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid2]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)pannel_ranker);
                    if (userdata[(int)rankerdata_.itemid3].Length > 0)
                        createpicturebox(x * 3 + i * x * 7, (y + 5) * serverid, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid3]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)pannel_ranker);
                    if (userdata[(int)rankerdata_.itemid4].Length > 0)
                        createpicturebox(x * 4 + i * x * 7, (y + 5) * serverid, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid4]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)pannel_ranker);
                    if (userdata[(int)rankerdata_.itemid5].Length > 0)
                        createpicturebox(x * 5 + i * x * 7, (y + 5) * serverid, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid5]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)pannel_ranker);
                    if (userdata[(int)rankerdata_.itemid6].Length > 0)
                        createpicturebox(x * 6 + i * x * 7, (y + 5) * serverid, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid6]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)pannel_ranker);


                }

            }

        }

        private void bt_ranker_detail_Click(object sender, EventArgs e)
        {
            string detailserverid = tb_ranker_detail.Text;
            if (detailserverid.Length == 0)
            {
                detailserverid = "1";
                tb_ranker_detail.Text = detailserverid;
            }

            if (ranker_alldata.ContainsKey(detailserverid) == false) return;

            var data = ranker_alldata[detailserverid];

            string[] getdatas = data.Split('|');

            int x = 50;
            int y = 50;

            int left = 180;
            int ygap = 25;

            for (int i = 0; i < panel_ranker_server.Controls.Count;)
            {
                panel_ranker_server.Controls.Remove((Control)panel_ranker_server.Controls[i]);
            }

            for (int i = 0; i < getdatas.Length - 1; i++)
            {
                string[] userdata = getdatas[i].Split('#');

                int vippoint = int.Parse(userdata[(int)rankerdata_.viptotalcrystal]) / 100;
                int viptotalgrade = int.Parse(userdata[(int)rankerdata_.viptotalgrade]);
                string hp = ((double)((int)(double.Parse(userdata[(int)rankerdata_.hp]) / 10000)) / 10000).ToString();
                string point = userdata[(int)rankerdata_.point];
                string point1 = userdata[(int)rankerdata_.point1];

                string textdata = userdata[(int)rankerdata_.nickname] + " " + hp + " [" + viptotalgrade + "]" + vippoint;

                createtext(0, (y + ygap) * i, left, textdata, (Control)panel_ranker_server);

                if (userdata[(int)rankerdata_.itemid1].Length > 0)
                {
                    createpicturebox(left + x * 1, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid1]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_ranker_server);
                    createtext(left + x * 1 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel1], (Control)panel_ranker_server);
                }
                if (userdata[(int)rankerdata_.itemid2].Length > 0)
                {
                    createpicturebox(left + x * 2, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid2]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_ranker_server);
                    createtext(left + x * 2 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel2], (Control)panel_ranker_server);
                }

                if (userdata[(int)rankerdata_.itemid3].Length > 0)
                {
                    createpicturebox(left + x * 3, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid3]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_ranker_server);
                    createtext(left + x * 3 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel3], (Control)panel_ranker_server);
                }

                if (userdata[(int)rankerdata_.itemid4].Length > 0)
                {
                    createpicturebox(left + x * 4, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid4]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_ranker_server);
                    createtext(left + x * 4 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel4], (Control)panel_ranker_server);
                }

                if (userdata[(int)rankerdata_.itemid5].Length > 0)
                {
                    createpicturebox(left + x * 5, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid5]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_ranker_server);
                    createtext(left + x * 5 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel5], (Control)panel_ranker_server);
                }

                if (userdata[(int)rankerdata_.itemid6].Length > 0)
                {
                    createpicturebox(left + x * 6, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid6]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_ranker_server);
                    createtext(left + x * 6 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel6], (Control)panel_ranker_server);
                }


                string tid1 = userdata[(int)rankerdata_.tid1];
                string tid2 = userdata[(int)rankerdata_.tid2];
                string tid3 = userdata[(int)rankerdata_.tid3];



                string checkid1 = "";
                string checkid2 = "";
                string checkid3 = "";

                if (tid1.Length > 0)
                    checkid1 = sometemplate[int.Parse(tid1), (int)someTemplate_.mainID];
                if (tid2.Length > 0)
                    checkid2 = sometemplate[int.Parse(tid2), (int)someTemplate_.mainID];
                if (tid3.Length > 0)
                    checkid3 = sometemplate[int.Parse(tid3), (int)someTemplate_.mainID];

                string real1 = checkid1 == "0" ? tid1 : checkid1;
                string real2 = checkid2 == "0" ? tid2 : checkid2;
                string real3 = checkid3 == "0" ? tid3 : checkid3;

                if (tid1.Length > 0 && real1.Length > 0)
                {
                    createpicturebox(left + x * 7, (y + ygap) * i, x, y, "_" + real1 + "\\" + sometemplate[int.Parse(tid1), (int)someTemplate_.profile_src], tb_ranker_path.Text, (Control)panel_ranker_server);
                    createtext(left + x * 7, (y + ygap) * i + y, 40, userdata[(int)rankerdata_.skillfriendship1], (Control)panel_ranker_server);
                }
                if (tid2.Length > 0 && real2.Length > 0)
                {
                    createpicturebox(left + x * 8, (y + ygap) * i, x, y, "_" + real2 + "\\" + sometemplate[int.Parse(tid2), (int)someTemplate_.profile_src], tb_ranker_path.Text, (Control)panel_ranker_server);
                    createtext(left + x * 8, (y + ygap) * i + y, 40, userdata[(int)rankerdata_.skillfriendship2], (Control)panel_ranker_server);
                }
                if (tid3.Length > 0 && real3.Length > 0)
                {
                    createpicturebox(left + x * 9, (y + ygap) * i, x, y, "_" + real3 + "\\" + sometemplate[int.Parse(tid3), (int)someTemplate_.profile_src], tb_ranker_path.Text, (Control)panel_ranker_server);
                    createtext(left + x * 9, (y + ygap) * i + y, 40, userdata[(int)rankerdata_.skillfriendship3], (Control)panel_ranker_server);
                }

            }
        }

        public enum GachaEvent_
        {
            GachaEvent,                 // 이벤트기간.. 이기간이 아니면 평시.
            GachaEventDesc,             // 이벤트 기간에 들어가는 문구.
            date_discount,              // 데이트 할인 이벤트
            GachaEventBanner,       // 이벤트 기간에 들어갈 배너 여자 인덱스
            GachaEventMileage,          // 마일리지 max게이지
            gachaeventserveralamlist,   // 가챠에서 나왔을때 서버 알림할것들.
            GachaMileageReward,         // 가챠 마일리지 보상
            smartGachaList,             // 스마트 가챠 리스트
            eventGrilDetail,            // 상세보기  정보
            Max,
        }

        private void bt_gacha_check_Click(object sender, EventArgs e)
        {
            DateTime date = DateTime.Now;
            string curdate = tb_gacha_date.Text;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
                tb_gacha_date.Text = curdate;
            }

            string lastserverid = tb_gacha_server.Text;
            if (lastserverid.Length == 0)
            {
                lastserverid = "85";
                tb_gacha_server.Text = lastserverid;
            }

            for (int i = 0; i < panel_gacha.Controls.Count;)
            {
                panel_gacha.Controls.Remove((Control)panel_gacha.Controls[i]);
            }

            string realtimepath = tb_notice_realtime.Text;

            for (int serverid = 1; serverid <= int.Parse(lastserverid); serverid++)
            {
                string eventtypedata1 = requestgachainfo(serverid.ToString(), curdate);

                string[] splitdatas1 = eventtypedata1.Split('\r');
                string[] bigdata = splitdatas1[0].Split('|');
                string[] getdatas = bigdata[0].Split('#');
                string[] gachas = bigdata[1].Split('#');

                string banner = getdatas[(int)GachaEvent_.GachaEventBanner];
                string[] smartgacha = getdatas[(int)GachaEvent_.smartGachaList].Split(',');

                string fullfilename = realtimepath + "\\" + "GachaBanner_" + banner;
                fullfilename += ".png";

                string path = tb_gacha_banner.Text;
                Bitmap bmp = null;

                if (File.Exists(fullfilename))
                    path = realtimepath;

                int startx = 50;
                int serverheigh = 70;
                int imagex = 64;
                int imagey = 40;

                createtext(0, serverid * serverheigh + serverheigh / 2, startx, serverid.ToString(), (Control)panel_gacha);
                createpicturebox(startx, serverid * serverheigh, serverheigh * 3, serverheigh, "GachaBanner_" + banner, path, (Control)panel_gacha);


                int count = 0;
                for (int i = 0; i < gachas.Length; i++)
                {
                    string[] items = gachas[i].Split(',');

                    if (items.Length > 3)
                    {
                        string type = items[0];
                        string value = items[1];
                        string effect = items[2];
                        string rate = items[3];
                        string desc = items[4];

                        if (type == "23")
                        {
                            string check = sometemplate[int.Parse(value), (int)someTemplate_.mainID];

                            string real1 = check == "0" ? value : check;

                            bool border = false;
                            foreach (var item in smartgacha)
                            {
                                if (item == value)
                                    border = true;
                            }

                            createpicturebox(startx + serverheigh * 3 + count * imagex, serverid * serverheigh + serverheigh / 3, imagex, imagey, "_" + real1 + "\\" + sometemplate[int.Parse(value), (int)someTemplate_.profile_src], tb_ranker_path.Text, (Control)panel_gacha, border);

                            count++;
                        }
                        //type이 아이템일때도 처리해야한다. 이건 그때 다시 작업해라. 바쁘다 바뻐
                    }
                }
            }
        }

        private void bt_gacha_left_Click(object sender, EventArgs e)
        {
            string curdate = tb_gacha_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(-1).ToString("yyyy-MM-dd");
            }

            tb_gacha_date.Text = curdate;
        }

        private void bt_gacha_right_Click(object sender, EventArgs e)
        {
            string curdate = tb_gacha_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(1).ToString("yyyy-MM-dd");
            }

            tb_gacha_date.Text = curdate;
        }

        private void bt_datasearch_load_Click(object sender, EventArgs e)
        {
            //디비 데이터 로딩 해오고,줄바꿈만 해서 뿌리자.
            string getdata = requestloaddata("1093");

            string[] tables = getdata.Split('\r');
            string[] templates = tables[0].Split('|');

            tb_datasearch.Clear();

            string adddata = "";
            foreach (var templatedata in templates)
            {
                string[] datas = templatedata.Split('&');
                foreach (var data in datas)
                {
                    if (data.Length > 0)
                        adddata += data + Environment.NewLine;
                }

                adddata += Environment.NewLine;
            }

            tb_datasearch.Text = adddata;

            tb_datasearch.Select(tb_datasearch.Text.Length, 0);
            tb_datasearch.ScrollToCaret();

            tb_datasearch.ScrollBars = RichTextBoxScrollBars.Vertical;
        }
        private int startindex = 0;
        private string lastsearchtext = "";
        private void bt_datasearch_search_Click(object sender, EventArgs e)
        {
            string getstring = tb_string.Text;
            getstring = getstring.Replace(',', '*');
            string getint = tb_int.Text;
            getint = getint.Replace(',', '*');

            List<string> serverList = GetServerList();

            if (ConnectState == ServerState.Live)
            {
                string textList = "";

                for (int i = 0; i < serverList.Count; i++)
                {
                    string UserStat = requestsuperorangetotal(22, serverList[i], getstring + "|" + getint);
                    textList += UserStat;

                    if (i < serverList.Count - 1)
                        textList += "@";
                }

                tb_datasearch.Text = textList;
            }
            else
            {
                string UserStat = requestsuperorangetotal(22, "0", getstring + "|" + getint);
                tb_datasearch.Text = UserStat;
            }
        }

        private List<string> GetServerList()
        {
            List<string> serverList = new List<string>();

            if (ConnectState != ServerState.Live)
            {
                serverList.Add("0");
                return serverList;
            }

            string lastServerIndex = requestsuperorangetotal(10, "1", "0", "", "");
            int.TryParse(lastServerIndex, out int _lastServerIndex);

            string serverText = tb_server.Text;

            if (string.IsNullOrEmpty(serverText))
                return serverList;

            if (serverText.Contains("~"))
            {   // 특정 범위의 서버를 찾을때
                string[] serverData = serverText.Split('~');

                if (serverData.Length != 2)
                    return serverList;

                int.TryParse(serverData[0], out int startIndex);
                int.TryParse(serverData[1], out int endIndex);

                for (int i = startIndex; i <= endIndex; i++)
                {
                    if (i <= 0 || i >= _lastServerIndex)
                        continue;

                    if (i >= 21 && i < 101)
                    {
                        i = 101;
                    }

                    int serverIndex = i;

                    if (i <= 20)
                        serverIndex *= 5;

                    serverList.Add(serverIndex.ToString());
                }
            }
            else if (serverText.Contains(","))
            {   // 특정 서버들을 찾을때
                string[] serverData = serverText.Split(',');

                for (int i = 0; i < serverData.Length; i++)
                {
                    if (string.IsNullOrEmpty(serverData[i]))
                        continue;

                    int.TryParse(serverData[i], out int serverIndex);

                    if (serverIndex <= 0 || serverIndex >= _lastServerIndex || (serverIndex >= 21 && serverIndex <= 100))
                        continue;

                    if (serverIndex <= 20)
                        serverIndex *= 5;

                    serverList.Add(serverIndex.ToString());
                }
            }
            else
            {   // 1개의 서버일때
                int.TryParse(serverText, out int serverIndex);

                if (serverIndex <= 0 || serverIndex >= 120 && (serverIndex >= 21 && serverIndex <= 100))
                    return serverList;

                if (serverIndex <= 20)
                    serverIndex = serverIndex * 5;

                serverList.Add(serverIndex.ToString());
            }

            return serverList;
        }

        private static void Thread_SendServer(Object datas)
        {

        }

        private void tb_datasearch_search_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                bt_datasearch_search_Click(sender, e);
            }
        }

        private void bt_server_get_Click(object sender, EventArgs e)
        {
            string serverid = tb_server_number.Text;
            if (serverid.Length == 0)
            {
                serverid = "1";
                tb_server_number.Text = serverid;
            }

            string curdate = tb_server_date.Text;

            DateTime now = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = now.ToString("yyyy-MM-dd");

                tb_server_date.Text = curdate;
            }

            string getdata = requestserverinfo(serverid, curdate);           

            string[] tables = getdata.Split('\r');

            if (tables[0].Contains("$") == false)
            {
                MessageBox.Show(tables[0]);
                return;
            }

            string[] datas = tables[0].Split('$');

            string startdate = datas[0];
            string retention = datas[1];
            string dailybilling = datas[2];
            string billinguserlist = datas[3];
            string totalbillserver = datas[4];
            string dailybillservertotal = "0";
            string gacha = "0";
            string gacha_accessory = "0";
            string AccessoryCount = "0,0,0,0";
            if (datas.Length > 6)
            {
                dailybillservertotal = datas[5];
                gacha = datas[6];
                gacha_accessory = datas[7];
                AccessoryCount = datas[8];
            }
            string vipstr = datas[9];
            string vipstr_play = datas[10];
            string puData = datas[11];
            string nruData = datas[12];
            string serverUserCount = datas[13];
            string marketingCost = datas[14];
            string totalDAU = datas[15];
            string totalPU = datas[16];
            string totalPrice = datas[17];
            string monthPrice = datas[18];
            string threeMonthPrice = datas[19];
            string mauData = datas[20];
            string mpuData = datas[21];
            string mpriceData = datas[22];
            string duration = datas[23];

            lb_duration.Text = "소요시간 " + duration;

            tb_UseCost.Text = int.Parse(marketingCost).ToString("N0");
           
            int x = 50;
            int y = 50;

            int left = 100;
            int ygap = 20;

            serverInfoLabel1.Text = "서버 생성일 : " + startdate;
            serverInfoLabel2.Text = "총매출 : " + int.Parse(totalbillserver).ToString("N0");
            serverInfoLabel3.Text = "총 가챠 횟수 : " + int.Parse(gacha).ToString("N0");
            serverInfoLabel4.Text = "총 악세 가챠 횟수 : " + int.Parse(gacha_accessory).ToString("N0");

            string[] items = retention.Split('&');

            int xGap = 5;

            // DAU
            dgv_Statistics.Rows.Clear();
            dgv_Statistics.Columns.Clear();

            var dauDate = dgv_Statistics.Columns.Add("0", "Date");
            //dgv_Statistics.Columns[dauDate].Width = 80;

            var dauValue = dgv_Statistics.Columns.Add("0", "DAU");
           // dauValue.Width = 50;

            var nruValue = dgv_Statistics.Columns.Add("0", "NRU");
            //nruValue.Width = 50;

            var puValue = dgv_Statistics.Columns.Add("0", "PU");
            //puValue.Width = 50;

            var billingValue = dgv_Statistics.Columns.Add("0", "BILLING");

            string[] nruDatas = nruData.Split('&');
            string[] puDatas = puData.Split('&');
            string[] billingDatas = dailybilling.Split('&');

            for (int i = 0; i < items.Length; i++)
            {
                if (nruDatas.Length <= i || puDatas.Length <= i || billingDatas.Length <= i)
                    continue;

                string[] dauData = items[i].Split(',');
                string[] nru = nruDatas[i].Split('#');
                string[] pu = puDatas[i].Split('#');
                string[] billing = billingDatas[i].Split(',');

                if (dauData.Length <= 1 || nru.Length <= 1 || pu.Length <= 1 || billing.Length <= 1)
                    continue;

                int.TryParse(dauData[1], out int dauCount);
                int.TryParse(nru[1], out int nruCount);
                int.TryParse(pu[1], out int puCount);
                int.TryParse(billing[1], out int billingPrice);

                dgv_Statistics.Rows.Add(dauData[0], dauCount.ToString("N0"), nruCount.ToString("N0"), puCount.ToString("N0"), billingPrice.ToString("N0"));

            }

            //dgv_ServerMonthData.Location = new Point(dgv_Statistics.Location.X + dgv_Statistics.Width + xGap, dgv_Statistics.Location.Y);

            dgv_ServerMonthData.Rows.Clear();
            dgv_ServerMonthData.Columns.Clear();

            dgv_ServerMonthData.Columns.Add("0", "Date");
            dgv_ServerMonthData.Columns.Add("0", "MAU");
            dgv_ServerMonthData.Columns.Add("0", "MPU");
            dgv_ServerMonthData.Columns.Add("0", "MBILLING");

            //dgv_ServerMonthData.Width = dgv_ServerMonthData.Columns[0].Width + dgv_ServerMonthData.Columns[1].Width + dgv_ServerMonthData.Columns[2].Width + dgv_ServerMonthData.Columns[3].Width + 10;

            Dictionary<string, string> mauDic = new Dictionary<string, string>();
            Dictionary<string, string> mpuDic = new Dictionary<string, string>();
            Dictionary<string, string> mpriceDic = new Dictionary<string, string>();

            string[] mauDatas = mauData.Split('&');
            string[] mpuDatas = mpuData.Split('&');
            string[] mpriceDatas = mpriceData.Split('&');

            for (int i = 0; i < mauDatas.Length; i++)
            {
                string[] mau = mauDatas[i].Split('#');
                string[] mpu = mpuDatas[i].Split('#');
                string[] mprice = mpriceDatas[i].Split('#');

                dgv_ServerMonthData.Rows.Add(mau[0],int.Parse(mau[1]).ToString("N0"), int.Parse(mpu[1]).ToString("N0"), int.Parse(mprice[1]).ToString("N0"));
            }

            // 일일 매출
            string[] items3 = billinguserlist.Split('&');

            lv_server_billuserlist.Rows.Clear();
            lv_server_billuserlist.Columns.Clear();
            var tempserver = lv_server_billuserlist.Columns.Add("0", "id");
            var tempserver1 = lv_server_billuserlist.Columns.Add("0", "billing");;
            var tempserver2 = lv_server_billuserlist.Columns.Add("0", "billtotal");

            //lv_server_billuserlist.Width = tempserver.Width + tempserver1.Width + tempserver2.Width;

            for (int i = 0; i < items3.Length; i++)
            {
                if (items3[i].Length > 0)
                {
                    string[] ddd = items3[i].Split('#');
                    string[] sss = ddd[2].Split(',');

                    string[] sss0 = sss[0].Split('-');
                    string[] sss1 = sss[1].Split('-');

                    lv_server_billuserlist.Rows.Add(sss0[0], int.Parse(sss1[0]).ToString("N0"), int.Parse(sss[2]).ToString("N0"));
                }
            }

            // 길드 리스트
            string wwwdatas = requestserverguildlist(serverid);

            string[] wwwdata = wwwdatas.Split('\r');
            string[] guildlistdatas = wwwdata[0].Split('|');

            lv_server_guildlist.Clear();

            lv_server_guildlist.View = View.Details;

            var guildnames = lv_server_guildlist.Columns.Add("name"); guildnames.Width = 110;
            var level_ = lv_server_guildlist.Columns.Add("level"); level_.Width = 40;
            var member_ = lv_server_guildlist.Columns.Add("member"); member_.Width = 60;
            var desc_ = lv_server_guildlist.Columns.Add("desc"); desc_.Width = 2500; // 335

            dic_server_guildid.Clear();

            for (int i = 0; i < guildlistdatas.Length; i++)
            {
                var ddd = guildlistdatas[i].Split('#');

                if (ddd.Length <= 1) continue;

                string id = ddd[(int)ST_Guild.id];
                string level = ddd[(int)ST_Guild.level];
                string name = ddd[(int)ST_Guild.name];
                string title = ddd[(int)ST_Guild.title];
                string guildmembermax = ddd[(int)ST_Guild.guildmembermax];
                string membercount = ddd[(int)ST_Guild.membercount];

                ListViewItem lvitems = new ListViewItem(name);
                lvitems.SubItems.Add(level);
                lvitems.SubItems.Add(membercount + " / " + guildmembermax);
                lvitems.SubItems.Add(title);

                lv_server_guildlist.Items.Add(lvitems);
                dic_server_guildid.Add(name, id);
            }
            int k = 0;

            //lv_server_guildmember.Location = new System.Drawing.Point(lv_server_guildlist.Location.X + lv_server_guildlist.Width + xGap, lv_server_guildlist.Location.Y);
            //lb_GuildMember.Location = new System.Drawing.Point(lv_server_guildmember.Location.X, lb_GuildList.Location.Y);

            lv_serverinfo_vip.Clear();

            lv_serverinfo_vip.View = View.Details;

            var vip = lv_serverinfo_vip.Columns.Add("vip"); vip.Width = 30;
            var vip_all = lv_serverinfo_vip.Columns.Add("all"); vip_all.Width = 40;
            var vip_play = lv_serverinfo_vip.Columns.Add("play"); vip_play.Width = 60;

            lv_serverinfo_vip.Width = vip.Width + vip_all.Width + vip_play.Width;

            var sip_vip_all = vipstr.Split(',');
            var sip_vip_play = vipstr_play.Split(',');
            for (int i = 0; i < 14; i++)
            {
                string vipall = sip_vip_all[i];
                string vipplay = sip_vip_play[i];

                ListViewItem lvitems = new ListViewItem(i.ToString());
                lvitems.SubItems.Add(vipall);
                lvitems.SubItems.Add(vipplay);

                lv_serverinfo_vip.Items.Add(lvitems);
            }

            dataGridView_ServerTotalInfo.Columns.Clear();
            dataGridView_ServerTotalInfo.Rows.Clear();
            dataGridView_ServerTotalInfo.Columns.Add("0", "통계 이름");
            dataGridView_ServerTotalInfo.Columns.Add("1", "값");
            DateTime dateTime = DateTime.ParseExact(startdate, "yyyy-MM-dd", null);
            TimeSpan openData = DateTime.Today - dateTime;
            dataGridView_ServerTotalInfo.Rows.Add("오픈 기간", (openData.TotalDays + 1).ToString("N0") + "일");

            int.TryParse(marketingCost, out int _marketingCost);
            int.TryParse(serverUserCount, out int _serverUserCount);

            if (_marketingCost > 0)
            {
                dataGridView_ServerTotalInfo.Rows.Add("객단가", (_marketingCost / _serverUserCount).ToString("N0"));
                dataGridView_ServerTotalInfo.Rows.Add("서버 유저수", _serverUserCount.ToString("N0") + "명");

                int.TryParse(totalPrice, out int serverTotalPrice);

                dataGridView_ServerTotalInfo.Rows.Add("총매출", serverTotalPrice.ToString("N0") + "원");
                dataGridView_ServerTotalInfo.Rows.Add("구글/원스토어 수수료 포함 총매출 75%", (serverTotalPrice * 0.75f).ToString("N0") + "원");
                dataGridView_ServerTotalInfo.Rows.Add("부가세 포함 총매출65%", (serverTotalPrice * 0.65f).ToString("N0") + "원");

                int dayPrice = (int)(serverTotalPrice / (openData.TotalDays + 1));
                dataGridView_ServerTotalInfo.Rows.Add("서버 일 평균 매출", dayPrice.ToString("N0") + "원");
                dataGridView_ServerTotalInfo.Rows.Add("구글/원스토어 수수료 포함 일매출 75%", (dayPrice * 0.75f).ToString("N0") + "원");
                dataGridView_ServerTotalInfo.Rows.Add("부가세 포함 일매출 65%", (dayPrice * 0.65f).ToString("N0") + "원");

                float totalCost = (serverTotalPrice * 0.65f);
                float totalCostPercent = (totalCost / _marketingCost);
                string desc = (int)totalCostPercent > 0 ? (totalCostPercent * 100).ToString("N0") + "%" : "-" + ((totalCostPercent * 100).ToString("N0") + "%");
                dataGridView_ServerTotalInfo.Rows.Add("현재 순이익", totalCost.ToString("N0") + "원");
                dataGridView_ServerTotalInfo.Rows.Add("순이익 비율", desc);
                dataGridView_ServerTotalInfo.Rows.Add("손/익 계산", (totalCost - _marketingCost).ToString("N0") + "원");
                dataGridView_ServerTotalInfo.Rows.Add("달성가능 예상기간", ((totalCost - _marketingCost) / (dayPrice * 0.65f)).ToString("N0") + "일");

                int.TryParse(monthPrice, out int _monthPrice);
                dataGridView_ServerTotalInfo.Rows.Add("이번달 총매출", _monthPrice.ToString("N0") + "원");
                dataGridView_ServerTotalInfo.Rows.Add("서버 MAU 평균(3달)", totalDAU + "명");
                dataGridView_ServerTotalInfo.Rows.Add("서버 MPU 평균(3달)", totalPU + "명");
                dataGridView_ServerTotalInfo.Rows.Add("서버 매출 달 평균(3달)", int.Parse(threeMonthPrice).ToString("N0") + "원");
            }
        }

        private string getAccessorytextdata(string input)
        {
            string[] accstring = input.Split('&');

            string tooltiptext = "";
            foreach (var acccitem in accstring)
            {
                if (acccitem.Length == 0) continue;

                string[] splitdata = acccitem.Split(',');

                string accname = accessoryTemplate[int.Parse(splitdata[0]), (int)AccessoryTemplate_.name];
                string accgrade = accessoryTemplate[int.Parse(splitdata[0]), (int)AccessoryTemplate_.grade];
                string upgradestr = splitdata[1] == "1" ? "" : "+" + splitdata[1];
                tooltiptext += accgrade + "성" + accname + upgradestr + ", ";
            }

            return tooltiptext;
        }

        private Color getaccessorytopColor(string input)
        {
            string[] accstring = input.Split('&');

            int topgrade = 0;
            foreach (var acccitem in accstring)
            {
                if (acccitem.Length == 0) continue;

                string[] splitdata = acccitem.Split(',');

                string accname = accessoryTemplate[int.Parse(splitdata[0]), (int)AccessoryTemplate_.name];
                string accgrade = accessoryTemplate[int.Parse(splitdata[0]), (int)AccessoryTemplate_.grade];
                string upgradestr = splitdata[1] == "1" ? "" : "+" + splitdata[1];

                topgrade = int.Parse(accgrade) > topgrade ? int.Parse(accgrade) : topgrade;
            }

            switch (topgrade)
            {
                case 4: return Color.YellowGreen;
                case 5: return Color.DodgerBlue;
                case 6: return Color.Red;

                default: return Color.Black;
            }
        }

        private Dictionary<string, string> dic_server_guildid = new Dictionary<string, string>();

        private void bt_server_right_Click(object sender, EventArgs e)
        {
            string curdate = tb_server_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(1).ToString("yyyy-MM-dd");
            }

            tb_server_date.Text = curdate;
        }

        private void bt_server_left_Click(object sender, EventArgs e)
        {
            string curdate = tb_server_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(-1).ToString("yyyy-MM-dd");
            }

            tb_server_date.Text = curdate;
        }

        private Dictionary<string, string[]> dic_guildmembers = new Dictionary<string, string[]>();

        private void lv_server_guildlist_SelectedIndexChanged(object sender, EventArgs e)
        {
            string serverid = tb_server_number.Text;
            if (serverid.Length == 0)
            {
                serverid = "1";
                tb_server_number.Text = serverid;
            }

            if (lv_server_guildlist.SelectedItems.Count > 0)
            {
                string ddd = lv_server_guildlist.SelectedItems[0].Text;

                if (dic_server_guildid.ContainsKey(ddd) == true)
                {
                    // request guild id 
                    string wwwdatas = requestserverguildmembers(serverid, dic_server_guildid[ddd]);

                    string[] wwwdata = wwwdatas.Split('\r');
                    string[] memberdatas = wwwdata[0].Split('|');

                    dic_guildmembers.Clear();

                    for (int i = 0; i < memberdatas.Length; i++)
                    {
                        var memberdata = memberdatas[i].Split('#');

                        string id = memberdata[(int)ST_Guildmember.id];

                        if (dic_guildmembers.ContainsKey(id) == false)
                            dic_guildmembers.Add(id, memberdata);
                    }

                    loadguildmemberdata();
                }
            }
        }

        private void loadguildmemberdata()
        {
            Dictionary<string, Int64> dicsort = new Dictionary<string, Int64>();
            foreach (var memberdata in dic_guildmembers.Values)
            {
                if (memberdata.Length <= 1) continue;

                string id = memberdata[(int)ST_Guildmember.id];
                string totalpower = memberdata[(int)ST_Guildmember.totalpower];

                if (dicsort.ContainsKey(id) == false)
                    dicsort.Add(id, Int64.Parse(totalpower));
            }
            var sortlist = dicsort.Values.ToList();
            sortlist.Sort();
            sortlist.Reverse();

            Form2 form = new Form2();
        }
        bool gacha = false;
        bool AccGacha = false;
        private void bt_server_find_Click(object sender, EventArgs e)
        {
            string vip = tb_server_vip.Text;
            string days = tb_server_days.Text;
            string  = tb_server_.Text;
            string item = tb_server_item.Text;
            string no = tb_server_no.Text;
            string noitem = tb_server_noitem.Text;
            string friendship = tb_server_friendship.Text;
            string transc = tb_server_transc.Text;
            string acc = tb_condition_acc.Text;
            string goodid = tb_condition_goodsid.Text;
            string goodmin = tb_condition_min.Text;
            string goodmax = tb_condition_max.Text;
            string LV = tb_condition_LV.Text;

            string sendpacket = vip + "|" + days + "|" +  + "|" + item + "|" + no + "|" + noitem + "|" + friendship + "|" + transc + "|" + acc + "|" + goodid + "|" + goodmin + "|" + goodmax + "|" + LV + "|" + gacha.ToString() + "|" + AccGacha.ToString();

            string serverid = tb_server_number.Text;
            if (serverid.Length == 0)
            {
                serverid = "1";
                tb_server_number.Text = serverid;
            }

            string writetext = "";
            string before = tb_server_before.Text;
            string after = tb_server_after.Text;

            int startserver = before.Length == 0 ? int.Parse(serverid) : int.Parse(before);
            int endserver = after.Length == 0 ? int.Parse(serverid) : int.Parse(after);

            int count = 0;

            tb_server_search.Clear();
            serverretdatas.Clear();
            tb_server_prograss.Clear();

            List<Thread> T = new List<Thread>();
            int servercount = 0;

            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                if (combineServerList.Contains(servernumber.ToString()) == false)
                    continue;

                Thread t = new Thread(new ParameterizedThreadStart(Thread_sendserver));
                T.Add(t);
                string datas = servernumber + "," + sendpacket;
                t.Start(datas);
                servercount++;
            }

            servercount = 0;

            for (int servernumber = startserver; servernumber <= endserver; servernumber++) // 1 ~ 122
            {
                if (combineServerList.Contains(servernumber.ToString()) == false)
                    continue;

                T[servercount].Join();
                servercount++;

                tb_server_prograss.Text += servernumber + ",";
                tb_server_prograss.Update();
            }

            var listserverdatas = serverretdatas.Keys.ToList();
            listserverdatas.Sort();
            int LineCount = 0;
            for (int i = 0; i < listserverdatas.Count; i++)
            {
                int hhh = listserverdatas[i];
                if (!serverretdatas[hhh].Contains("GachaCount"))
                    LineCount++;

                writetext += serverretdatas[hhh] + Environment.NewLine;
            }
            tb_server_search.Text += "전체 인원 : " + LineCount.ToString("N0") + Environment.NewLine;
            tb_server_search.Text += writetext;

        }

        //private static List<string> serverretdatas = new List<string>();
        private static Dictionary<int, string> serverretdatas = new Dictionary<int, string>();
        private static int getconditioncount = 0;
        private static void Thread_sendserver(Object datas)
        {
            string[] splitdata = ((string)datas).Split(',');
            int serveridint = int.Parse(splitdata[0]);
            string sendpacketdata = splitdata[1];

            string getdatas = thread_requestserverusercondition(serveridint.ToString(), sendpacketdata);
            var ddd = getdatas.Split('|');
            for (int i = 0; i < ddd.Length; i++)
            {
                if (ddd[i].Length > 0)
                {
                    serverretdatas.Add(serveridint * 1000000 + getconditioncount, serveridint + " " + ddd[i]);
                    getconditioncount++;
                }
            }
        }

        private void settingevent(string serverid, string type, ListView ctl)
        {
            string curdate = tb_server_date.Text;
            DateTime now = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = now.ToString("yyyy-MM-dd");

                tb_server_date.Text = curdate;
            }

            string wwwdatas = requestsuperorangetotal(9, serverid, curdate, type);
            var datas = wwwdatas.Split('|');

            ctl.Clear();
            ctl.View = View.Details;

            var tempserver = ctl.Columns.Add("id"); tempserver.Width = 100;
            var tempserver1 = ctl.Columns.Add("point"); tempserver1.Width = 100;


            for (int i = 0; i < datas.Length; i++)
            {
                var items = datas[i].Split('#');

                if (items.Length <= 1) continue;

                string id = items[0];
                string vip = items[1];
                string point = items[2];
                //string id = items[3];

                ListViewItem items_ = new ListViewItem("[" + vip + "]" + id);

                items_.UseItemStyleForSubItems = false;

                items_.SubItems.Add(point);

                ctl.Items.Add(items_);

            }
        }
        private void bt_server_mainevent_Click(object sender, EventArgs e)
        {
            string serverid = tb_server_number.Text;
            if (serverid.Length == 0)
            {
                serverid = "1";
                tb_server_number.Text = serverid;
            }
            string curdate = tb_server_date.Text;
            DateTime now = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = now.ToString("yyyy-MM-dd");

                tb_server_date.Text = curdate;
            }

            label_server_event1.Text = "";
            label_server_event2.Text = "";
            label_server_event3.Text = "";
            label_server_event4.Text = "";

            lv_server_mainevent.Clear();
            lv_server_subevent1.Clear();
            lv_server_subevent2.Clear();
            lv_server_subevent3.Clear();

            var wwwdatas = requestsuperorangetotal(1, serverid, curdate, "1").Split('#');
            var wwwdatas2 = requestsuperorangetotal(1, serverid, curdate, "2").Split('#');
            var wwwdatas3 = requestsuperorangetotal(1, serverid, curdate, "3").Split('#');
            var wwwdatas4 = requestsuperorangetotal(1, serverid, curdate, "4").Split('#');
            var wwwdatas5 = requestsuperorangetotal(1, serverid, curdate, "5").Split('#');
            var wwwdatas6 = requestsuperorangetotal(1, serverid, curdate, "6").Split('#');
            var wwwdatas7 = requestsuperorangetotal(1, serverid, curdate, "7").Split('#');

            string eventtitle = wwwdatas.Length > 1 ? wwwdatas[2].Length > 0 ? rankingeventtemplate[int.Parse(wwwdatas[2]), (int)rankingevent_.title] : "" : "";
            string eventtitle2 = wwwdatas2.Length > 1 ? wwwdatas2[2].Length > 0 ? rankingeventtemplate[int.Parse(wwwdatas2[2]), (int)rankingevent_.title] : "" : "";
            string eventtitle3 = wwwdatas3.Length > 1 ? wwwdatas3[2].Length > 0 ? rankingeventtemplate[int.Parse(wwwdatas3[2]), (int)rankingevent_.title] : "" : "";
            string eventtitle4 = wwwdatas4.Length > 1 ? wwwdatas4[2].Length > 0 ? rankingeventtemplate[int.Parse(wwwdatas4[2]), (int)rankingevent_.title] : "" : "";
            string eventtitle5 = wwwdatas5.Length > 1 ? wwwdatas5[2].Length > 0 ? rankingeventtemplate[int.Parse(wwwdatas5[2]), (int)rankingevent_.title] : "" : "";
            string eventtitle6 = wwwdatas6.Length > 1 ? wwwdatas6[2].Length > 0 ? rankingeventtemplate[int.Parse(wwwdatas6[2]), (int)rankingevent_.title] : "" : "";
            string eventtitle7 = wwwdatas7.Length > 1 ? wwwdatas7[2].Length > 0 ? rankingeventtemplate[int.Parse(wwwdatas7[2]), (int)rankingevent_.title] : "" : "";

            List<int> list_title = new List<int>();
            Queue<Label> list_label = new Queue<Label>();
            Queue<ListView> list_listview = new Queue<ListView>();

            list_label.Enqueue(label_server_event2);
            list_label.Enqueue(label_server_event3);
            list_label.Enqueue(label_server_event4);

            list_listview.Enqueue(lv_server_subevent1);
            list_listview.Enqueue(lv_server_subevent2);
            list_listview.Enqueue(lv_server_subevent3);

            if (eventtitle2.Length > 0) list_title.Add(2);
            if (eventtitle3.Length > 0) list_title.Add(3);
            if (eventtitle4.Length > 0) list_title.Add(4);
            if (eventtitle5.Length > 0) list_title.Add(5);
            if (eventtitle6.Length > 0) list_title.Add(6);
            if (eventtitle7.Length > 0) list_title.Add(7);

            settingevent(serverid, eventtitle, "1", label_server_event1, lv_server_mainevent);

            foreach (var gogo in list_title)
            {
                switch (gogo)
                {
                    case 2: settingevent(serverid, eventtitle2, "2", list_label.Dequeue(), list_listview.Dequeue()); break;
                    case 3: settingevent(serverid, eventtitle3, "3", list_label.Dequeue(), list_listview.Dequeue()); break;
                    case 4: settingevent(serverid, eventtitle4, "4", list_label.Dequeue(), list_listview.Dequeue()); break;
                    case 5: settingevent(serverid, eventtitle5, "5", list_label.Dequeue(), list_listview.Dequeue()); break;
                    case 6: settingevent(serverid, eventtitle6, "6", list_label.Dequeue(), list_listview.Dequeue()); break;
                    case 7: settingevent(serverid, eventtitle7, "7", list_label.Dequeue(), list_listview.Dequeue()); break;
                }

                if (list_label.Count == 0) break;
            }

        }
        private void settingevent(string serverid, string title, string type, Label lbl, ListView ctl)
        {
            if (lbl == null) return;

            lbl.Text = title;

            settingevent(serverid, type, ctl);
        }

        public enum FAQTitle_
        {
            type, //문의 타입
            server, //서버
            UserID,   //아이디
            nickname, //닉네임
            Title, //제목 내용
            isEnd, //완료 여부
            isAnswer, //답변 여부
            time, //문의 시간
        }

        public enum FAQDESC_
        {
            index, // 내용의 index
            desc, //문의 내용 or 답변 내용
            SendDate, //보낸 시간
            ReadDate, //읽은 시간 0이면 안 읽음
            isAdmin, //운영자 보냄 1, 유저가 보냄 0 
        }

        private Dictionary<int, string> dic_chatting_total = new Dictionary<int, string>();
        private Dictionary<DateTime, string> chatting_user_List = new Dictionary<DateTime, string>();
        private string SelectFAQUserID = "";
        private string SelectFAQUserServer = "";
        private string SelectFAQUserTitleIndex = "";
        private string SelectFAQUserDescIndex = "";

        private int descTotalHeight = 0;
        private string SelectFAQType = "";
        private string SelectFAQAnswerAdmin = "";
        private int descwidth = 425;
        private void bt_chatting_reload_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < panel_chatting_end.Controls.Count; i++)
            {
                Control button = panel_chatting_end.Controls[i];
                button.Dispose();
            }

            for (int i = 0; i < panel_chatting_list_user.Controls.Count; i++)
            {
                Control button = panel_chatting_list_user.Controls[i];
                button.Dispose();
            }

            for (int i = 0; i < panel_chatting_answer.Controls.Count; i++)
            {
                Control button = panel_chatting_answer.Controls[i];
                button.Dispose();
            }

            for (int i = 0; i < panel_chatting_total.Controls.Count; i++)
            {
                Control button = panel_chatting_total.Controls[i];
                button.Dispose();
            }

            for (int i = 0; i < panel_chatting_user.Controls.Count; i++)
            {
                Control button = panel_chatting_user.Controls[i];
                button.Dispose();
            }

            panel_chatting_end.Controls.Clear();
            panel_chatting_answer.Controls.Clear();
            panel_chatting_total.Controls.Clear();
            panel_chatting_list_user.Controls.Clear();
            panel_chatting_user.Controls.Clear();

            Selected_user_server.Text = "";
            Selected_user_id.Text = "";
            Selected_user_nick.Text = "";
            Selected_user_vip.Text = "";
            Selected_user_lastconnect.Text = "";
            Selected_user_dailyCharge.Text = "";
            Selected_user_event.Text = "";
            Selected_user_guild.Text = "";
            chatting_user_List.Clear();
            int EndCount = 0;
            int AnswerCount = 0;
            int ProcessingCount = 0;

            List<string> serverList = new List<string>();

            for (int i = 0; i < combineServerList.Count; i++)
            {
                string serverIndex = combineServerList[i];

                if (string.IsNullOrEmpty(serverIndex))
                    continue;

                if (!string.IsNullOrEmpty(FAQ_Server_Input.Text) && FAQ_Server_Input.Text != "")
                {
                    if (FAQ_Server_Input.Text != serverIndex)
                        continue;
                }

                serverList.Add(serverIndex);
            }

            string sendServerData = string.Join("@", serverList);

            for (int i = 0; i < combineServerList.Count; i++)
            {
                string serverIndex = combineServerList[i];

                if (string.IsNullOrEmpty(serverIndex))
                    continue;

                if (!string.IsNullOrEmpty(FAQ_Server_Input.Text) && FAQ_Server_Input.Text != "")
                {
                    if (FAQ_Server_Input.Text != serverIndex)
                        continue;
                }

                string getdata = requestsuperorangetotal(10, serverIndex, "1", SelectFAQType, FAQ_Server_Date.Text);

                string[] datas = getdata.Split('&');

                DateTime DefaultDay = DateTime.Parse("2019-05-22 00:00:00");

                for (int j = 0; j < datas.Length; j++)
                {
                    string chatUser = datas[j];

                    if (chatUser == "")
                        continue;

                    string[] chatUserData = chatUser.Split('#');
                    string lastTime = chatUserData[5];

                    if (string.IsNullOrEmpty(lastTime))
                    {
                        lastTime = DefaultDay.ToString();
                        DefaultDay = DefaultDay.AddSeconds(1);
                    }

                    if (chatting_user_List.ContainsKey(DateTime.Parse(lastTime)))
                    {
                        DateTime tempData = DateTime.Parse(lastTime);
                        while (chatting_user_List.ContainsKey(tempData))
                        {
                            tempData = tempData.AddSeconds(1);
                        }
                        lastTime = tempData.ToString("yyyy-MM-dd HH:mm:ss");
                    }


                    chatting_user_List.Add(DateTime.Parse(lastTime), chatUser + "@" + serverIndex);
                }
            }

            int width = 200;
            int height = 50;

            var list = chatting_user_List.Keys.ToList();
            var result = from n in list orderby n descending select n;
            input_FAQ_Answer_admin.Text = "";
            foreach (var key in result)
            {
                string UserData = chatting_user_List[key].Split('@')[0];
                string server = chatting_user_List[key].Split('@')[1];
                string[] UserDatas = UserData.Split('#');

                string UserID = UserDatas[0];
                string nickname = UserDatas[1];
                string isEnd = UserDatas[2];
                string isAnswer = UserDatas[3];
                string isProcess = UserDatas[4];
                string lastTime = UserDatas[5];
                string lastDescTime = UserDatas[6];
                string btnListParam = server + " 서버 " + nickname + "\n";

                if (string.IsNullOrEmpty(tb_FAQ_Nickname.Text) == false)
                {
                    if (nickname.Contains(tb_FAQ_Nickname.Text) == false)
                        continue;
                }

                if (isEnd == "1")
                {
                    var button = createbutton(0, EndCount * height, width, height, btnListParam, panel_chatting_end);
                    button.BackColor = Color.Gray;
                    button.Click += delegate
                    {
                        SelectFAQUserID = UserID;
                        SelectFAQUserServer = button.Text.Split(' ')[0];
                        getSelectUserInfo();
                        refreshUser();
                    };
                    EndCount++;


                }

                if (isAnswer == "1")
                {
                    var button = createbutton(0, AnswerCount * height, width, height, btnListParam, panel_chatting_answer);
                    button.BackColor = Color.Green;
                    button.Click += delegate
                    {
                        SelectFAQUserID = UserID;
                        SelectFAQUserServer = button.Text.Split(' ')[0];

                        getSelectUserInfo();

                        refreshUser();
                    };
                    AnswerCount++;

                }

                if (isAnswer == "-1")
                {
                    btnListParam += " 보류";
                    var button = createbutton(0, AnswerCount * height, width, height, btnListParam, panel_chatting_answer);
                    button.BackColor = Color.Blue;
                    button.ForeColor = Color.White;
                    button.Click += delegate
                    {
                        SelectFAQUserID = UserID;
                        SelectFAQUserServer = button.Text.Split(' ')[0];

                        getSelectUserInfo();

                        refreshUser();
                    };
                    AnswerCount++;

                }

                if (isProcess == "-1")
                {
                    btnListParam += " 처리중";
                    var button = createbutton(0, ProcessingCount * height, width, height, btnListParam, panel_chatting_total);
                    button.BackColor = Color.LightGray;
                    button.ForeColor = Color.White;
                    button.Click += delegate
                    {
                        SelectFAQUserID = UserID;
                        SelectFAQUserServer = button.Text.Split(' ')[0];

                        getSelectUserInfo();

                        refreshUser();
                    };
                    ProcessingCount++;

                }

                if (isProcess == "1")
                {
                    if (!string.IsNullOrEmpty(lastTime) && lastTime != "")
                    {
                        var buttonDate = createbutton(200, ProcessingCount * height, 80, height, lastTime, panel_chatting_total);
                    }

                    if (!string.IsNullOrEmpty(lastDescTime) && lastDescTime != "")
                    {
                        var buttonDate = createbutton(280, ProcessingCount * height, 80, height, lastDescTime, panel_chatting_total);
                    }


                    var button = createbutton(0, ProcessingCount * height, width, height, btnListParam, panel_chatting_total);
                    button.BackColor = Color.Red;
                    button.Click += delegate
                    {
                        SelectFAQUserID = UserID;
                        SelectFAQUserServer = button.Text.Split(' ')[0];
                        getSelectUserInfo();
                        refreshUser();
                    };
                    ProcessingCount++;
                }
            }
        }

        private void bt_chatting_send_Click(object sender, EventArgs e)
        {
            string desc = textBox2.Text;
            desc = desc.Replace("\r\n", "\\" + "n");

            desc = desc.Replace(",", ".");
            desc = desc.Replace("#", " ");
            desc = desc.Replace("&", " ");
            desc = desc.Replace("|", " ");
            desc = desc.Replace("$", " ");
            desc = desc.Replace("@", " ");
            desc = desc.Replace("*", " ");
            desc = desc.Replace("_", " ");
            desc = desc.Replace("/", " ");
            desc = desc.Replace(":", " ");
            desc = desc.Replace("'", " ");
            desc = desc.Replace("~", " ");
            desc = desc.Replace("%", " ");

            desc = Regex.Replace(desc, @"[^a-zA-Z0-9가-힣ㄱ-ㅎㅏ-ㅣ\s!?[]();-_+=.]", "");
            desc = Regex.Replace(desc, @"\uD83D[\uDC00-\uDFFF]|\uD83C[\uDC00-\uDFFF]|\uFFFD", "");

            if (SelectFAQAnswerAdmin == "")
            {
                bool isOK = false;
                if (InputBox("-", "담당자 입력", ref SelectFAQAnswerAdmin) == DialogResult.OK)
                {
                    if (SelectFAQAnswerAdmin != "")
                    {
                        isOK = true;
                    }
                    else
                    {
                        MessageBox.Show("담당자 미입력");
                    }
                }
                if (!isOK) return;
            }

            string alert = requestsuperorangetotal(11, SelectFAQUserServer, SelectFAQUserID, SelectFAQUserTitleIndex, desc, SelectFAQAnswerAdmin);

            MessageBox.Show(alert);
            refreshUser();
        }

        private void bt_chatting_update_Click(object sender, EventArgs e)
        {
            string desc = textBox2.Text;

            desc = desc.Replace("\r\n", "\\" + "n");

            desc = desc.Replace(",", ".");
            desc = desc.Replace("#", " ");
            desc = desc.Replace("&", " ");
            desc = desc.Replace("|", " ");
            desc = desc.Replace("$", " ");
            desc = desc.Replace("@", " ");
            desc = desc.Replace("*", " ");
            desc = desc.Replace("_", " ");
            desc = desc.Replace("/", " ");
            desc = desc.Replace(":", " ");
            desc = desc.Replace("'", " ");
            desc = desc.Replace("~", " ");
            desc = desc.Replace("%", " ");

            desc = Regex.Replace(desc, @"[^a-zA-Z0-9가-힣ㄱ-ㅎㅏ-ㅣ\s!?[]();-_+=.]", "");
            desc = Regex.Replace(desc, @"\uD83D[\uDC00-\uDFFF]|\uD83C[\uDC00-\uDFFF]|\uFFFD", "");

            string alert = requestsuperorangetotal(12, SelectFAQUserServer, SelectFAQUserID, SelectFAQUserTitleIndex, SelectFAQUserDescIndex, desc);

            MessageBox.Show(alert);
            refreshUser();
        }

        private void bt_chatting_delete_Click(object sender, EventArgs e)
        {//삭제 (desc 선택되어 있을 시 그 답변 삭제, 선택 안되어 있을 시 글 자체 삭제)
            string alert = requestsuperorangetotal(13, SelectFAQUserServer, SelectFAQUserID, SelectFAQUserTitleIndex, SelectFAQUserDescIndex);

            MessageBox.Show(alert);
            refreshUser();
        }

        private void bt_Make_Finish_Click(object sender, EventArgs e)
        {//완료 처리
            string alert = requestsuperorangetotal(12, SelectFAQUserServer, SelectFAQUserID, SelectFAQUserTitleIndex, "", "완료");
            refreshUser();
        }
        private void bt_Make_Hold_Click(object sender, EventArgs e)
        {//보류 처리
            string alert = requestsuperorangetotal(12, SelectFAQUserServer, SelectFAQUserID, SelectFAQUserTitleIndex, "", "보류");
            refreshUser();
        }

        private void bt_Make_Processing_Click(object sender, EventArgs e)
        {//처리중
            string alert = requestsuperorangetotal(12, SelectFAQUserServer, SelectFAQUserID, SelectFAQUserTitleIndex, "", "처리중");
            refreshUser();
        }

        private void bt_Make_answerfinish_Click(object sender, EventArgs e)
        {//답변 완료 처리
            string alert = requestsuperorangetotal(12, SelectFAQUserServer, SelectFAQUserID, SelectFAQUserTitleIndex, "", "답변완료");
            refreshUser();
        }

        private void refreshUser()
        {
            int width = 200;
            int height = 50;
            input_FAQ_Answer_admin.Text = "";
            for (int i = 0; i < panel_chatting_list_user.Controls.Count;)
                panel_chatting_list_user.Controls.Remove((Control)panel_chatting_list_user.Controls[i]);

            string getUserChattingData = requestsuperorangetotal(10, SelectFAQUserServer, "2", SelectFAQUserID);

            string[] UserChattingList = getUserChattingData.Split('$');
            int ListCount = 0;

            for (int i = 0; i < UserChattingList.Length; i++)
            {
                if (UserChattingList[i] == "") continue;

                string[] UserChattingListData = UserChattingList[i].Split('&');
                string[] UserChattingListDataTitle = UserChattingListData[1].Split('#');
                string[] userChattingListDataDetail = UserChattingListData[2].Split('*')[0].Split('#');

                if (userChattingListDataDetail.Length < 5)
                    continue;

                string sendTime = userChattingListDataDetail[(int)FAQDESC_.SendDate];

                string EndText = "미완료";
                if (UserChattingListDataTitle[(int)FAQTitle_.isEnd] == "1")
                {
                    EndText = "완료";
                }
                else if (UserChattingListDataTitle[(int)FAQTitle_.isAnswer] == "1")
                {
                    EndText = "답변 완료";
                }
                else if (UserChattingListDataTitle[(int)FAQTitle_.isAnswer] == "-1")
                {
                    EndText = "보류";
                }
                else if (UserChattingListDataTitle[(int)FAQTitle_.isAnswer] == "-2")
                {
                    EndText = "처리 중";
                }
                string type = "";
                switch (UserChattingListDataTitle[(int)FAQTitle_.type])
                {
                    case "1": type = "결제 문의"; break;
                    case "2": type = "게임 문의"; break;
                    case "3": type = "계정 문의"; break;
                    case "4": type = "기타 문의"; break;
                    case "5": type = "버그 신고"; break;
                    case "6": type = "건의"; break;
                }


                string buttondesc = type + " / " + sendTime + "\n" + UserChattingListDataTitle[(int)FAQTitle_.Title] + "\n" + EndText;

                var buttonTitle = createbutton(0, ListCount * height, width, height, buttondesc, panel_chatting_list_user);


                if (UserChattingListDataTitle[(int)FAQTitle_.isEnd] == "1")
                {
                    buttonTitle.BackColor = Color.Gray;
                }
                else if (UserChattingListDataTitle[(int)FAQTitle_.isAnswer] == "1")
                {
                    buttonTitle.BackColor = Color.Green;
                }
                else if (UserChattingListDataTitle[(int)FAQTitle_.isAnswer] == "-1")
                {
                    buttonTitle.BackColor = Color.Blue;
                    buttonTitle.ForeColor = Color.White;
                }
                else if (UserChattingListDataTitle[(int)FAQTitle_.isAnswer] == "-2")
                {
                    buttonTitle.BackColor = Color.LightGray;
                    buttonTitle.ForeColor = Color.White;
                }
                else
                {
                    buttonTitle.BackColor = Color.Red;
                }
                if (SelectFAQUserTitleIndex == UserChattingListData[0])
                {
                    int userpanelcount = 1;
                    descTotalHeight = 0;
                    SelectFAQUserTitleIndex = UserChattingListData[0];
                    for (int cnt = 0; cnt < panel_chatting_user.Controls.Count;)
                        panel_chatting_user.Controls.Remove((Control)panel_chatting_user.Controls[cnt]);

                    string[] DescData = UserChattingListData[2].Split('*');

                    for (int desccount = 0; desccount < DescData.Length; desccount++)
                    {
                        if (DescData[desccount] == "") continue;

                        string admin = DescData[desccount].Split('#')[(int)FAQDESC_.isAdmin];
                        int position = 0;
                        if (admin == "1")
                            position = 100;

                        string[] DescDataDetail = DescData[desccount].Split('#');

                        string isRead = "";
                        if (DescDataDetail[(int)FAQDESC_.ReadDate] == "0")
                            isRead = "안읽음";
                        else
                            isRead = "읽음 : " + DescDataDetail[(int)FAQDESC_.ReadDate];
                        DescDataDetail[(int)FAQDESC_.desc] = DescDataDetail[(int)FAQDESC_.desc].Replace("\\" + "n", "\r\n");
                        string desc = "보낸 시간 : " + DescDataDetail[(int)FAQDESC_.SendDate] + "\n" + DescDataDetail[(int)FAQDESC_.desc];


                        if (admin == "1")
                        {
                            desc += "\n" + isRead;

                            if (DescDataDetail.Length > 5)
                            {
                                desc += "\n" + "답변자 : " + DescDataDetail[5];

                                input_FAQ_Answer_admin.Text = DescDataDetail[5];
                            }

                        }



                        userpanelcount = (int)(desc.Length / descwidth);

                        if (desc.Contains("\n")) userpanelcount++;
                        if (desc.Contains("\r\n")) userpanelcount++;
                        userpanelcount *= 100;
                        userpanelcount += 100;
                        var button_Desc = createbutton(position, descTotalHeight, descwidth, userpanelcount, desc, panel_chatting_user);
                        button_Desc.TextAlign = ContentAlignment.TopLeft;
                        button_Desc.BackColor = Color.White;
                        FontFamily fontFamily = new FontFamily("맑은 고딕");
                        button_Desc.Font = new Font(fontFamily, 9);
                        descTotalHeight += userpanelcount;
                        button_Desc.Click += delegate
                        {
                            SelectFAQUserDescIndex = DescDataDetail[(int)FAQDESC_.index];
                            textBox2.Text = DescDataDetail[(int)FAQDESC_.desc];
                        };
                    }
                }



                buttonTitle.Click += delegate
                    {
                        SelectFAQUserDescIndex = "";
                        int userpanelcount = 1;
                        descTotalHeight = 0;
                        SelectFAQUserTitleIndex = UserChattingListData[0];
                        SelectFAQUserDescIndex = "";
                        for (int cnt = 0; cnt < panel_chatting_user.Controls.Count;)
                            panel_chatting_user.Controls.Remove((Control)panel_chatting_user.Controls[cnt]);

                        string[] DescData = UserChattingListData[2].Split('*');

                        for (int desccount = 0; desccount < DescData.Length; desccount++)
                        {
                            if (DescData[desccount] == "" || DescData[desccount] == "Will_Delete_at_Data") continue;

                            string admin = DescData[desccount].Split('#')[(int)FAQDESC_.isAdmin];
                            int position = 0;
                            if (admin == "1")
                                position = 100;

                            string[] DescDataDetail = DescData[desccount].Split('#');

                            string isRead = "";
                            if (DescDataDetail[(int)FAQDESC_.ReadDate] == "0")
                                isRead = "안읽음";
                            else
                                isRead = "읽음 : " + DescDataDetail[(int)FAQDESC_.ReadDate];
                            DescDataDetail[(int)FAQDESC_.desc] = DescDataDetail[(int)FAQDESC_.desc].Replace("\\" + "n", "\r\n");
                            string desc = "보낸 시간 : " + DescDataDetail[(int)FAQDESC_.SendDate] + "\n\n" + DescDataDetail[(int)FAQDESC_.desc];



                            if (admin == "1")
                            {
                                desc += "\n\n" + isRead;

                                if (DescDataDetail.Length > 5)
                                {
                                    desc += "\n" + "답변자 : " + DescDataDetail[5];

                                    input_FAQ_Answer_admin.Text = DescDataDetail[5];
                                }

                            }

                            userpanelcount = (int)(desc.Length / descwidth);

                            if (desc.Contains("\n")) userpanelcount++;
                            if (desc.Contains("\r\n")) userpanelcount++;
                            userpanelcount *= 100;
                            userpanelcount += 100;
                            var button_Desc = createbutton(position, descTotalHeight, descwidth, userpanelcount, desc, panel_chatting_user);
                            button_Desc.TextAlign = ContentAlignment.TopLeft;
                            button_Desc.BackColor = Color.White;
                            FontFamily fontFamily = new FontFamily("맑은 고딕");
                            button_Desc.Font = new Font(fontFamily, 9);
                            descTotalHeight += userpanelcount;
                            button_Desc.Click += delegate
                            {
                                SelectFAQUserDescIndex = DescDataDetail[(int)FAQDESC_.index];
                                if (DescDataDetail[(int)FAQDESC_.isAdmin] == "1")
                                    textBox2.Text = DescDataDetail[(int)FAQDESC_.desc];
                                else
                                {
                                    string sendDesc = "";
                                    sendDesc += "문의시간 : " + DescDataDetail[(int)FAQDESC_.SendDate] + "\r\n";
                                    sendDesc += Selected_user_server.Text + "서버 " + Selected_user_nick.Text + "\r\n";
                                    sendDesc += Selected_user_id.Text + "\r\n";
                                    sendDesc += DescDataDetail[(int)FAQDESC_.desc];
                                    textBox2.Text = sendDesc;
                                }
                            };
                        }

                    };

                ListCount++;
            }

        }

        private void bt_chatting_type_1_Click(object sender, EventArgs e)
        {
            SelectFAQType = "1";
        }

        private void bt_chatting_type_2_Click(object sender, EventArgs e)
        {
            SelectFAQType = "2";
        }

        private void bt_chatting_type_3_Click(object sender, EventArgs e)
        {
            SelectFAQType = "3";
        }

        private void bt_chatting_type_4_Click(object sender, EventArgs e)
        {
            SelectFAQType = "4";
        }

        private void bt_chatting_type_5_Click(object sender, EventArgs e)
        {
            SelectFAQType = "5";
        }


        private void bt_chatting_type_6_Click(object sender, EventArgs e)
        {
            SelectFAQType = "6";
        }

        private void bt_chatting_type_all_Click(object sender, EventArgs e)
        {
            SelectFAQType = "";
        }


        private void bt_FAQ_Answer_admin1_Click(object sender, EventArgs e)
        {
            SelectFAQAnswerAdmin = bt_FAQ_Answer_admin1.Text;
        }

        private void bt_FAQ_Answer_admin2_Click(object sender, EventArgs e)
        {
            SelectFAQAnswerAdmin = bt_FAQ_Answer_admin2.Text;
        }

        private void bt_FAQ_Answer_admin3_Click(object sender, EventArgs e)
        {
            SelectFAQAnswerAdmin = bt_FAQ_Answer_admin3.Text;
        }

        private void bt_FAQ_Answer_admin4_Click(object sender, EventArgs e)
        {
            SelectFAQAnswerAdmin = bt_FAQ_Answer_admin4.Text;
        }

        private void getSelectUserInfo()
        {
            string getUserInfo = requestsuperorangetotal(10, SelectFAQUserServer, "3", SelectFAQUserID, FAQ_Server_Date.Text);

            if (getUserInfo == "") return;

            string[] getUserInfos = getUserInfo.Split('&');

            if (getUserInfos.Length < 7) return;

            Selected_user_server.Text = getUserInfos[0];
            Selected_user_id.Text = getUserInfos[1];
            Selected_user_nick.Text = getUserInfos[2];
            Selected_user_vip.Text = getUserInfos[3];
            Selected_user_lastconnect.Text = getUserInfos[4];
            Selected_user_dailyCharge.Text = getUserInfos[5];
            Selected_user_event.Text = getUserInfos[6];
            if (getUserInfos.Length > 7)
                Selected_user_guild.Text = getUserInfos[7];
            bt_chatting_server_admin.Text = SelectFAQUserServer + "서버 운영툴";

        }
        private void listView1_ColumnClick_1(object sender, ColumnClickEventArgs e)
        {
            // 방향 초기화
            for (int i = 0; i < listView1.Columns.Count; i++)
            {
                listView1.Columns[i].Text = listView1.Columns[i].Text.Replace(" △", "");
                listView1.Columns[i].Text = listView1.Columns[i].Text.Replace(" ▽", "");
            }

            // DESC
            if (this.listView1.Sorting == SortOrder.Ascending || listView1.Sorting == SortOrder.None)
            {
                this.listView1.ListViewItemSorter = new ListViewItemComparer(e.Column, "desc");
                listView1.Sorting = SortOrder.Descending;
                listView1.Columns[e.Column].Text = listView1.Columns[e.Column].Text + " ▽";
            }
            // ASC
            else
            {
                this.listView1.ListViewItemSorter = new ListViewItemComparer(e.Column, "asc");
                listView1.Sorting = SortOrder.Ascending;
                listView1.Columns[e.Column].Text = listView1.Columns[e.Column].Text + " △";
            }
            listView1.Sort();

            // 컬럼 갯수가 변경되는 구조라면 sorter를 null 처리하여야 함
            listView1.ListViewItemSorter = null;
        }

        private void ConnectState_Local_CheckedChanged(object sender, EventArgs e)
        {
            ConnectState = ServerState.Local;
        }

        private void ConnectState_Test_CheckedChanged(object sender, EventArgs e)
        {
            ConnectState = ServerState.Test;
        }

        private void ConnectState_Beta_CheckedChanged(object sender, EventArgs e)
        {
            ConnectState = ServerState.Beta;
        }

        private void ConnectState_Live_CheckedChanged(object sender, EventArgs e)
        {
            ConnectState = ServerState.Live;
            combineServerList.Clear();
            string lastServerIndex = requestsuperorangetotal(10, "1", "0", "", "");
            int.TryParse(lastServerIndex, out int _lastServerIndex);
            string[] combineServerLists = requestsuperorangetotal(31, "40", "").Split('#');

            _iLastServerIndex = _lastServerIndex;

            Dictionary<string, int> tempDic = new Dictionary<string, int>();

            for (int i = 0; i < _iLastServerIndex; i++)
            {
                if (string.IsNullOrEmpty(combineServerLists[i]) == false)
                {
                    if (tempDic.ContainsKey(combineServerLists[i]) == false)
                        tempDic.Add(combineServerLists[i], 1);
                }
                else
                {
                    int serverIndex = i + 1;
                    if (tempDic.ContainsKey(serverIndex.ToString()) == false)
                        tempDic.Add(serverIndex.ToString(), 1);
                }
            }

            foreach (var temp in tempDic)
                combineServerList.Add(temp.Key);
        }
        private void ConnectState_LiveTW_CheckedChanged(object sender, EventArgs e)
        {
            ConnectState = ServerState.LiveTW;
            combineServerList.Clear();
            string lastServerIndex = requestsuperorangetotal(10, "1", "0", "", "");
            int.TryParse(lastServerIndex, out int _lastServerIndex);
            string[] combineServerLists = requestsuperorangetotal(31, "1", "").Split('#');

            _iLastServerIndex = _lastServerIndex;

            Dictionary<string, int> tempDic = new Dictionary<string, int>();

            for (int i = 0; i < _iLastServerIndex; i++)
            {
                if (string.IsNullOrEmpty(combineServerLists[i]) == false)
                {
                    if (tempDic.ContainsKey(combineServerLists[i]) == false)
                        tempDic.Add(combineServerLists[i], 1);
                }
                else
                {
                    int serverIndex = i + 1;
                    if (tempDic.ContainsKey(serverIndex.ToString()) == false)
                        tempDic.Add(serverIndex.ToString(), 1);
                }
            }

            foreach (var temp in tempDic)
                combineServerList.Add(temp.Key);
        }

        private void chk_Gacha_CheckedChanged(object sender, EventArgs e)
        {
            gacha = !gacha;
        }

        private void chk_Gacha_Acc_CheckedChanged(object sender, EventArgs e)
        {
            AccGacha = !AccGacha;
        }

        private void bt_gachainfo_date_L_Click(object sender, EventArgs e)
        {
            string curdate = tb_gachainfo_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(-1).ToString("yyyy-MM-dd");
            }

            tb_gachainfo_date.Text = curdate;
        }

        private void bt_gachainfo_date_R_Click(object sender, EventArgs e)
        {
            string curdate = tb_gachainfo_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(1).ToString("yyyy-MM-dd");
            }

            tb_gachainfo_date.Text = curdate;
        }

        private void bt_gachainfo_load_Click(object sender, EventArgs e)
        {
            int startserver = 1;
            int endserver = 1;

            if (tb_gachainfo_start.Text.Length > 0)
                startserver = int.Parse(tb_gachainfo_start.Text);
            if (tb_gachainfo_end.Text.Length > 0)
                endserver = int.Parse(tb_gachainfo_end.Text);

            string curdate = tb_gachainfo_date.Text;

            if (curdate.Length <= 0)
            {
                DateTime date = DateTime.Now;
                curdate = date.ToString("yyyy-MM-dd");
                tb_gachainfo_date.Text = curdate;
            }

            get_serverretdata.Clear();
            gachainfo_userdata.Clear();

            int count = 0;
            int isAcce = cb_gacha_isAcce.Checked == true ? 2 : 1;
            List<Thread> T = new List<Thread>(); ;
            int servercount = 0;
            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                if (combineServerList.Contains(servernumber.ToString()) == false)
                    continue;

                Thread thread = new Thread(new ParameterizedThreadStart(Thread_sendservertotal));
                string datas = servernumber + "," + 14 + "," + curdate + "," + isAcce;    //packettype,날짜,가차탸입
                T.Add(thread);
                T[servercount].Start(datas);
                servercount++;
            }
            servercount = 0;
            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                T[servercount].Join();
                servercount++;

                lb_gachainfo_main.Text = servernumber.ToString();
                lb_gachainfo_main.Update();
            }

            var listserverdatas = get_serverretdata.Keys.ToList();
            listserverdatas.Sort();
            listserverdatas.Reverse();
            int LineCount = 0;

            dgv_gachaServerInfo.Columns.Clear();
            dgv_gachaServerInfo.Rows.Clear();

            dgv_GachaUserInfo.Columns.Clear();
            dgv_GachaUserInfo.Rows.Clear();


            dgv_gachaServerInfo.Columns.Add("0", "Server");
            dgv_gachaServerInfo.Columns.Add("1", "Count");

            foreach (var hhh in listserverdatas)
            {
                if (get_serverretdata.ContainsKey(hhh) == true && get_serverretdata[hhh] != null)
                {
                    string[] data = get_serverretdata[hhh].Split('#');

                    if (data[1].Contains("GachaCount"))
                    {
                        dgv_gachaServerInfo.Rows.Add(data[0], data[1].Split('t')[1]);
                    }
                    else
                    {
                        LineCount++;

                        string[] gachauserdata = data[1].Split(',');
                        if (gachauserdata.Length > 3)
                            gachainfo_userdata.Add(int.Parse(gachauserdata[2]) * 1000000 + LineCount, gachauserdata[0] + " : " + gachauserdata[1] + " : " + gachauserdata[3]);
                        else
                            gachainfo_userdata.Add(int.Parse(gachauserdata[2]) * 1000000 + LineCount, gachauserdata[0] + " : " + gachauserdata[1] + " : id없음");
                    }
                }
                else
                {
                    int i = 0;
                }
            }

            var listgachainfo_userdata = gachainfo_userdata.Keys.ToList();
            listgachainfo_userdata.Sort();
            listgachainfo_userdata.Reverse();

            dgv_GachaUserInfo.Columns.Add("0", "Count");
            dgv_GachaUserInfo.Columns.Add("1", "Server");
            dgv_GachaUserInfo.Columns.Add("2", "nickname");
            dgv_GachaUserInfo.Columns.Add("3", "UserID");

            foreach (var hhh in listgachainfo_userdata)
            {
                string data = gachainfo_userdata[hhh];
                string[] datas = data.Split(':');
                dgv_GachaUserInfo.Rows.Add((hhh / 1000000).ToString(), datas[0], datas[1], datas[2]);
            }

            dgv_gachaServerInfo.Refresh();
            dgv_GachaUserInfo.Refresh();
        }
        private static Dictionary<int, string> get_serverretdata = new Dictionary<int, string>();
        private static Dictionary<Int64, string> gachainfo_userdata = new Dictionary<Int64, string>();

        private static void Thread_sendservertotal(Object datas)
        {
            string[] splitdata = ((string)datas).Split(',');
            int serveridint = int.Parse(splitdata[0]);
            string packettype = splitdata[1];
            string datetime = splitdata.Length > 2 ? splitdata[2] : "";
            string value3 = splitdata.Length > 3 ? splitdata[3] : "";

            string getdatas = thread_requestsuperorangetotal(packettype, serveridint.ToString(), datetime, value3);
            var ddd = getdatas.Split('|');
            for (int i = 0; i < ddd.Length; i++)
            {
                if (ddd[i].Length > 0)
                {
                    get_serverretdata.Add(serveridint * 1000000 + getconditioncount, serveridint + "#" + ddd[i]);
                    getconditioncount++;
                }
            }
        }

        private void bt_programmer_send_Click(object sender, EventArgs e)
        {
            string[] inputdata = tb_programmer_input.Text.Split(',');

            string packetnumber = inputdata[0];
            string userid = inputdata[1];
            string data = inputdata[2];

            string retvalue = requestsuperorangetotal(int.Parse(packetnumber), "1", userid, data);

            tb_programmer_output.Text = retvalue;
        }

        private void bt_servertime_load_Click(object sender, EventArgs e)
        {
            int startserver = 1;
            int endserver = 1;

            if (tb_servertime_start.Text.Length > 0)
                startserver = int.Parse(tb_servertime_start.Text);
            if (tb_servertime_end.Text.Length > 0)
                endserver = int.Parse(tb_servertime_end.Text);

            get_serverretdata.Clear();

            Thread[] T = new Thread[endserver - startserver + 1];
            int servercount = 0;
            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                T[servercount] = new Thread(new ParameterizedThreadStart(Thread_sendservertotal));
                string datas = servernumber + "," + 16;    //packettype
                T[servercount].Start(datas);
                servercount++;
            }
            servercount = 0;
            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                T[servercount].Join();
                servercount++;

                lb_servertime_server.Text = servernumber.ToString();
                lb_servertime_server.Update();
            }

            var listserverdatas = get_serverretdata.Keys.ToList();
            listserverdatas.Sort();
            listserverdatas.Reverse();

            lv_servertime_main.Clear();

            lv_servertime_main.View = View.Details;
            lv_servertime_main.BeginUpdate();

            var tempserver = lv_servertime_main.Columns.Add("server");
            var countcolumn = lv_servertime_main.Columns.Add("time");
            countcolumn.Width = 250;

            foreach (var hhh in listserverdatas)
            {
                if (get_serverretdata.ContainsKey(hhh) == true && get_serverretdata[hhh] != null)
                {
                    string[] data = get_serverretdata[hhh].Split('#');

                    ListViewItem lvitem = new ListViewItem(data[0]);
                    lvitem.SubItems.Add(data[1]);
                    lv_servertime_main.Items.Add(lvitem);
                }
            }
            lv_servertime_main.EndUpdate();
        }

        private void bt_analytics_load_Click(object sender, EventArgs e)
        {
            int startserver = 1;
            int endserver = 1;

            if (tb_analytics_start.Text.Length > 0)
                startserver = int.Parse(tb_analytics_start.Text);
            if (tb_analytics_end.Text.Length > 0)
                endserver = int.Parse(tb_analytics_end.Text);

            get_serverretdata.Clear();

            List<Thread> T = new List<Thread>();
            int servercount = 0;
            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                if (combineServerList.Contains(servernumber.ToString()) == false)
                    continue;

                Thread thread = new Thread(new ParameterizedThreadStart(Thread_sendservertotal));
                string datas = servernumber + "," + 17;    //packettype
                T.Add(thread);
                T[servercount].Start(datas);
                servercount++;
            }
            servercount = 0;

            for (int i = 0; i < T.Count; i++)
            {
                T[i].Join();

                lb_analytics_server.Text = i.ToString();
                lb_analytics_server.Update();
            }

            var listserverdatas = get_serverretdata.Keys.ToList();
            listserverdatas.Sort();
            listserverdatas.Reverse();

            lv_analytics.Clear();

            lv_analytics.View = View.Details;
            lv_analytics.BeginUpdate();

            var tempserver = lv_analytics.Columns.Add("index");
            var countcolumn = lv_analytics.Columns.Add("count");
            var rate = lv_analytics.Columns.Add("rate");
            var rategap = lv_analytics.Columns.Add("rate gap");

            server_analytics_dic.Clear();

            foreach (var hhh in listserverdatas)
            {
                if (get_serverretdata.ContainsKey(hhh) == true && get_serverretdata[hhh] != null)
                {
                    string[] data = get_serverretdata[hhh].Split('#');

                    string serverid = data[0];
                    string[] analyticsdata = data[1].Split(',');

                    Dictionary<string, string> dicdata = new Dictionary<string, string>();

                    for (int i = 0; i < analyticsdata.Length; i += 2)
                    {
                        string index = analyticsdata[i];
                        string count = "";
                        if (index.Length > 0)
                            count = analyticsdata[i + 1];

                        dicdata.Add(index, count);
                    }

                    server_analytics_dic.Add(serverid, dicdata);
                }
            }

            var ddd = server_analytics_dic[endserver.ToString()].Values;

            int firstindexcount = 0;
            int lastrate = 100;
            string line = "";
            for (int i = 2; i < ddd.Count - 2; i++)
            {
                int allcount = 0;
                for (int j = 1; j <= endserver; j++)
                {
                    if (server_analytics_dic.ContainsKey(j.ToString()) == true)
                    {

                        string dddd = "";
                        if (server_analytics_dic[j.ToString()].ContainsKey(i.ToString()) == true)
                            dddd = server_analytics_dic[j.ToString()][i.ToString()];

                        if (dddd.Length > 0)
                            allcount += int.Parse(dddd);
                    }
                }
                if (firstindexcount == 0) firstindexcount = allcount;

                ListViewItem lvitem = new ListViewItem(i.ToString());
                lvitem.SubItems.Add(allcount.ToString());
                int getrate = 100 * allcount / firstindexcount;
                lvitem.SubItems.Add(getrate.ToString());
                lvitem.SubItems.Add((lastrate - getrate).ToString());
                lv_analytics.Items.Add(lvitem);
                line += i + "," + allcount + "," + getrate + "," + (lastrate - getrate).ToString() + "#";
                line += i + "," + allcount + "," + getrate + "," + (lastrate - getrate).ToString() + "#";
                line += i + "," + allcount + "," + getrate + "," + (lastrate - getrate).ToString() + "#";
                lastrate = getrate;
            }
            lv_analytics.EndUpdate();
            oneLine.Text = line;
        }

        private Dictionary<string, Dictionary<string, string>> server_analytics_dic = new Dictionary<string, Dictionary<string, string>>();

        private void bt_eventinfo_date_L_Click(object sender, EventArgs e)
        {
            string curdate = tb_eventinfo_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(-1).ToString("yyyy-MM-dd");
            }

            tb_eventinfo_date.Text = curdate;
        }

        private void bt_eventinfo_date_R_Click(object sender, EventArgs e)
        {
            string curdate = tb_eventinfo_date.Text;

            DateTime date = DateTime.Now;
            if (curdate.Length <= 0)
            {
                curdate = date.ToString("yyyy-MM-dd");
            }
            else
            {
                curdate = DateTime.Parse(curdate).AddDays(1).ToString("yyyy-MM-dd");
            }

            tb_eventinfo_date.Text = curdate;
        }
        private static Dictionary<Int64, string> get_servereventrankingdata = new Dictionary<Int64, string>();
        private static Dictionary<string, string> eventinfo_userdata = new Dictionary<string, string>();
        private static int getconditioncount_eventinfo = 0;
        private static void Thread_sendservertotal_eventrank(Object datas)
        {
            string[] splitdata = ((string)datas).Split(',');
            int serveridint = int.Parse(splitdata[0]);
            string packettype = splitdata[1];
            string datetime = splitdata.Length > 2 ? splitdata[2] : "";

            string getdatas = thread_requestsuperorangetotal(packettype, serveridint.ToString(), datetime);
            var ddd = getdatas.Split('|');

            if (ddd[0].Length > 0)
            {
                if (get_servereventrankingdata.ContainsKey(Int64.Parse(ddd[0].Split('#')[1])))
                {
                    Int64 Score = Int64.Parse(ddd[0].Split('#')[1]);

                    while (get_servereventrankingdata.ContainsKey(Score))
                        Score++;
                    get_servereventrankingdata.Add(Score, serveridint + "#" + ddd[0].Split('#')[1]);
                }
                else
                {
                    get_servereventrankingdata.Add(Int64.Parse(ddd[0].Split('#')[1]), serveridint + "#" + ddd[0].Split('#')[1]);
                }

                eventinfo_userdata.Add(serveridint.ToString(), ddd[1]);
                getconditioncount_eventinfo++;
            }
        }

        private void bt_eventinfoLoad_Click(object sender, EventArgs e)
        {
            int startserver = 1;
            int endserver = 1;

            if (tb_eventinfo_start.Text.Length > 0)
            {
                string test = tb_eventinfo_start.Text.ToString();
                startserver = Convert.ToInt32(tb_eventinfo_start.Text.Replace(" ", ""));
            }

            if (tb_eventinfo_end.Text.Length > 0)
                endserver = Convert.ToInt32(tb_eventinfo_end.Text.Replace(" ", ""));

            string curdate = tb_eventinfo_date.Text;

            if (curdate.Length <= 0)
            {
                DateTime date = DateTime.Now;
                curdate = date.ToString("yyyy-MM-dd");
                tb_eventinfo_date.Text = curdate;
            }

            get_servereventrankingdata.Clear();
            eventinfo_userdata.Clear();
            lv_eventinfo_main.Clear();

            int count = 0;
            Thread[] T = new Thread[endserver - startserver + 1];
            int servercount = 0;
            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                T[servercount] = new Thread(new ParameterizedThreadStart(Thread_sendservertotal_eventrank));
                string datas = servernumber + "," + 18 + "," + curdate;    //packettype,날짜,가차탸입
                T[servercount].Start(datas);
                servercount++;
            }
            servercount = 0;
            for (int servernumber = startserver; servernumber <= endserver; servernumber++)
            {
                T[servercount].Join();
                servercount++;
            }

            var listserverdatas = get_servereventrankingdata.Keys.ToList();
            listserverdatas.Sort();
            listserverdatas.Reverse();
            int LineCount = 0;

            lv_eventinfo_main.Clear();

            lv_eventinfo_main.View = View.Details;
            lv_eventinfo_main.BeginUpdate();

            var tempserver = lv_eventinfo_main.Columns.Add("server");
            var countcolumn = lv_eventinfo_main.Columns.Add("Score");
            countcolumn.Width = 250;
            string oneLineData = "";
            foreach (var hhh in listserverdatas)
            {
                if (get_servereventrankingdata.ContainsKey(hhh) == true && get_servereventrankingdata[hhh] != null)
                {
                    if (get_servereventrankingdata[hhh] == "") continue;

                    string[] data = get_servereventrankingdata[hhh].Split('#');

                    ListViewItem lvitem = new ListViewItem(data[0]);
                    lvitem.SubItems.Add(data[1]);
                    lv_eventinfo_main.Items.Add(lvitem);
                    oneLineData += data[0] + "," + data[1] + "#";
                }
            }
            lv_eventinfo_main.EndUpdate();
            tb_list_string.Text = oneLineData;
        }

        private void lv_eventinfo_main_DoubleClick(object sender, EventArgs e)
        {
            ListView.SelectedListViewItemCollection items = lv_eventinfo_main.SelectedItems;
            ListViewItem lvitem = items[0];
            lv_eventinfo_user.Clear();

            lv_eventinfo_user.View = View.Details;
            //lv_gachainfo_user.BeginUpdate();

            var tempserveruser = lv_eventinfo_user.Columns.Add("count");
            var countcolumnuser = lv_eventinfo_user.Columns.Add("data");
            countcolumnuser.Width = 400;

            var liseventinfo_userdata_DictData = eventinfo_userdata[lvitem.Text];

            List<string> liseventinfo_userdata = liseventinfo_userdata_DictData.Split('*').ToList();
            int count = 1;
            foreach (var hhh in liseventinfo_userdata)
            {
                if (hhh == "") continue;

                ListViewItem lvitem2 = new ListViewItem(count.ToString());
                lvitem2.SubItems.Add(hhh);
                lv_eventinfo_user.Items.Add(lvitem2);
                count++;
            }

            lv_eventinfo_user.EndUpdate();

        }

        public static DialogResult InputBox(string title, string content, ref string value)
        {
            Form form = new Form();
            PictureBox picture = new PictureBox();
            Label label = new Label();
            TextBox textBox = new TextBox();
            Button buttonOk = new Button();
            Button buttonCancel = new Button();

            form.ClientSize = new Size(300, 100);
            form.Controls.AddRange(new Control[] { label, picture, textBox, buttonOk, buttonCancel });
            form.FormBorderStyle = FormBorderStyle.FixedDialog;
            form.StartPosition = FormStartPosition.CenterScreen;
            form.MaximizeBox = false;
            form.MinimizeBox = false;
            form.AcceptButton = buttonOk;
            form.CancelButton = buttonCancel;

            form.Text = title;
            //picture.Image = Properties.Resources.Clogo;
            picture.SizeMode = PictureBoxSizeMode.StretchImage;
            label.Text = content;
            textBox.Text = value;
            buttonOk.Text = "확인";
            buttonCancel.Text = "취소";

            buttonOk.DialogResult = DialogResult.OK;
            buttonCancel.DialogResult = DialogResult.Cancel;

            picture.SetBounds(10, 10, 50, 50);
            label.SetBounds(65, 17, 200, 20);
            textBox.SetBounds(65, 40, 220, 20);
            buttonOk.SetBounds(135, 70, 70, 20);
            buttonCancel.SetBounds(215, 70, 70, 20);

            DialogResult dialogResult = form.ShowDialog();

            value = textBox.Text;
            return dialogResult;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            bool isOK = false;
            string value = "";
            if (InputBox("경고!!!", "암호", ref value) == DialogResult.OK)
            {
                if (value.Equals(""))
                {
                    isOK = true;
                }
                else
                {
                    MessageBox.Show("Check your password!");
                }
            }

            if (!isOK) return;

            string param = "";
            if (InputBox("경고!!!", "명령어 함수 입력", ref param) == DialogResult.OK)
            {

            }
            string paramvalue = "";
            if (InputBox("경고!!!", "명령어 변수 입력", ref paramvalue) == DialogResult.OK)
            {

            }

            string server = "";
            if (InputBox("경고!!!", "명령어 변수 입력", ref server) == DialogResult.OK)
            {

            }

            Dictionary<string, string> tempDic = new Dictionary<string, string>();
            if (param == "AddCoinSend")
            {
                string[] datas = paramvalue.Split('*');

                foreach (string stringdata in datas)
                {
                    if (stringdata == "") continue;
                    tempDic.Add(stringdata.Split('|')[0], stringdata.Split('|')[1]);
                }

            }
            if (server != "")
            {
                string sendvalue = "";
                if (sendvalue == "")
                    sendvalue = paramvalue;
                string datas = server + "," + 19 + "," + param + "," + sendvalue;    //packettype,날짜,가차탸입
                Thread_sendservertotal_statOver(datas);
            }
            else
            {
                Thread[] T = new Thread[combineServerList.Count];
                int servercount = 0;
                for (int i = 0; i < combineServerList.Count; i++)
                {
                    string serverIndex = combineServerList[i];

                    if (string.IsNullOrEmpty(serverIndex))
                        continue;

                    string sendvalue = "";

                    if (param == "billingrewardsend")
                    {
                        string[] paramvalues = paramvalue.Split('$');

                        foreach (string temp in paramvalues)
                        {
                            if (string.IsNullOrEmpty(temp) || temp == "") continue;

                            string[] temps = temp.Split('*');

                            if (temps[0] != serverIndex)
                                continue;
                            sendvalue += temp + "$";
                        }
                    }
                    else if (param == "skilleventpointadd")
                    {
                        string[] paramvalues = paramvalue.Split('$');

                        foreach (string temp in paramvalues)
                        {
                            if (string.IsNullOrEmpty(temp) || temp == "") continue;

                            string[] temps = temp.Split('*');

                            if (temps[0] != serverIndex)
                                continue;
                            sendvalue += temp + "$";
                        }
                    }
                    else if (param == "AddCoinSend")
                    {
                        sendvalue = tempDic[serverIndex];
                    }
                    else if (sendvalue == "")
                        sendvalue = paramvalue;

                    T[servercount] = new Thread(new ParameterizedThreadStart(Thread_sendservertotal_statOver));
                    string datas = serverIndex + "," + 19 + "," + param + "," + sendvalue;    //packettype,날짜,가차탸입
                    T[servercount].Start(datas);
                    servercount++;
                }
            }

        }

        private static void Thread_sendservertotal_statOver(Object datas)
        {
            string[] splitdata = ((string)datas).Split(',');
            //int serveridint = int.Parse(splitdata[0]);
            int.TryParse(splitdata[0], out int serveridint);
            string packettype = splitdata[1];
            string param = splitdata[2];
            string paramvalue = splitdata[3];
            string getdatas = thread_requestsuperorangetotal(packettype, serveridint.ToString(), param, paramvalue);
            var ddd = getdatas.Split('#');

            if (param == "SetMarketingCost")
                MessageBox.Show(ddd[0]);

            string strPath = string.Format("C:\\{0}\\{1}.LOG", param, serveridint.ToString());

            string strDir = Path.GetDirectoryName(strPath);
            DirectoryInfo diDir = new DirectoryInfo(strDir);

            if (!diDir.Exists)
            {
                diDir.Create();
                diDir = new DirectoryInfo(strDir);
            }
            StreamWriter swStream = File.AppendText(strPath);
            for (int i = 0; i < ddd.Length; i++)
            {
                if (ddd[i].Length > 0)
                {
                    swStream.WriteLine(ddd[i]);
                }
            }
            swStream.Close();
        }

        private void bt_FAQ_Answer_admin5_Click(object sender, EventArgs e)
        {
            SelectFAQAnswerAdmin = bt_FAQ_Answer_admin5.Text;
        }

        private void bt_FAQ_Answer_admin6_Click(object sender, EventArgs e)
        {
            SelectFAQAnswerAdmin = bt_FAQ_Answer_admin6.Text;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            string value = "";
            if (InputBox("현물이벤트 회차", "회차입력", ref value) == DialogResult.Cancel)
                return;
            if (value == "")
                return;

            string getdatas = thread_requestsuperorangetotal("19", 38.ToString(), "get1YearRealEventTotalRankingData", value);
            var ddd = getdatas.Split('#');

            var csv = new StringBuilder();
            foreach (string temp in ddd)
            {
                csv.AppendLine(temp);
            }
            File.AppendAllText("C:\\EventData.csv", csv.ToString());
        }

        private void SendFAQ_Click(object sender, EventArgs e)
        {
            bool isOK = false;
            string value = "";
            if (InputBox("경고!!!", "암호 입력 OK?", ref value) == DialogResult.OK)
            {
                if (value.Equals(""))
                {
                    isOK = true;
                }
                else
                {
                    MessageBox.Show("Check your password!");
                }
            }

            if (!isOK) return;

            string server = "";
            if (InputBox("경고!!!", "서버 입력", ref server) == DialogResult.OK)
            {

            }
            string UserID = "";
            if (InputBox("경고!!!", "유저 아이디 입력", ref UserID) == DialogResult.OK)
            {

            }
            string type = "";
            if (InputBox("경고!!!", "타입 입력(1~6)", ref type) == DialogResult.OK)
            {

            }
            string title = "";
            if (InputBox("경고!!!", "제목", ref title) == DialogResult.OK)
            {

            }
            string Desc = "";
            if (InputBox("경고!!!", "내용", ref Desc) == DialogResult.OK)
            {

            }

            string datas = server + "," + 19 + "," + "SendFAQ_superorange" + "," + UserID + "$" + type + "$" + title + "$" + Desc + "$";    //packettype,날짜,가차탸입
            Thread_sendservertotal_statOver(datas);
        }

        private void listView1_MouseDown(object sender, MouseEventArgs e)
        {
            if (listView1.SelectedItems.Count == 1)
            {
                ListView.SelectedListViewItemCollection items = listView1.SelectedItems;
                ListViewItem lvItem = items[0];
                string add = "";
                string output = "";
                for (int i = 0; i < lvItem.SubItems.Count; ++i)
                {
                    if (lvItem.SubItems[i].Text == "&")
                    {
                        add += "&";
                    }
                    else
                    {
                        if (int.TryParse(lvItem.SubItems[i].Text, out int temp))
                        {
                            add += lvItem.SubItems[i].Text + ",";
                        }
                        else
                        {
                            string templateindex = lvItem.SubItems[i].Text.Split('-')[0];
                            if (templateindex.Length > 2)
                            {
                                add += lvItem.SubItems[i].Text + ",";
                            }
                            else
                                add += templateindex + ",";
                        }
                    }
                }
                if (InputBox_Event("수정", add, ref output) == DialogResult.OK)
                {
                    output = output.Replace("&", "@");
                    output = output.Replace(",", "$");
                    string datas = output.Split('@')[0] + "," + 20 + "," + output + "," + "";
                    Thread_sendservertotal_withMessage(datas);
                }
            }
        }

        public void CopyListBox(ListView list)
        {
            StringBuilder sb = new StringBuilder();
            foreach (var item in list.SelectedItems)
            {
                ListViewItem l = item as ListViewItem;
                if (l != null)
                    foreach (ListViewItem.ListViewSubItem sub in l.SubItems)
                        sb.Append(sub.Text + "\t");
                sb.AppendLine();
            }
            Clipboard.SetDataObject(sb.ToString().Trim());

        }


        private void lv_gachainfo_user_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.C)
            {
                CopyListBox((System.Windows.Forms.ListView)sender);
            }
        }

        private void lv_gachainfo_main_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.C)
            {
                CopyListBox((System.Windows.Forms.ListView)sender);
            }
        }

        private static void Thread_sendservertotal_withMessage(Object datas)
        {
            string[] splitdata = ((string)datas).Split(',');
            string[] server = splitdata[0].Split('$');
            int serveridint = int.Parse(server[0]);

            int serveridintEnd = 0;
            int.TryParse(server[1], out serveridintEnd);
            string packettype = splitdata[1];
            string param = splitdata[2];
            string paramvalue = splitdata[3];
            string getdatas = "Suc";
            if (serveridintEnd > 0)
            {
                for (int i = serveridint; i <= serveridintEnd; ++i)
                {
                    string temp = thread_requestsuperorangetotal(packettype, i.ToString(), param, paramvalue);
                    if (temp != "Suc")
                    {
                        getdatas = "[Error]" + i.ToString() + "|" + temp;
                        MessageBox.Show(getdatas);
                        break;
                    }
                }

            }
            else
            {
                string temp = thread_requestsuperorangetotal(packettype, serveridint.ToString(), param, paramvalue);
                if (temp != "Suc")
                {
                    getdatas = "[Error]" + serveridint.ToString() + "|" + temp;
                    MessageBox.Show(getdatas);
                }
            }
            if (getdatas == "Suc")
                MessageBox.Show(getdatas);
        }

        public static DialogResult InputBox_Event(string title, string content, ref string value)
        {
            Form form = new Form();

            TextBox textBox = new TextBox();
            TextBox[] maintextBoxes = new TextBox[14];
            TextBox[] subtextBoxes = new TextBox[36];
            Button buttonOk = new Button();
            Button buttonCancel = new Button();


            for (int i = 0; i < 14; ++i)
            {
                maintextBoxes[i] = new TextBox();
                subtextBoxes[i] = new TextBox();
            }
            for (int i = 14; i < 36; ++i)
            {
                subtextBoxes[i] = new TextBox();
            }
            Label label = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            Label label3 = new Label();
            Label label4 = new Label();
            Label label5 = new Label();
            Label label6 = new Label();
            Label label7 = new Label();

            Label mainlabel1 = new Label();
            Label mainlabel2 = new Label();
            Label mainlabel3 = new Label();
            Label mainlabel4 = new Label();
            Label sublabel = new Label();

            label.Text = "서버";
            label1.Text = "메인";
            label2.Text = "1";
            label3.Text = "2";
            label4.Text = "3";
            label5.Text = "4";
            label6.Text = "5";
            label7.Text = "6";

            mainlabel1.Text = "인덱스      유니크인덱스    템플릿인덱스    연속충전";
            mainlabel2.Text = "일일충전    개인보상        길드보상        상점";
            mainlabel3.Text = "기간한정    스페셜          통합이벤트      통합이벤트 보상";
            mainlabel4.Text = "이벤트시작                이벤트종료";
            sublabel.Text = "인덱스      유니크인덱스      템플릿인덱스    보상                 이벤트시작                 이벤트종료";
            form.ClientSize = new Size(1500, 500);

            form.Controls.AddRange(new Control[] { label, label1, label2, label3, label4, label5, label6, label7
                ,textBox,maintextBoxes[0],maintextBoxes[1],maintextBoxes[2],maintextBoxes[3],maintextBoxes[4],maintextBoxes[5],maintextBoxes[6],maintextBoxes[7],maintextBoxes[8]
                ,maintextBoxes[9],maintextBoxes[10],maintextBoxes[11],maintextBoxes[12],maintextBoxes[13]
                ,subtextBoxes[0],subtextBoxes[1],subtextBoxes[2],subtextBoxes[3],subtextBoxes[4],subtextBoxes[5],subtextBoxes[6],subtextBoxes[7],subtextBoxes[8],subtextBoxes[9]
                ,subtextBoxes[10],subtextBoxes[11],subtextBoxes[12],subtextBoxes[13],subtextBoxes[14],subtextBoxes[15],subtextBoxes[16],subtextBoxes[17],subtextBoxes[18],subtextBoxes[19]
                ,subtextBoxes[20],subtextBoxes[21],subtextBoxes[22],subtextBoxes[23],subtextBoxes[24],subtextBoxes[25],subtextBoxes[26],subtextBoxes[27],subtextBoxes[23],subtextBoxes[28]
                ,subtextBoxes[29],subtextBoxes[30],subtextBoxes[31],subtextBoxes[32],subtextBoxes[33],subtextBoxes[34],subtextBoxes[35]
                ,mainlabel1,mainlabel2,mainlabel3,mainlabel4,sublabel
                ,buttonOk
                ,buttonCancel });
            form.FormBorderStyle = FormBorderStyle.Sizable;
            form.StartPosition = FormStartPosition.CenterScreen;
            form.MaximizeBox = false;
            form.MinimizeBox = false;
            form.AcceptButton = buttonOk;
            form.CancelButton = buttonCancel;

            form.Text = title;
            //picture.Image = Properties.Resources.Clogo;
            textBox.Text = value;
            buttonOk.Text = "확인";
            buttonCancel.Text = "취소";

            buttonOk.DialogResult = DialogResult.OK;
            buttonCancel.DialogResult = DialogResult.Cancel;

            buttonOk.SetBounds(180, 450, 70, 20);
            buttonCancel.SetBounds(320, 450, 70, 20);


            label.SetBounds(20, 20, 50, 20);
            textBox.SetBounds(80, 20, 30, 20);

            label1.SetBounds(20, 50, 50, 20);
            mainlabel1.SetBounds(80, 50, 300, 20);
            mainlabel2.SetBounds(80, 150, 300, 20);
            mainlabel3.SetBounds(80, 250, 300, 20);
            mainlabel4.SetBounds(80, 350, 300, 20);
            sublabel.SetBounds(560, 50, 700, 20);
            label2.SetBounds(500, 100, 50, 20);
            label3.SetBounds(500, 150, 50, 20);
            label4.SetBounds(500, 200, 50, 20);
            label5.SetBounds(500, 250, 50, 20);
            label6.SetBounds(500, 300, 50, 20);
            label7.SetBounds(500, 350, 50, 20);

            string[] datas = content.Split('&');
            for (int count = 0; count < datas.Length; ++count)
            {
                if (datas[count] == "") continue;
                if (count == 0)
                {
                    textBox.Text = datas[count];
                    //textBox.Enabled = false;
                }
                else if (count == 1)
                {
                    string[] maindata = datas[count].Split(',');

                    for (int i = 0; i < maindata.Length - 1; i++)
                    {
                        if (maintextBoxes.Length <= i) continue;
                        maintextBoxes[i].Text = maindata[i];
                        if (i < 12)
                            maintextBoxes[i].SetBounds(80 + (70 * (i % 4)), 70 + (100 * (int)(i / 4)), 50, 20);
                        else
                            maintextBoxes[i].SetBounds(80 + (120 * (i % 4)), 70 + (100 * (int)(i / 4)), 100, 20);

                        if (i != 4)
                            maintextBoxes[i].Enabled = false;
                    }

                }
                else
                {
                    string[] subdata = datas[count].Split(',');

                    for (int i = 0; i < subdata.Length - 1; i++)
                    {
                        if (subtextBoxes.Length <= (count - 2) * 6 + i) continue;
                        subtextBoxes[(count - 2) * 6 + i].Text = subdata[i];
                        if (i < 4)
                            subtextBoxes[(count - 2) * 6 + i].SetBounds(560 + (80 * (int)(i % 6)), 100 + (50 * (count - 2)), 50, 20);
                        else
                            subtextBoxes[(count - 2) * 6 + i].SetBounds(560 + (80 * (int)(i % 6)) + (50 * (i - 4)), 100 + (50 * (count - 2)), 100, 20);
                    }
                }
            }

            DialogResult dialogResult = form.ShowDialog();

            string main = maintextBoxes[0].Text + "$" + maintextBoxes[1].Text + "," + maintextBoxes[2].Text + "$" + maintextBoxes[3].Text + "$" + maintextBoxes[4].Text + "$" + maintextBoxes[5].Text + "$" + maintextBoxes[6].Text + "$" + maintextBoxes[7].Text + "$" + maintextBoxes[8].Text + "$" + maintextBoxes[9].Text + "$" + maintextBoxes[10].Text + "$" + maintextBoxes[11].Text + "$" + maintextBoxes[12].Text + "$" + maintextBoxes[13].Text;

            string sub1 = subtextBoxes[0].Text + "$" + subtextBoxes[1].Text + "," + subtextBoxes[2].Text + "$" + subtextBoxes[3].Text + "$" + subtextBoxes[4].Text + "$" + subtextBoxes[5].Text;
            string sub2 = subtextBoxes[6].Text + "$" + subtextBoxes[7].Text + "," + subtextBoxes[8].Text + "$" + subtextBoxes[9].Text + "$" + subtextBoxes[10].Text + "$" + subtextBoxes[11].Text;
            string sub3 = subtextBoxes[12].Text + "$" + subtextBoxes[13].Text + "," + subtextBoxes[14].Text + "$" + subtextBoxes[15].Text + "$" + subtextBoxes[16].Text + "$" + subtextBoxes[17].Text;
            string sub4 = subtextBoxes[18].Text + "$" + subtextBoxes[19].Text + "," + subtextBoxes[20].Text + "$" + subtextBoxes[21].Text + "$" + subtextBoxes[22].Text + "$" + subtextBoxes[23].Text;
            string sub5 = subtextBoxes[24].Text + "$" + subtextBoxes[25].Text + "," + subtextBoxes[26].Text + "$" + subtextBoxes[27].Text + "$" + subtextBoxes[28].Text + "$" + subtextBoxes[29].Text;
            string sub6 = subtextBoxes[30].Text + "$" + subtextBoxes[31].Text + "," + subtextBoxes[32].Text + "$" + subtextBoxes[33].Text + "$" + subtextBoxes[34].Text + "$" + subtextBoxes[35].Text;

            if (int.TryParse(textBox.Text.Split(',')[1], out int temp))
                value = textBox.Text + "@" + main;
            else
                value = textBox.Text + "@" + main + "@" + sub1 + "@" + sub2 + "@" + sub3 + "@" + sub4 + "@" + sub5 + "@" + sub6;
            return dialogResult;
        }

        private static Dictionary<int, string> get_servertutorialData = new Dictionary<int, string>();
        private static Dictionary<int, string> get_servertutorialConnectedData = new Dictionary<int, string>();
        private static Dictionary<int, string> get_servertutorialoutData = new Dictionary<int, string>();
        private static Dictionary<int, string> get_servertutorialoutData3 = new Dictionary<int, string>();
        private static void Thread_sendservertotal_tutorialLoad(Object datas)
        {
            string[] splitdata = ((string)datas).Split(',');
            int serveridint = int.Parse(splitdata[0]);
            string packettype = splitdata[1];
            string datetime = splitdata.Length > 2 ? splitdata[2] : "";
            string value3 = splitdata.Length > 3 ? splitdata[3] : "";

            string getdatas = thread_requestsuperorangetotal(packettype, serveridint.ToString(), datetime, value3);
            var ddd = getdatas.Split('*');

            if (ddd.Length >= 4)
            {
                get_servertutorialData.Add(serveridint, ddd[0]);
                get_servertutorialConnectedData.Add(serveridint, ddd[1]);
                get_servertutorialoutData.Add(serveridint, ddd[2]);
                get_servertutorialoutData3.Add(serveridint, ddd[3]);
            }



        }
        private void bt_csv_load_Click(object sender, EventArgs e)
        {

            get_servertutorialData.Clear();
            get_servertutorialConnectedData.Clear();
            get_servertutorialoutData.Clear();
            get_servertutorialoutData3.Clear();

            string startDate = tb_csv_date_start.Text;
            string endDate = tb_csv_date_end.Text;

            string _startserver = tb_csv_server_end.Text;
            string _endserver = tb_csv_server_end.Text;

            if (string.IsNullOrEmpty(startDate) || startDate == "") startDate = DateTime.Now.ToString("yyyy-MM-dd");
            if (string.IsNullOrEmpty(endDate) || endDate == "") endDate = DateTime.Now.ToString("yyyy-MM-dd");
            if (string.IsNullOrEmpty(_startserver) || _startserver == "") _startserver = "1";
            if (string.IsNullOrEmpty(_endserver) || _endserver == "") _endserver = requestsuperorangetotal(10, "1", "0", "", "");
            int start = int.Parse(_startserver);
            int end = int.Parse(_endserver);
            Thread[] T = new Thread[end - start + 1];
            int servercount = 0;
            for (int servernumber = start; servernumber <= end; servernumber++)
            {
                T[servercount] = new Thread(new ParameterizedThreadStart(Thread_sendservertotal_tutorialLoad));
                string datas = servernumber + "," + 21 + "," + startDate + "," + endDate;    //packettype
                T[servercount].Start(datas);
                servercount++;
            }
            servercount = 0;
            for (int servernumber = start; servernumber <= end; servernumber++)
            {
                T[servercount].Join();
                servercount++;

            }
            Dictionary<string, int> MissionDict = new Dictionary<string, int>();
            Dictionary<string, int> ConnectedDict = new Dictionary<string, int>();
            Dictionary<string, int> outDict = new Dictionary<string, int>();
            Dictionary<string, int> outDict3 = new Dictionary<string, int>();
            foreach (KeyValuePair<int, string> temp in get_servertutorialData)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (MissionDict.ContainsKey(key))
                        MissionDict[key] += value;
                    else
                        MissionDict.Add(key, value);
                }
            }

            foreach (KeyValuePair<int, string> temp in get_servertutorialConnectedData)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (ConnectedDict.ContainsKey(key))
                        ConnectedDict[key] += value;
                    else
                        ConnectedDict.Add(key, value);
                }
            }
            foreach (KeyValuePair<int, string> temp in get_servertutorialoutData)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (outDict.ContainsKey(key))
                        outDict[key] += value;
                    else
                        outDict.Add(key, value);
                }
            }

            foreach (KeyValuePair<int, string> temp in get_servertutorialoutData3)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (outDict3.ContainsKey(key))
                        outDict3[key] += value;
                    else
                        outDict3.Add(key, value);
                }
            }

            int allPlayingUser = 0;
            foreach (KeyValuePair<string, int> temp in ConnectedDict)
            {
                allPlayingUser += temp.Value;
            }


            var csv = new StringBuilder();
            int Base = 0;
            int before = 0;
            int NonPlayBase = 0;
            int NonPlaybefore = 0;
            string cell = "index,title,clear,percent,diff,금일접속,접속X 3일 미만,접속X 3일 이상,플레이유저제외clear,플레이유저제외percent,플레이유저제외diff,플레이중인유저," + allPlayingUser;
            //allPlayingUser = 0;
            int continueCount = 0;
            csv.AppendLine(cell);
            foreach (KeyValuePair<string, int> temp in MissionDict)
            {
                string makedata = temp.Key;

                string title = newMissionTemplate[int.Parse(temp.Key), (int)newMissionTemplate_.title];
                makedata += "," + title;

                makedata += "," + temp.Value;
                if (Base == 0)
                {
                    Base = temp.Value;
                    before = temp.Value;
                }
                continueCount = 0;

                makedata += "," + (((double)temp.Value / (double)Base) * 100).ToString("N3") + "%";
                makedata += "," + (temp.Value - before);
                before = temp.Value;


                if (ConnectedDict.ContainsKey(temp.Key))
                    makedata += "," + ConnectedDict[temp.Key];
                else
                {
                    continueCount++;
                    makedata += "," + 0;
                }

                if (outDict.ContainsKey(temp.Key))
                    makedata += "," + outDict[temp.Key];
                else
                {
                    continueCount++;
                    makedata += "," + 0;
                }

                if (outDict3.ContainsKey(temp.Key))
                    makedata += "," + outDict3[temp.Key];
                else
                {
                    if (continueCount >= 2) continue;
                    makedata += "," + 0;
                }

                int nonplayer = (temp.Value - allPlayingUser);
                makedata += "," + nonplayer;
                if (NonPlayBase == 0)
                {
                    NonPlayBase = nonplayer;
                    NonPlaybefore = nonplayer;
                }
                makedata += "," + (((double)nonplayer / (double)NonPlayBase) * 100).ToString("N3") + "%";
                makedata += "," + (nonplayer - NonPlaybefore);
                NonPlaybefore = nonplayer;

                if (ConnectedDict.ContainsKey(temp.Key))
                {
                    allPlayingUser -= ConnectedDict[temp.Key];
                }

                csv.AppendLine(makedata);
            }
            string filepath = string.Format("D:\\{0}.csv", DateTime.Now.Ticks);

            File.AppendAllText(filepath, csv.ToString(), Encoding.UTF8);
        }

        private void label85_Click(object sender, EventArgs e)
        {

        }

        private void label86_Click(object sender, EventArgs e)
        {

        }

        private void tb_datasearch_search_KeyUp(object sender, EventArgs e)
        {

        }

        private void tb_int_TextChanged(object sender, EventArgs e)
        {

        }

        private void tb_datasearch_TextChanged(object sender, EventArgs e)
        {

        }

        private void lb_server_Click(object sender, EventArgs e)
        {

        }

        private void tb_server_Click(object sender, EventArgs e)
        {

        }

        private void label87_Click(object sender, EventArgs e)
        {

        }

        private void label88_Click(object sender, EventArgs e)
        {

        }

        private void tb_server_after_TextChanged(object sender, EventArgs e)
        {

        }

        private void tb_server_before_TextChanged(object sender, EventArgs e)
        {

        }

        int loadIndex = -1;

        private void PackageDataLoad_Click(object sender, EventArgs e)
        {
            loadIndex = 0;

            LoadData();
        }

        private void LoadDateText_TextChanged(object sender, EventArgs e)
        {

        }

        private void lb_LoadDateText_Click(object sender, EventArgs e)
        {

        }

        private void Bt_LoadDataPrev_Click(object sender, EventArgs e)
        {
            if (loadIndex == -1)
                return;

            string dateValue = tb_LoadDateText.Text;

            if (string.IsNullOrEmpty(dateValue))
                return;

            DateTime date = DateTime.Parse(dateValue);
            date = date.AddDays(-1);
            dateValue = date.ToString("yyyy-MM-dd");
            tb_LoadDateText.Text = dateValue;

            LoadData();
        }

        private void bt_LoadDataNext_Click(object sender, EventArgs e)
        {
            if (loadIndex == -1)
                return;

            string dateValue = tb_LoadDateText.Text;

            if (string.IsNullOrEmpty(dateValue))
                return;

            DateTime date = DateTime.Parse(dateValue);
            date = date.AddDays(1);
            dateValue = date.ToString("yyyy-MM-dd");
            tb_LoadDateText.Text = dateValue;

            LoadData();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            bool isOK = false;
            string value = "";
            if (InputBox("경고!!!", "암호", ref value) == DialogResult.OK)
            {
                if (value.Equals(""))
                {
                    isOK = true;
                }
                else
                {
                    MessageBox.Show("Check your password!");
                }
            }
            if (!isOK) return;
            string param = "";
            if (InputBox("경고!!!", "빌링 초기화", ref param) == DialogResult.OK)
            {
            }

            int lastCombiServerID = 100;
            int exactServerCount = 0;
            string _LastServerID = requestsuperorangetotal(10, "1", "0", "", "");
            if (string.IsNullOrEmpty(_LastServerID) || _LastServerID == "") _LastServerID = "115";
            int LastServerID = int.Parse(_LastServerID);
            exactServerCount = LastServerID - lastCombiServerID + (lastCombiServerID / 5);
            Thread[] T = new Thread[exactServerCount];
            int servercount = 0;
            for (int servernumber = 1; servernumber <= LastServerID; servernumber++)
            {
                if (servernumber <= lastCombiServerID)
                {
                    if (servernumber % 5 != 0)
                        continue;
                }

                T[servercount] = new Thread(new ParameterizedThreadStart(Thread_sendservertotal_statOver));
                string datas = servernumber + "," + 24 + "," + param + "," + "";    //packettype,날짜,가차탸입
                T[servercount].Start(datas);
                servercount++;
            }
        }

        private void chart_server_dau_Click(object sender, EventArgs e)
        {

        }

        private void lb_Statistics_Click(object sender, EventArgs e)
        {

        }

        private void DauListView_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void panel_server_text_Paint(object sender, PaintEventArgs e)
        {

        }

        private void label18_Click(object sender, EventArgs e)
        {

        }

        private void label90_Click(object sender, EventArgs e)
        {

        }

        private void label89_Click(object sender, EventArgs e)
        {

        }

        private void lb_NRU_Click(object sender, EventArgs e)
        {

        }

        private void listView_NRU_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void lb_PU_Click(object sender, EventArgs e)
        {

        }

        private void listView_PU_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void lb_BILLING_Click(object sender, EventArgs e)
        {

        }

        private void listView_BILLING_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void lv_server_billuserlist_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void lv_server_billuserlist_DoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex < 0)
                return;
            DataGridView dgv = sender as DataGridView;
            string lvItem = dgv.Rows[e.RowIndex].Cells[0].Value.ToString();
            string billPrice = dgv.Rows[e.RowIndex].Cells[1].Value.ToString();
            string billTotalPrice = dgv.Rows[e.RowIndex].Cells[2].Value.ToString();

            Form2 form2 = new Form2();
            form2.Name = "유저 전체 구매 정보";

            string serverNum = tb_server_number.Text;

            if (string.IsNullOrEmpty(serverNum))
                return;

            string billingData = requestsuperorangetotal(25, serverNum, lvItem, "0");

            form2.SetBillingList(billingData);

            form2.Show();
        }

        private void label35_Click(object sender, EventArgs e)
        {

        }

        private void label20_Click(object sender, EventArgs e)
        {

        }

        private void label36_Click(object sender, EventArgs e)
        {

        }

        private void label20_Click_1(object sender, EventArgs e)
        {

        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {

        }

        private void label89_Click_1(object sender, EventArgs e)
        {

        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {

        }

        private void label36_Click_1(object sender, EventArgs e)
        {

        }

        private void textBox6_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {

        }

        private void listView3_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void listView2_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void textBox3_TextChanged_1(object sender, EventArgs e)
        {

        }

        private void bt_TotalBilling_Load_Click(object sender, EventArgs e)
        {
            string now = DateTime.Now.ToString("yyyy-MM-dd");

            string startDate = string.IsNullOrEmpty(tb_TotalBilling_StartDate.Text) ? now : tb_TotalBilling_StartDate.Text;
            string endDate = string.IsNullOrEmpty(tb_TotalBilling_EndDate.Text) ? now : tb_TotalBilling_EndDate.Text;

            tb_TotalBilling_StartDate.Text = startDate;
            tb_TotalBilling_EndDate.Text = endDate;

            string startServer = string.IsNullOrEmpty(tb_TotalBilling_StartServer.Text) ? "1" : tb_TotalBilling_StartServer.Text;
            string endServer = string.IsNullOrEmpty(tb_TotalBilling_EndServer.Text) ? _iLastServerIndex.ToString() : tb_TotalBilling_EndServer.Text;

            tb_TotalBilling_StartServer.Text = startServer;
            tb_TotalBilling_EndServer.Text = endServer;

            int sortIndex = listBox_TotalBilling_Sort.SelectedIndex;

            if (sortIndex < 0)
                sortIndex = 0;

            string sendDateData = string.Format("{0}@{1}", startDate, endDate);

            int.TryParse(startServer, out int _startServer);
            int.TryParse(endServer, out int _endServer);

            List<string> serverList = new List<string>();

            

            for (int serverIndex = _startServer; serverIndex <= _endServer; serverIndex++)
            {
                if (NonServerCombineCheck.Checked)
                {
                    if (!serverList.Contains(serverIndex.ToString()))
                        serverList.Add(serverIndex.ToString());
                }
                else
                {
                    if (combineServerList.Contains(serverIndex.ToString()))
                        serverList.Add(serverIndex.ToString());
                }

            }

            string sendServerData = string.Join("@", serverList);

            string retData = requestsuperorangetotal(24, "1", sendDateData, sendServerData, sortIndex.ToString());
            
            if (sortIndex == 2) // 맞춤
            {
                listView_TotalBilling_TotalInfo.Columns.Clear();
                listView_TotalBilling_TotalInfo.Rows.Clear();

                listView_TotalBilling_Info.Columns.Clear();
                listView_TotalBilling_Info.Rows.Clear();

                listView_TotalBilling_Info.Columns.Add("0", "서버");
                listView_TotalBilling_Info.Columns.Add("0", "패키지 인덱스");
                listView_TotalBilling_Info.Columns.Add("0", "상품 정보");
                listView_TotalBilling_Info.Columns.Add("0", "판매량");

                if (string.IsNullOrEmpty(retData) == false)
                {
                    string[] retDatas = retData.Split('&');

                    for (int i = 0; i < retDatas.Length; i++)
                    {
                        string[] goodsDatas = retDatas[i].Split('#');

                        if (goodsDatas.Length < 3)
                            continue;
                        if (goodsDatas[2].Contains("\\n"))
                            goodsDatas[2] = goodsDatas[2].Split('n')[0].Split('\\')[0] + goodsDatas[2].Split('n')[1];
                        listView_TotalBilling_Info.Rows.Add(goodsDatas[0], goodsDatas[1], goodsDatas[2] + " : " + int.Parse(goodsDatas[3]).ToString("N0") + "개", goodsDatas[4]);
                    }
                }
            }
            else // 패키지
            {
                Dictionary<string, int> itemBuyPrice = new Dictionary<string, int>();
                Dictionary<string, int> itemBuyCount = new Dictionary<string, int>();
                Dictionary<string, int> itemPrice = new Dictionary<string, int>();
                List<string> itemList = new List<string>();

                int totalUserCount = 0;
                int totalBuyItemCount = 0;
                int totalBuyItemPrice = 0;
                int totalMoneyByGoogle = 0;
                int totalMoneyByOneStore = 0;

                if (string.IsNullOrEmpty(retData) == false)
                {
                    string[] retDatas = retData.Split('&');

                    totalUserCount += int.Parse(retDatas[0], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalBuyItemCount += int.Parse(retDatas[1], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalBuyItemPrice += int.Parse(retDatas[2], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalMoneyByGoogle += int.Parse(retDatas[3], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalMoneyByOneStore += int.Parse(retDatas[4], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));

                    string[] itemDatas = retDatas[5].Split('*');

                    for (int i = 0; i < itemDatas.Length; i++)
                    {
                        string[] itemData = itemDatas[i].Split('#');

                        if (itemData.Length <= 1)
                            continue;

                        string name = itemData[0];
                        int buyCount = int.Parse(itemData[1], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                        int buyPrice = int.Parse(itemData[3], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                        int price = int.Parse(itemData[2], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));

                        if (itemList.Contains(name) == false)
                            itemList.Add(name);

                        if (itemBuyCount.ContainsKey(name))
                            itemBuyCount[name] += buyCount;
                        else
                            itemBuyCount.Add(name, buyCount);

                        if (itemBuyPrice.ContainsKey(name))
                            itemBuyPrice[name] += buyPrice;
                        else
                            itemBuyPrice.Add(name, buyPrice);

                        if (itemPrice.ContainsKey(name) == false)
                            itemPrice.Add(name, price);
                    }
                }

                listView_TotalBilling_TotalInfo.Columns.Clear();
                listView_TotalBilling_TotalInfo.Rows.Clear();
                listView_TotalBilling_TotalInfo.Refresh();

                var totalUserCountItem = listView_TotalBilling_TotalInfo.Columns.Add("0", "전체 구매 유저수");

                var totalBuyItemCountItem = listView_TotalBilling_TotalInfo.Columns.Add("1", "전체 구매 횟수");

                var totalBuyItemPriceItem = listView_TotalBilling_TotalInfo.Columns.Add("2", "전체 구매 금액");

                var totalGooglePriceItem = listView_TotalBilling_TotalInfo.Columns.Add("3", "구글 금액");

                var totalOneStorePriceItem = listView_TotalBilling_TotalInfo.Columns.Add("4", "원스토어 금액");

                var rows = listView_TotalBilling_TotalInfo.Rows.Add(totalUserCount.ToString("N0"), totalBuyItemCount.ToString("N0"),
                    totalBuyItemPrice.ToString("N0"), totalMoneyByGoogle.ToString("N0"), totalMoneyByOneStore.ToString("N0"));

                listView_TotalBilling_Info.Columns.Clear();
                listView_TotalBilling_Info.Rows.Clear();
                listView_TotalBilling_Info.Refresh();

                var packageName = listView_TotalBilling_Info.Columns.Add("0", "패키지 이름");
                var packageCount = listView_TotalBilling_Info.Columns.Add("1", "판매갯수");
                var packagePrice = listView_TotalBilling_Info.Columns.Add("2", "가격");
                var packageTotalPrice = listView_TotalBilling_Info.Columns.Add("3", "총매출");

                foreach (var nameKey in itemList)
                {
                    if (itemBuyCount.ContainsKey(nameKey) == false || itemBuyPrice.ContainsKey(nameKey) == false || itemPrice.ContainsKey(nameKey) == false)
                        continue;

                    listView_TotalBilling_Info.Rows.Add(nameKey, itemBuyCount[nameKey].ToString("N0"), itemPrice[nameKey].ToString("N0"), itemBuyPrice[nameKey].ToString("N0"));
                }
            }
        }

        private void listBox_TotalBilling_Sort_SelectedIndexChanged(object sender, EventArgs e)
        {
            string now = DateTime.Now.ToString("yyyy-MM-dd");

            string startDate = string.IsNullOrEmpty(tb_TotalBilling_StartDate.Text) ? now : tb_TotalBilling_StartDate.Text;
            string endDate = string.IsNullOrEmpty(tb_TotalBilling_EndDate.Text) ? now : tb_TotalBilling_EndDate.Text;

            tb_TotalBilling_StartDate.Text = startDate;
            tb_TotalBilling_EndDate.Text = endDate;

            string startServer = string.IsNullOrEmpty(tb_TotalBilling_StartServer.Text) ? "1" : tb_TotalBilling_StartServer.Text;
            string endServer = string.IsNullOrEmpty(tb_TotalBilling_EndServer.Text) ? _iLastServerIndex.ToString() : tb_TotalBilling_EndServer.Text;

            tb_TotalBilling_StartServer.Text = startServer;
            tb_TotalBilling_EndServer.Text = endServer;

            int sortIndex = listBox_TotalBilling_Sort.SelectedIndex;

            if (sortIndex < 0)
                sortIndex = 0;

            string sendDateData = string.Format("{0}@{1}", startDate, endDate);
            int.TryParse(startServer, out int _startServer);
            int.TryParse(endServer, out int _endServer);

            List<string> serverList = new List<string>();

            for (int serverIndex = _startServer; serverIndex <= _endServer; serverIndex++)
            {
                if (combineServerList.Contains(serverIndex.ToString()))
                    serverList.Add(serverIndex.ToString());
            }

            string sendServerData = string.Join("@", serverList);

            string retData = requestsuperorangetotal(24, "1", sendDateData, sendServerData, sortIndex.ToString());

            if (sortIndex == 2) 
            {
                listView_TotalBilling_TotalInfo.Columns.Clear();
                listView_TotalBilling_TotalInfo.Rows.Clear();

                listView_TotalBilling_Info.Columns.Clear();
                listView_TotalBilling_Info.Rows.Clear();

                listView_TotalBilling_Info.Columns.Add("0", "서버");
                listView_TotalBilling_Info.Columns.Add("0", "패키지 인덱스");
                listView_TotalBilling_Info.Columns.Add("0", "상품 정보");
                listView_TotalBilling_Info.Columns.Add("0", "판매량");

                if (string.IsNullOrEmpty(retData) == false)
                {
                    string[] retDatas = retData.Split('&');

                    for (int i = 0; i < retDatas.Length; i++)
                    {
                        string[] goodsDatas = retDatas[i].Split('#');

                        if (goodsDatas.Length < 3)
                            continue;
                        if (goodsDatas[2].Contains("\\n"))
                            goodsDatas[2] = goodsDatas[2].Split('n')[0].Split('\\')[0] + goodsDatas[2].Split('n')[1];
                        listView_TotalBilling_Info.Rows.Add(goodsDatas[0], goodsDatas[1], goodsDatas[2] + " : " + int.Parse(goodsDatas[3]).ToString("N0") + "개", goodsDatas[4]);
                    }
                }
            }
            else // 패키지
            {
                Dictionary<string, int> itemBuyPrice = new Dictionary<string, int>();
                Dictionary<string, int> itemBuyCount = new Dictionary<string, int>();
                Dictionary<string, int> itemPrice = new Dictionary<string, int>();
                List<string> itemList = new List<string>();

                int totalUserCount = 0;
                int totalBuyItemCount = 0;
                int totalBuyItemPrice = 0;
                int totalMoneyByGoogle = 0;
                int totalMoneyByOneStore = 0;

                if (string.IsNullOrEmpty(retData) == false)
                {
                    string[] retDatas = retData.Split('&');

                    totalUserCount += int.Parse(retDatas[0], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalBuyItemCount += int.Parse(retDatas[1], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalBuyItemPrice += int.Parse(retDatas[2], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalMoneyByGoogle += int.Parse(retDatas[3], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                    totalMoneyByOneStore += int.Parse(retDatas[4], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));

                    string[] itemDatas = retDatas[5].Split('*');

                    for (int i = 0; i < itemDatas.Length; i++)
                    {
                        string[] itemData = itemDatas[i].Split('#');

                        if (itemData.Length <= 1)
                            continue;

                        string name = itemData[0];
                        int buyCount = int.Parse(itemData[1], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                        int buyPrice = int.Parse(itemData[3], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));
                        int price = int.Parse(itemData[2], System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"));

                        if (itemList.Contains(name) == false)
                            itemList.Add(name);

                        if (itemBuyCount.ContainsKey(name))
                            itemBuyCount[name] += buyCount;
                        else
                            itemBuyCount.Add(name, buyCount);

                        if (itemBuyPrice.ContainsKey(name))
                            itemBuyPrice[name] += buyPrice;
                        else
                            itemBuyPrice.Add(name, buyPrice);

                        if (itemPrice.ContainsKey(name) == false)
                            itemPrice.Add(name, price);
                    }
                }

                listView_TotalBilling_TotalInfo.Columns.Clear();
                listView_TotalBilling_TotalInfo.Rows.Clear();
                listView_TotalBilling_TotalInfo.Refresh();

                var totalUserCountItem = listView_TotalBilling_TotalInfo.Columns.Add("0", "전체 구매 유저수");

                var totalBuyItemCountItem = listView_TotalBilling_TotalInfo.Columns.Add("1", "전체 구매 횟수");

                var totalBuyItemPriceItem = listView_TotalBilling_TotalInfo.Columns.Add("2", "전체 구매 금액");

                var totalGooglePriceItem = listView_TotalBilling_TotalInfo.Columns.Add("3", "구글 금액");

                var totalOneStorePriceItem = listView_TotalBilling_TotalInfo.Columns.Add("4", "원스토어 금액");

                var rows = listView_TotalBilling_TotalInfo.Rows.Add(totalUserCount.ToString("N0"), totalBuyItemCount.ToString("N0"),
                    totalBuyItemPrice.ToString("N0"), totalMoneyByGoogle.ToString("N0"), totalMoneyByOneStore.ToString("N0"));

                listView_TotalBilling_Info.Columns.Clear();
                listView_TotalBilling_Info.Rows.Clear();
                listView_TotalBilling_Info.Refresh();

                var packageName = listView_TotalBilling_Info.Columns.Add("0", "패키지 이름");
                var packageCount = listView_TotalBilling_Info.Columns.Add("1", "판매갯수");
                var packagePrice = listView_TotalBilling_Info.Columns.Add("2", "가격");
                var packageTotalPrice = listView_TotalBilling_Info.Columns.Add("3", "총매출");

                foreach (var nameKey in itemList)
                {
                    if (itemBuyCount.ContainsKey(nameKey) == false || itemBuyPrice.ContainsKey(nameKey) == false || itemPrice.ContainsKey(nameKey) == false)
                        continue;

                    listView_TotalBilling_Info.Rows.Add(nameKey, itemBuyCount[nameKey].ToString("N0"), itemPrice[nameKey].ToString("N0"), itemBuyPrice[nameKey].ToString("N0"));
                }
            }
        }

        private void listView2_SelectedIndexChanged_1(object sender, EventArgs e)
        {

        }

        private void listView_TotalBilling_Info_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
        }

        public Form2 packageBuyUserForm = null;

        private void dataGridView_DoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left) // 좌클릭
            {
                if (e.RowIndex < 0)
                    return;

                string packageName = listView_TotalBilling_Info.Rows[e.RowIndex].Cells[0].Value.ToString();

                string now = DateTime.Now.ToString("yyyy-MM-dd");

                string startDate = string.IsNullOrEmpty(tb_TotalBilling_StartDate.Text) ? now : tb_TotalBilling_StartDate.Text;
                string endDate = string.IsNullOrEmpty(tb_TotalBilling_EndDate.Text) ? now : tb_TotalBilling_EndDate.Text;

                tb_TotalBilling_StartDate.Text = startDate;
                tb_TotalBilling_EndDate.Text = endDate;

                string startServer = string.IsNullOrEmpty(tb_TotalBilling_StartServer.Text) ? "1" : tb_TotalBilling_StartServer.Text;
                string endServer = string.IsNullOrEmpty(tb_TotalBilling_EndServer.Text) ? requestsuperorangetotal(10, "1", "0", "", "") : tb_TotalBilling_EndServer.Text;

                tb_TotalBilling_StartServer.Text = startServer;
                tb_TotalBilling_EndServer.Text = endServer;

                int.TryParse(startServer, out int _startServer);
                int.TryParse(endServer, out int _endServer);

                List<string> sendServerList = new List<string>();

                for (int serverIndex = _startServer; serverIndex <= _endServer; serverIndex++)
                {
                    if (combineServerList.Contains(serverIndex.ToString()))
                        sendServerList.Add(serverIndex.ToString());
                }

                string sendDateData = startDate + "@" + endDate;
                string sendServerData = string.Join("@", sendServerList);

                string retData = requestsuperorangetotal(28, "1", sendDateData, sendServerData, packageName);

                if (this.packageBuyUserForm != null)
                {
                    this.packageBuyUserForm.Close();
                    this.packageBuyUserForm = null;
                }

                this.packageBuyUserForm = new Form2();

                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("0", "서버");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("1", "닉네임");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("2", "VIP등급");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("3", "패키지 이름");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("4", "구매갯수");


                string[] retDatas = retData.Split('*');

                for (int i = 0; i < retDatas.Length; i++)
                {
                    string[] datas = retDatas[i].Split('#');

                    if (datas.Length < 5)
                        continue;


                    string serverIndex = datas[0];
                    string nickName = datas[1];
                    string vipGrade = datas[2];
                    string packagename = datas[3];
                    string count = datas[4];

                    this.packageBuyUserForm.dataGridView_UserBillingList.Rows.Add(serverIndex, nickName, vipGrade, packagename, count);
                }

                Point gap = new System.Drawing.Point(this.packageBuyUserForm.dataGridView_UserBillingList.Location.X - this.packageBuyUserForm.dataGridView_UserInfo.Location.X, this.packageBuyUserForm.dataGridView_UserBillingList.Location.Y - this.packageBuyUserForm.dataGridView_UserInfo.Location.Y);
                this.packageBuyUserForm.Size = new Size(this.packageBuyUserForm.Size.Width, this.packageBuyUserForm.Size.Height + 300);
                this.packageBuyUserForm.dataGridView_UserBillingList.Location = this.packageBuyUserForm.dataGridView_UserInfo.Location;

                this.packageBuyUserForm.Controls.Remove(this.packageBuyUserForm.dataGridView_UserInfo);

                this.packageBuyUserForm.dataGridView_UserBillingList.Height += gap.Y + 300;

                this.packageBuyUserForm.dataGridView_UserBillingList.Refresh();
                this.packageBuyUserForm.Text = "상품별 구매 유저 리스트";

                this.packageBuyUserForm.Show();
            }
            else if (e.Button == MouseButtons.Right) // 우클릭
            {
                DataGridViewSelectedCellCollection selected = listView_TotalBilling_Info.SelectedCells;

                List<string> packageList = new List<string>();

                for (int i = 0; i < selected.Count; i++)
                {
                    string packageName = selected[i].Value.ToString();
                    packageList.Add(packageName);
                }

                string packageNames = string.Join("*", packageList);

                string now = DateTime.Now.ToString("yyyy-MM-dd");

                string startDate = string.IsNullOrEmpty(tb_TotalBilling_StartDate.Text) ? now : tb_TotalBilling_StartDate.Text;
                string endDate = string.IsNullOrEmpty(tb_TotalBilling_EndDate.Text) ? now : tb_TotalBilling_EndDate.Text;

                tb_TotalBilling_StartDate.Text = startDate;
                tb_TotalBilling_EndDate.Text = endDate;

                string startServer = string.IsNullOrEmpty(tb_TotalBilling_StartServer.Text) ? "1" : tb_TotalBilling_StartServer.Text;
                string endServer = string.IsNullOrEmpty(tb_TotalBilling_EndServer.Text) ? requestsuperorangetotal(10, "1", "0", "", "") : tb_TotalBilling_EndServer.Text;

                tb_TotalBilling_StartServer.Text = startServer;
                tb_TotalBilling_EndServer.Text = endServer;

                int.TryParse(startServer, out int _startServer);
                int.TryParse(endServer, out int _endServer);

                List<string> sendServerList = new List<string>();

                for (int serverIndex = _startServer; serverIndex <= _endServer; serverIndex++)
                {
                    if (combineServerList.Contains(serverIndex.ToString()))
                        sendServerList.Add(serverIndex.ToString());
                }

                string sendDateData = startDate + "@" + endDate;
                string sendServerData = string.Join("@", sendServerList);

                string retData = requestsuperorangetotal(28, "1", sendDateData, sendServerData, packageNames);

                if (this.packageBuyUserForm != null)
                {
                    this.packageBuyUserForm.Close();
                    this.packageBuyUserForm = null;
                }

                this.packageBuyUserForm = new Form2();

                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("0", "서버");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("1", "닉네임");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("2", "VIP등급");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("3", "패키지 이름");
                this.packageBuyUserForm.dataGridView_UserBillingList.Columns.Add("4", "구매갯수");


                string[] retDatas = retData.Split('*');

                for (int i = 0; i < retDatas.Length; i++)
                {
                    string[] datas = retDatas[i].Split('#');

                    if (datas.Length < 5)
                        continue;


                    string serverIndex = datas[0];
                    string nickName = datas[1];
                    string vipGrade = datas[2];
                    string packagename = datas[3];
                    string count = datas[4];

                    this.packageBuyUserForm.dataGridView_UserBillingList.Rows.Add(serverIndex, nickName, vipGrade, packagename, count);
                }

                Point gap = new System.Drawing.Point(this.packageBuyUserForm.dataGridView_UserBillingList.Location.X - this.packageBuyUserForm.dataGridView_UserInfo.Location.X, this.packageBuyUserForm.dataGridView_UserBillingList.Location.Y - this.packageBuyUserForm.dataGridView_UserInfo.Location.Y);
                this.packageBuyUserForm.Size = new Size(this.packageBuyUserForm.Size.Width, this.packageBuyUserForm.Size.Height + 300);
                this.packageBuyUserForm.dataGridView_UserBillingList.Location = this.packageBuyUserForm.dataGridView_UserInfo.Location;

                this.packageBuyUserForm.Controls.Remove(this.packageBuyUserForm.dataGridView_UserInfo);

                this.packageBuyUserForm.dataGridView_UserBillingList.Height += gap.Y + 300;

                this.packageBuyUserForm.dataGridView_UserBillingList.Refresh();
                this.packageBuyUserForm.Text = "상품별 구매 유저 리스트";

                this.packageBuyUserForm.Show();
            }
        }

        private void dataGridView_SortCompare(object sender, DataGridViewSortCompareEventArgs e)
        {
            if (int.TryParse(e.CellValue1.ToString(), System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"), out int temp1) && 
                int.TryParse(e.CellValue2.ToString(), System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.AllowThousands, new CultureInfo("en-US"), out int temp2))
            {
                e.SortResult = temp1.CompareTo(temp2);
                e.Handled = true;
            }
        }

        private void label36_Click_2(object sender, EventArgs e)
        {

        }

        private void tb_server_number_TextChanged(object sender, EventArgs e)
        {

        }
        
        private void LoadPackage(bool isSingle, object sender, EventArgs e)
        {
            const string openPeriod = "오픈 기간";
            const string PackageType_flag = "플래그";
            const string PackageType_specialPrice = "특가 패키지";
            const string PackageType_packageFlag = "패키지 플래그";
            const string PackageType_preimium = "프리미엄 상점";
            const string PackageType_flatRate = "주정액 상품";
            const string PackageType_vipFlatRate = "vip등급 주정액 상품";
            const string PackageType_rotationPackage = "로테이션 패키지";

            const string PackageType_packageStore = "패키지 스토어";
            const string PackageType_novicestoreTemplate = "노비스 스토어";
            const string PackageType_zeroPackageCash = "영원 패키지";
            int listIndex = 1;
            int startServer = 1;
            int endServer;

            ListView listView;
            if (isSingle)
            {
                endServer = int.Parse(textBox3.Text);
                listView = listView3;
                startServer = endServer;
            }
            else
            {
                listView = listView2;
                endServer = int.Parse(packageInfoLastServerInput.Text);
            }

            listView.Clear();
            listView.View = View.Details;
            listView.Columns.Add("Index");
            listView.Columns.Add("서버");
            listView.Columns.Add("오픈 기간");
            listView.Columns.Add("세팅 타입");
            listView.Columns.Add("구분");
            listView.Columns.Add("패키지");


            //각 데이터 세팅

            for (int server = startServer; server <= endServer; ++server)
            {
                try
                {
                    string packageData = setPackageDataInfo(server);
                    string[] _packageData = packageData.Split('\r');
                    string[] split_packageData = _packageData[0].Split('#');
                    string[] periodData = split_packageData[0].Split('*');
                    string periodOpenDate = periodData[2];

                    for (int package = 1; package < split_packageData.Length; ++package)
                    {
                        string[] packages = split_packageData[package].Split('*');
                        string division = packages[0];
                        string type = packages[1];

                        for (int i = 2; i < packages.Length; ++i)
                        {
                            ListViewItem listViewItem = new ListViewItem(listIndex.ToString());
                            listViewItem.UseItemStyleForSubItems = false;
                            listViewItem.SubItems.Add(server.ToString());
                            listViewItem.SubItems.Add(periodOpenDate.ToString());
                            listViewItem.SubItems.Add(type);
                            listViewItem.SubItems.Add(division);
                            listViewItem.SubItems.Add(packages[i]);
                            if (string.IsNullOrEmpty(packages[i]))
                                continue;
                            listView.Items.Add(listViewItem);
                            ++listIndex;
                        }
                    }
                }
                catch
                {
                    continue;
                }
            }
            //버튼눌렸을때 세팅
            listView.EndUpdate();
        }

        private void packageLoad(object sender, EventArgs e)
        {
            LoadPackage(false, sender, e);
        }

        private void textBox3_TextChanged_2(object sender, EventArgs e)
        {

        }

        private void label89_Click_2(object sender, EventArgs e)
        {

        }

        private void bt_UseCost_Click(object sender, EventArgs e)
        {
            string server = tb_server_number.Text;

            if (string.IsNullOrEmpty(server))
            {
                MessageBox.Show("서버를 입력하세요.");
                return;
            }

            string param = tb_UseCost.Text;

            if (string.IsNullOrEmpty(param))
            {
                MessageBox.Show("값을 입력하세요.");
                return;
            }

            if (combineServerList.Contains(server) == false)
            {
                MessageBox.Show("없는 서버입니다.");
                return;
            }

            string datas = server + "," + 19 + "," + "SetMarketingCost" + "," + param;    //packettype,날짜,가차탸입
            Thread_sendservertotal_statOver(datas);
        }

        private void textBox3_TextChanged_3(object sender, EventArgs e)
        {

        }

        private void label90_Click_2(object sender, EventArgs e)
        {

        }

        private void button4_Click(object sender, EventArgs e)
        {
            LoadPackage(true, sender, e);
        }

        private void listView3_SelectedIndexChanged_1(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void label90_Click_1(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick_1(object sender, DataGridViewCellEventArgs e)
        {
            IDataObject dataObj = Clipboard.GetDataObject();
            string data = (string)dataObj.GetData(DataFormats.Text);
            string datas = data;
            DataGridView grid = sender as DataGridView;

            DataGridViewCell cell = grid.SelectedRows[0].Cells[0];
            int rowIndex = cell.RowIndex;
            int colunmIndex = cell.ColumnIndex;

        }

        private void dataGridView_Paste(object sender, KeyEventArgs e)
        {
            Keys inputKey = e.KeyCode;

            if (e.Control && e.KeyCode == Keys.V)
            {
                DataGridView grid = sender as DataGridView;

                char[] rowSplitter = { '\r', '\n' };
                char[] columnSplitter = { '\t' };

                int[] columnsOrderArray = dataGridView_EventSchedule.Columns.Cast<DataGridViewColumn>().Where(x => x.Visible).OrderBy(x => x.DisplayIndex).Select(x => x.Index).ToArray();

                IDataObject clipboardData = Clipboard.GetDataObject();
                string clipboardStringData = (string)clipboardData.GetData(DataFormats.Text);

                string[] rowClipboard = clipboardStringData.Split(rowSplitter, StringSplitOptions.RemoveEmptyEntries);
                string[] columnClipboard = clipboardStringData.Split(columnSplitter, StringSplitOptions.RemoveEmptyEntries);

                int rowIndex = grid.SelectedCells[0].RowIndex;
                int columnIndex = grid.SelectedCells[0].ColumnIndex;

                if (grid.Rows.Count < (rowIndex + rowClipboard.Length))
                {
                    grid.Rows.Add(rowIndex + rowClipboard.Length - grid.Rows.Count);

                    for (int i = 0; i < grid.Rows[grid.Rows.Count - 2].Cells.Count; i++)
                    {
                        grid.Rows[grid.Rows.Count - 2].Cells[i].Value = grid.Rows[grid.Rows.Count - 1].Cells[i].Value;
                        grid.Rows[grid.Rows.Count - 1].Cells[i].Value = "";
                    }
                }

                int selectedRowCount = 0;
                int selectedColumnCount = 0;

                int lastSelectedRowIndex = -1;
                int lastSelectedColumnIndex = -1;

                int minRowIndex = -1;
                int minColumnIndex = -1;

                string[,] data = new string[rowClipboard.Length, rowClipboard[0].Split('\t').Length];

                for (int i = 0; i < data.GetLength(0); i++)
                {

                    string[] columnDatas = rowClipboard[i].Split('\t');
                    for (int j = 0; j < data.GetLength(1); j++)
                    {
                        data[i, j] = columnDatas[j];
                    }
                }

                List<int> rowList = new List<int>();
                List<int> columnList = new List<int>();

                for (int i = 0; i < grid.SelectedCells.Count; i++)
                {
                    if (lastSelectedRowIndex == -1)
                    {
                        selectedRowCount++;
                        lastSelectedRowIndex = grid.SelectedCells[i].RowIndex;
                    }
                    else if (lastSelectedRowIndex != grid.SelectedCells[i].RowIndex)
                    {
                        selectedRowCount++;
                        lastSelectedRowIndex = grid.SelectedCells[i].RowIndex;
                    }

                    if (lastSelectedColumnIndex == -1)
                    {
                        selectedColumnCount++;
                        lastSelectedColumnIndex = grid.SelectedCells[i].ColumnIndex;
                    }
                    else if (lastSelectedColumnIndex != grid.SelectedCells[i].ColumnIndex)
                    {
                        selectedColumnCount++;
                        lastSelectedColumnIndex = grid.SelectedCells[i].ColumnIndex;
                    }

                    if (minRowIndex == -1)
                        minRowIndex = grid.SelectedCells[i].RowIndex;
                    else if (minRowIndex > grid.SelectedCells[i].RowIndex)
                        minRowIndex = grid.SelectedCells[i].RowIndex;

                    if (minColumnIndex == -1)
                        minColumnIndex = grid.SelectedCells[i].ColumnIndex;
                    else if (minColumnIndex > grid.SelectedCells[i].ColumnIndex)
                        minColumnIndex = grid.SelectedCells[i].ColumnIndex;

                    if (rowList.Contains(grid.SelectedCells[i].RowIndex) == false)
                        rowList.Add(grid.SelectedCells[i].RowIndex);

                    if (columnList.Contains(grid.SelectedCells[i].ColumnIndex) == false)
                        columnList.Add(grid.SelectedCells[i].ColumnIndex);
                }

                if (columnList.Count % data.GetLength(1) == 0 && rowList.Count % data.GetLength(0) == 0)
                {
                    for (int rIndex = 0; rIndex < rowList.Count; rIndex++)
                    {
                        for (int cIndex = 0; cIndex < columnList.Count; cIndex++)
                        {
                            grid[minColumnIndex + cIndex, minRowIndex + rIndex].Value = data[rIndex % data.GetLength(0), cIndex % data.GetLength(1)];
                        }
                    }

                    return;
                }
                else if (rowClipboard.Length == 1 && columnClipboard.Length == 1)
                {
                    DataGridViewSelectedCellCollection dataCells = grid.SelectedCells;

                    if (dataCells[dataCells.Count - 1].ColumnIndex < dataCells[0].ColumnIndex)
                    {
                        for (int i = dataCells.Count - 1; i >= 0; i--)
                        {
                            dataCells[i].Value = rowClipboard[0];
                        }
                    }
                    else
                    {
                        for (int i = 0; i < dataCells.Count; i++)
                        {
                            dataCells[i].Value = rowClipboard[0];
                        }
                    }
                }
                else if (selectedRowCount == 1)
                {
                    for (int i = 0; i < selectedColumnCount; i++)
                    {
                        for (int iRow = 0; iRow < rowClipboard.Length; iRow++)
                        {
                            string[] valueRow = rowClipboard[iRow].Split(columnSplitter);

                            for (int iCol = 0; iCol < valueRow.Length; iCol++)
                            {
                                if (columnsOrderArray.Count() - 1 >= columnIndex + iCol)
                                {
                                    int idx = columnsOrderArray[columnIndex + iCol];
                                    grid.Rows[rowIndex + iRow].Cells[idx - i].Value = valueRow[iCol];
                                }
                            }
                        }
                    }
                }
                else if (selectedColumnCount == 1)
                {
                    for (int i = 0; i < selectedRowCount; i++)
                    {
                        for (int iRow = 0; iRow < rowClipboard.Length; iRow++)
                        {
                            string[] valueRow = rowClipboard[iRow].Split(columnSplitter);

                            for (int iCol = 0; iCol < valueRow.Length; iCol++)
                            {
                                if (columnsOrderArray.Count() - 1 >= columnIndex + iCol)
                                {
                                    int idx = columnsOrderArray[columnIndex + iCol];
                                    grid.Rows[rowIndex + iRow - i].Cells[idx].Value = valueRow[iCol];
                                }
                            }
                        }
                    }
                }
                else
                {
                    for (int rIndex = 0; rIndex < data.GetLength(0); rIndex++)
                    {
                        for (int cIndex = 0; cIndex < data.GetLength(1); cIndex++)
                        {
                            grid[minColumnIndex + cIndex, minRowIndex + rIndex].Value = data[rIndex % data.GetLength(0), cIndex % data.GetLength(1)];
                        }
                    }

                    return;
                }
            }
            else if (e.KeyCode == Keys.Delete)
            {
                DataGridView grid = sender as DataGridView;
                DataGridViewSelectedCellCollection cells = grid.SelectedCells;

                for (int i = 0; i < cells.Count; i++)
                {
                    int rIndex = cells[i].RowIndex;
                    int cIndex = cells[i].ColumnIndex;

                    grid.Rows[rIndex].Cells[cIndex].Value = string.Empty;

                    string serverIndex = grid.Rows[rIndex].Cells[0].Value.ToString();

                    string key = $"{serverIndex}_{currentEventType}_{currentEventDataType}";
                    eventDataByIndex[key][cIndex] = string.Empty;
                }
            }
        }

        private void bt_weekCharge_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.weekCharge);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        public static Dictionary<string, Dictionary<string, string[]>> rankingEventScheduleData = new Dictionary<string, Dictionary<string, string[]>>(); // Key : Server_
        public static Dictionary<string, string[]> serverRankingEventScheduleData = new Dictionary<string, string[]>();
        public Dictionary<string, List<string>> eventDataByIndex = new Dictionary<string, List<string>>();
        public List<string> combineServerList = new List<string>();

        bool IsSameCellValue(int column, int row)
        {
            DataGridViewCell cell1 = dataGridView_EventSchedule[column, row];
            DataGridViewCell cell2 = dataGridView_EventSchedule[column, row - 1];

            if (cell1.Value == null || cell2.Value == null)
                return false;
            return cell1.Value.ToString() == cell2.Value.ToString();
        }

        private void dataGridView_EventSchedule_Paint(object sender, PaintEventArgs e)
        {
            if (isTotalViewer == false)
                return;

            int maxLength = currentEventDataType == (int)EventScheduleData_.totalEventReward ? eventDateList.Count * 5 : eventDateList.Count * 6;

            for (int i = 1; i < maxLength;)
            {
                Rectangle cellRectangle = dataGridView_EventSchedule.GetCellDisplayRectangle(i, -1, true);

                int nextCellWidth = dataGridView_EventSchedule.GetCellDisplayRectangle(i + 1, -1, true).Width;

                cellRectangle.X += 1;
                cellRectangle.Y += 1;

                if (currentEventDataType == (int)EventScheduleData_.totalEventReward)
                    cellRectangle.Width = cellRectangle.Width + (nextCellWidth * 4) - 2;
                else if (currentEventDataType == (int)EventScheduleData_.eventType)
                    cellRectangle.Width = cellRectangle.Width + (nextCellWidth * 5) - 2;
                cellRectangle.Height = cellRectangle.Height / 2 - 2;

                e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(128, 130, 234)), cellRectangle);

                StringFormat stringFormat = new StringFormat();

                stringFormat.Alignment = StringAlignment.Center;
                stringFormat.LineAlignment = StringAlignment.Center;
                //rgb(128, 130, 234)
                e.Graphics.DrawString
                    (
                        currentEventDataType == (int)EventScheduleData_.totalEventReward ? eventDateList[i / 5] : eventDateList[i / 6],
                        dataGridView_EventSchedule.ColumnHeadersDefaultCellStyle.Font,
                        new SolidBrush(dataGridView_EventSchedule.ColumnHeadersDefaultCellStyle.ForeColor),
                        cellRectangle,
                        stringFormat
                    );

                e.Graphics.DrawLine(new Pen(Color.Black, 3), new Point(cellRectangle.X - 2, 0), new Point(cellRectangle.X - 2, dataGridView_EventSchedule.Height));
                e.Graphics.DrawLine(new Pen(Color.Black, 2), new Point(cellRectangle.X + nextCellWidth - 2, cellRectangle.Height), new Point(cellRectangle.X + nextCellWidth - 2, dataGridView_EventSchedule.Height));
                e.Graphics.DrawLine(new Pen(Color.Black, 2), new Point(cellRectangle.X + nextCellWidth * 2 - 2, cellRectangle.Height), new Point(cellRectangle.X + nextCellWidth * 2 - 2, dataGridView_EventSchedule.Height));
                e.Graphics.DrawLine(new Pen(Color.Black, 2), new Point(cellRectangle.X + nextCellWidth * 3 - 2, cellRectangle.Height), new Point(cellRectangle.X + nextCellWidth * 3- 2, dataGridView_EventSchedule.Height));
                e.Graphics.DrawLine(new Pen(Color.Black, 2), new Point(cellRectangle.X + nextCellWidth * 4 - 2, cellRectangle.Height), new Point(cellRectangle.X + nextCellWidth * 4 - 2, dataGridView_EventSchedule.Height));

                if (currentEventDataType == (int)EventScheduleData_.totalEventReward)
                    i += 5;
                else
                    i += 6;
            }

            int height = dataGridView_EventSchedule.GetCellDisplayRectangle(1, -1, true).Height;
            e.Graphics.DrawLine(new Pen(Color.Black, 3), new Point(0, height), new Point(dataGridView_EventSchedule.Width, height));
            //height /= 2;
            //height *= 25;

            //e.Graphics.DrawLine(new Pen(Color.Black, 3), new Point(0, height), new Point(dataGridView_EventSchedule.Width, height));
        }

        private void dataGridView_EventSchedule_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            if (e.RowIndex == 23)
                e.Graphics.DrawLine(new Pen(Color.Black, 3), new Point(0, e.CellBounds.Top), new Point(dataGridView_EventSchedule.Width, e.CellBounds.Top));

            if (e.Value == null)
                return;

            if (string.IsNullOrEmpty(e.Value.ToString()))
                return;

            e.AdvancedBorderStyle.Bottom = DataGridViewAdvancedCellBorderStyle.None;

            if (e.RowIndex >= 1 && e.ColumnIndex >= 0 && e.RowIndex != 23)
            {
                if (IsSameCellValue(e.ColumnIndex, e.RowIndex))
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.None;
                }
                else
                {
                    e.AdvancedBorderStyle.Top = dataGridView_EventSchedule.AdvancedCellBorderStyle.Top;
                }            
            }
            else if (isTotalViewer)
            {
                if (e.RowIndex == -1 && e.ColumnIndex > -1)
                {
                    Rectangle cellRectangle = e.CellBounds;

                    cellRectangle.Y += e.CellBounds.Height / 2;
                    cellRectangle.Height = e.CellBounds.Height / 2;

                    e.PaintBackground(cellRectangle, true);
                    e.PaintContent(cellRectangle);
                    e.Handled = true;
                }
            }     
        }

        private void dataGridView_EventSchedule_CellFomatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0 || e.ColumnIndex <= 0)
                return;
        }

        private void bt_MainEvent_Click(object sender, EventArgs e)
        {
            lb_CurrentEventType.Text = "현재 이벤트 타입 : 메인이벤트";
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : 이벤트 타입";
            // 데이터 = 이벤트ID,시작일,종료일,유니크인덱스,템플릿타입,연속충전,일일충전,개인보상,길드보상,상점,기간한정,스페셜보상,...
            LoadServerEventSchedule();
        }

        public Dictionary<string, Color> eventColor = new Dictionary<string, Color>();
        public int _iLastServerIndex = 0;
        public List<string> eventDateList = new List<string>();

        public enum EventScheduleData_
        {
            eventIndex,
            startDate,
            endDate,
            uniqueIndex,
            eventType,
            weekCharge,
            dayCharge,
            reward,
            guildReward,
            shop,
            limiteReward,
            hotPoint,
            totalEventIndex,
            totalEventReward,
            totalEventUniqueIndex1,
            totalEventIndex2,
            totalEventReward2,
            totalEventUniqueIndex2,
            totalEventIndex3,
            totalEventReward3,
            totalEventUniqueIndex3,
            totalEventIndex4,
            totalEventReward4,
            totalEventUniqueIndex4,
            totalEventIndex5,
            totalEventReward5,
            totalEventUniqueIndex5,
            guildCharge,
            max,
        }

        public enum EventScheduleSubData_
        {
            eventIndex,
            startDate,
            endDate,
            uniqueIndex,
            eventType,
            reward,
            temp,
            max,
        }

        public enum ContestData_
        {
            eventIndex,
            startDate,
            endDate,
            uniqueIndex,
            type,
            1,
            2,
            reward,
            teamReward,
            temp,
            max,
        }

        private Object eventLock = new Object();

        public Dictionary<string, string> eventIndexByTitle = new Dictionary<string, string>();
        public Dictionary<string, string> totalRewardDic = new Dictionary<string, string>();
        public Dictionary<string, int> subEventID = new Dictionary<string, int>();

        bool isFirst = false;
        int dayGap = 0;

        DateTime baseDateTime;

        private void LoadServerEventSchedule()
        {
            if (totalRewardDic.Keys.Count == 0)
            {
                Excel.Application app = new Excel.Application();
                Excel.Workbook wb = app.Workbooks.Open(Directory.GetCurrentDirectory() + "\\EventRewardIndex.xlsx");
                Excel.Worksheet ws = wb.Worksheets.Item["Sheet1"];
                Excel.Range range = ws.UsedRange;

                for (int i = 2; i < range.Rows.Count; i++)
                {
                    string key = (range.Cells[i, 1] as Excel.Range).Value.ToString();

                    if (totalRewardDic.ContainsKey(key) == false)
                        totalRewardDic.Add(key, (range.Cells[i, 2] as Excel.Range).Value.ToString());

                    if (totalRewardDic.ContainsKey((range.Cells[i, 2] as Excel.Range).Value.ToString()) == false)
                        totalRewardDic.Add((range.Cells[i, 2] as Excel.Range).Value.ToString(), key);
                }

                wb.Close(false);
                app.Quit();
            }


            serverRankingEventScheduleData.Clear();
            rankingEventScheduleData.Clear();
            eventDataByIndex.Clear();
            dataGridView_EventSchedule.Columns.Clear();
            addCell.Clear();
            eventDateList.Clear();
            eventColor.Clear();

            int serverCount = combineServerList.Count;

            if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                serverCount = 1;

            Thread[] T = new Thread[serverCount];

            int threadCount = 0;

            for (int i = 0; i < serverCount; i++)
            {
                string serverIndex = combineServerList[i];

                if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                    serverIndex = "2";

                string data = $"27#{serverIndex}#1#0";
                T[threadCount] = new Thread(new ParameterizedThreadStart(GetRankingEventSchduleThread));
                T[threadCount].Start(data);
                threadCount++;
            }

            threadCount = 0;

            int count = 0;

            for (int i = 0; i < T.Length; i++) // 모든 스레드에서 정보 넣어줄떄까지 대기
            {
                T[i].Join();
                count++;
            }

            dataGridView_EventSchedule.Columns.Add(count.ToString(), "서버");
            
            Random rand = new Random();

            eventColor.Add("0", Color.White);

            for (int i = 1; i < 300; i++)
            {
                if (i < rankingeventtemplate.GetLength(0))
                {
                    string data = rankingeventtemplate[i, (int)rankingevent_.index];
                    string title = rankingeventtemplate[i, (int)rankingevent_.title];

                    if (string.IsNullOrEmpty(data) || string.IsNullOrEmpty(title))
                    {
                        Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        do
                        {
                            color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        } while (eventColor.ContainsValue(color));

                        if (eventColor.ContainsKey(i.ToString()) == false)
                            eventColor.Add(i.ToString(), Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                    }
                    else
                    {
                        if (eventIndexByTitle.ContainsKey(title) == false)
                            eventIndexByTitle.Add(title, data);
                        if (eventIndexByTitle.ContainsKey(data) == false)
                            eventIndexByTitle.Add(data, title);

                        Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        do
                        {
                            color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        } while (eventColor.ContainsValue(color));

                        if (eventColor.ContainsKey(data) == false)
                            eventColor.Add(data, Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                        if (eventColor.ContainsKey(title + "_" + data) == false)
                            eventColor.Add(title + "_" + data, eventColor[data]);
                    }
                }
                else
                {
                    Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                    do
                    {
                        color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                    } while (eventColor.ContainsValue(color));

                    if (eventColor.ContainsKey(i.ToString()) == false)
                        eventColor.Add(i.ToString(), Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                }
            }

            string baseDate = tb_EventSchedule_BaseDate.Text;

            DateTime time = string.IsNullOrEmpty(baseDate) ? DateTime.Now : DateTime.ParseExact(baseDate, "yyyy-MM-dd", null);

            baseDateTime = time;

            dayGap = (DateTime.Today - time).Days;

            for (DateTime date = time; date <= time.AddMonths(1); date = date.AddDays(1))
            {
                string dateKey = date.ToString("yyyy-MM-dd");

                eventDateList.Add(dateKey);

                for (int i = 0; i < serverCount; i++)
                {
                    string serverIndex = combineServerList[i];

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        serverIndex = "2";

                    string key = string.Format("{0}_{1}_{2}", serverIndex, dateKey, 1); // Server_Date_EventType

                    //if (serverRankingEventScheduleData.ContainsKey(key) == false)
                    //    continue;

                    string[] data = serverRankingEventScheduleData.ContainsKey(key) ? serverRankingEventScheduleData[key] : new string[(int)EventScheduleData_.max]
                    { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

                    for (int j = 0; j < data.Length; j++)
                    {
                        string dataKey = string.Format("{0}_{1}_{2}", serverIndex, 1, j); // Server_EventType_DataType

                        if (eventDataByIndex.ContainsKey(dataKey))
                            eventDataByIndex[dataKey].Add(data[j]);
                        else
                        {
                            List<string> temp = new List<string>();

                            temp.Add(serverIndex.ToString());
                            temp.Add(data[j]);

                            eventDataByIndex.Add(dataKey, temp);
                        }
                    }
                }
            }

            if (!isFirst)
            {
                this.dataGridView_EventSchedule.ColumnHeadersHeight = this.dataGridView_EventSchedule.ColumnHeadersHeight * 2;
                isFirst = true;
            }

            this.dataGridView_EventSchedule.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomRight;
            currentEventType = 1;
            ChangeButton();
            SetEventScheduleData((int)EventScheduleData_.eventType);
        }

        int currentEventDataType = -1;

        bool isTotalViewer = false;

        private void InitalizerCellData()
        {
            isSet = true;
            int rCount = dataGridView_EventSchedule.RowCount;
            int cCount = dataGridView_EventSchedule.ColumnCount;

            for (int rIndex = 0; rIndex < rCount; rIndex++)
            {
                for (int cIndex = 1; cIndex < cCount; cIndex++)
                {
                    DataGridViewCell cell = dataGridView_EventSchedule[cIndex, rIndex];
                    object value = cell.Value;

                    if (value == null)
                        continue;

                    string sValue = value.ToString();
                    int.TryParse(sValue, out int iValue);

                    switch (currentEventDataType)
                    {
                        case (int)EventScheduleSubData_.eventType:
                            {
                                string title = eventIndexByTitle.ContainsKey(sValue) ? eventIndexByTitle[sValue] : sValue;

                                if (string.IsNullOrEmpty(title) == false)
                                    cell.Value = $"{title}_{sValue}";
                            }
                            break;
                        case (int)EventScheduleData_.totalEventReward:
                        case (int)EventScheduleData_.totalEventReward2:
                        case (int)EventScheduleData_.totalEventReward3:
                        case (int)EventScheduleData_.totalEventReward4:
                        case (int)EventScheduleData_.totalEventReward5:
                            {
                                if (iValue > 0)
                                {
                                    if (totalRewardDic.ContainsKey(sValue))
                                        cell.Value = totalRewardDic[sValue];
                                }
                            }
                            break;
                    }

                    string addCellKey = $"{currentEventDataType}#{cell.RowIndex}#{cell.ColumnIndex}";

                    if (addCell.ContainsKey(addCellKey))
                        cell.Style.BackColor = Color.Red;
                    else
                    {
                        if (currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex1 || currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex2 || currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex3 ||
                            currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex4 || currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex5 || currentEventDataType == (int)EventScheduleData_.uniqueIndex)
                        {
                            if (currentEventDataType == (int)EventScheduleData_.uniqueIndex)
                            {
                                string[] values = sValue.Split('r');
                                cell.Style.BackColor = eventColor.ContainsKey(values[values.Length - 1]) ? eventColor[values[values.Length - 1]] : Color.White;
                            }
                            else
                            {
                                string[] values = sValue.Split('_');
                                cell.Style.BackColor = eventColor.ContainsKey(values[values.Length - 1]) ? eventColor[values[values.Length - 1]] : Color.White;
                            }
                        }
                        else
                            cell.Style.BackColor = eventColor.ContainsKey(sValue) ? eventColor[sValue] : Color.White;
                    }
                }
            }

            isSet = false;
        }

        private void InitalizerCellDataPopup(Form3 form3, DataGridView popup)
        {
            int rCount = popup.RowCount;
            int cCount = popup.ColumnCount;

            if (currentEventType == -1)
                return;

            for (int rIndex = 0; rIndex < rCount; rIndex++)
            {
                for (int cIndex = 1; cIndex < cCount; cIndex++)
                {
                    DataGridViewCell cell = popup[cIndex, rIndex];
                    object value = cell.Value;

                    if (value == null)
                        continue;

                    string sValue = value.ToString();
                    int.TryParse(sValue, out int iValue);

                    switch (form3.currentEventDataType)
                    {
                        case (int)EventScheduleData_.eventType:
                            {
                                string title = eventIndexByTitle.ContainsKey(sValue) ? eventIndexByTitle[sValue] : sValue;

                                if (string.IsNullOrEmpty(title) == false)
                                    cell.Value = $"{title}_{sValue}";
                            }
                            break;
                    }

                    string addCellKey = $"{form3.currentEventDataType}#{cell.RowIndex}#{cell.ColumnIndex}";

                    if (addCell.ContainsKey(addCellKey))
                        cell.Style.BackColor = Color.Red;
                    else
                    {
                        if (form3.currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex1 || form3.currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex2 || form3.currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex3 ||
                            form3.currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex4 || form3.currentEventDataType == (int)EventScheduleData_.totalEventUniqueIndex5 || form3.currentEventDataType == (int)EventScheduleData_.uniqueIndex)
                        {
                            if (currentEventDataType == (int)EventScheduleData_.uniqueIndex)
                            {
                                string[] values = sValue.Split('r');
                                cell.Style.BackColor = eventColor.ContainsKey(values[values.Length - 1]) ? eventColor[values[values.Length - 1]] : Color.White;
                            }
                            else
                            {
                                string[] values = sValue.Split('_');
                                cell.Style.BackColor = eventColor.ContainsKey(values[values.Length - 1]) ? eventColor[values[values.Length - 1]] : Color.White;
                            }
                        }
                        else
                            cell.Style.BackColor = eventColor.ContainsKey(sValue) ? eventColor[sValue] : Color.White;
                    }
                }
            }
        }

        bool isSet = false;

        private void SetEventScheduleData(int type)
        {
            currentEventDataType = type;
            isTotalViewer = false;

            dataGridView_EventSchedule.Columns.Clear();
            dataGridView_EventSchedule.Rows.Clear();

            isSet = true;

            if (currentEventType == -1) // 서브이벤트 11 친밀도  데이터 셋팅
            {
                dataGridView_EventSchedule.Columns.Add("서버", "서버");
                dataGridView_EventSchedule.Columns.Add("데이터", "데이터");

                switch (type)
                {
                    case (int)EventScheduleData_.eventIndex: //  ID
                        currentEventDataType = 0;
                        break;
                    case (int)EventScheduleData_.eventType: //  이름
                        currentEventDataType = 1;
                        break;
                    case (int)EventScheduleData_.uniqueIndex: //  배너
                        currentEventDataType = 2;
                        break;
                }

                for (int i = 0; i < combineServerList.Count; i++)
                {
                    string serverIndex = combineServerList[i];

                    if (string.IsNullOrEmpty(serverIndex))
                        continue;

                    string data = eventSchedule_[serverIndex].Length - 1 >= currentEventDataType ? eventSchedule_[serverIndex][currentEventDataType] : "";

                    dataGridView_EventSchedule.Rows.Add(serverIndex, data);
                }
            }
            else
            {
                dataGridView_EventSchedule.Columns.Add("서버", "서버");

                for (DateTime date = baseDateTime; date < baseDateTime.AddMonths(1); date = date.AddDays(1))
                {
                    string dateValue = date.ToString("yyyy-MM-dd");
                    dataGridView_EventSchedule.Columns.Add(dateValue, dateValue);
                }

                for (int i = 0; i < combineServerList.Count; i++)
                {
                    string serverIndex = combineServerList[i];

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        serverIndex = "2";

                    string key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, type);

                    if (eventDataByIndex.ContainsKey(key) == false)
                        continue;

                    string[] serverData = eventDataByIndex[key].ToArray();

                    dataGridView_EventSchedule.Rows.Add(serverData);

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        break;
                }

                InitalizerCellData();
            }

            isSet = false;
        }

        private void SetEventScheduleData_Total(int type)
        {
            currentEventDataType = type;
            isTotalViewer = true;

            dataGridView_EventSchedule.Columns.Clear();
            dataGridView_EventSchedule.Rows.Clear();

            dataGridView_EventSchedule.Columns.Add("서버", "서버");

            for (DateTime date = DateTime.Now; date < DateTime.Now.AddMonths(1); date = date.AddDays(1))
            {
                string dateValue = date.ToString("yyyy-MM-dd");
                if (currentEventDataType == (int)EventScheduleData_.totalEventReward)
                {
                    for (int i = 1; i < 6; i++)
                        dataGridView_EventSchedule.Columns.Add(dateValue, $"통합 {i}");
                }
                else if (currentEventDataType == (int)EventScheduleData_.eventType)
                {
                    for (int i = 2; i < 8; i++)
                        dataGridView_EventSchedule.Columns.Add(dateValue, $"서브 {i}");
                }
                else
                    dataGridView_EventSchedule.Columns.Add(dateValue, dateValue);
            }

            for (int i = 0; i < combineServerList.Count; i++)
            {
                string serverIndex = combineServerList[i];

                if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW && serverIndex != "1")
                    continue;

                string key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, type);

                if (eventDataByIndex.ContainsKey(key) == false)
                    continue;

                List<List<string>> datas = new List<List<string>>();

                datas.Add(eventDataByIndex[key]);

                if (type == (int)EventScheduleData_.totalEventReward)
                {
                    key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, (int)EventScheduleData_.totalEventReward2);
                    datas.Add(eventDataByIndex[key]);
                    key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, (int)EventScheduleData_.totalEventReward3);
                    datas.Add(eventDataByIndex[key]);
                    key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, (int)EventScheduleData_.totalEventReward4);
                    datas.Add(eventDataByIndex[key]);
                    key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, (int)EventScheduleData_.totalEventReward5);
                    datas.Add(eventDataByIndex[key]);
                }
                else if (type == (int)EventScheduleData_.eventType)
                {
                    key = $"{serverIndex}_{3}_{(int)EventScheduleSubData_.eventType}";
                    datas.Add(eventDataByIndex[key]);
                    key = $"{serverIndex}_{4}_{(int)EventScheduleSubData_.eventType}";
                    datas.Add(eventDataByIndex[key]);
                    key = $"{serverIndex}_{5}_{(int)EventScheduleSubData_.eventType}";
                    datas.Add(eventDataByIndex[key]);
                    key = $"{serverIndex}_{6}_{(int)EventScheduleSubData_.eventType}";
                    datas.Add(eventDataByIndex[key]);
                    key = $"{serverIndex}_{7}_{(int)EventScheduleSubData_.eventType}";
                    datas.Add(eventDataByIndex[key]);
                }

                List<string> dataList = new List<string>();

                dataList.Add(datas[0][0]);

                for (int j = 1; j < datas[0].Count; j++)
                {
                    for (int k = 0; k < datas.Count; k++)
                    {
                        dataList.Add(datas[k][j]);
                    }
                }

                string[] serverData = dataList.ToArray();

                dataGridView_EventSchedule.Rows.Add(serverData);
            }
            InitalizerCellData();
            dataGridView_EventSchedule.Update();
        }

        private void SetEventScheduleDataPopup(int type, string name = "")
        {
            Form3 form3 = new Form3();
            form3.Show();

            if (string.IsNullOrEmpty(name) == false)
                form3.Text = name;

            form3.SetForm(this);
            form3.currentEventType = currentEventType;
            form3.currentEventDataType = type;

            DataGridView popupDgv = form3.dataGridView_EventData;
            isTotalViewer = false;

            popupDgv.Columns.Clear();
            popupDgv.Rows.Clear();

            if (currentEventType == -1)
            {
                popupDgv.Columns.Add("서버", "서버");
                popupDgv.Columns.Add("데이터", "데이터");

                switch(type)
                {
                    case (int)EventScheduleData_.eventIndex: //  ID
                        form3.currentEventDataType = 0;
                        break;
                    case (int)EventScheduleData_.eventType:  //  이름
                        form3.currentEventDataType = 1;
                        break;
                    case (int)EventScheduleData_.uniqueIndex: // 배너
                        form3.currentEventDataType = 2;
                        break;
                }

                for (int i = 0; i < combineServerList.Count; i++)
                {
                    string serverIndex = combineServerList[i];

                    if (string.IsNullOrEmpty(serverIndex))
                        continue;

                    string[] Datas = eventSchedule_.ContainsKey(serverIndex) ? eventSchedule_[serverIndex] : new string[1];

                    if (Datas.Length < 4)
                        continue;

                    popupDgv.Rows.Add(serverIndex, Datas[form3.currentEventDataType]);
                }
            }
            else
            {
                popupDgv.Columns.Add("서버", "서버");

                for (DateTime date = baseDateTime; date < baseDateTime.AddMonths(1); date = date.AddDays(1))
                {
                    string dateValue = date.ToString("yyyy-MM-dd");
                    popupDgv.Columns.Add(dateValue, dateValue);
                }

                for (int i = 0; i < combineServerList.Count; i++)
                {
                    string serverIndex = combineServerList[i];

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW && serverIndex != "1")
                        continue;

                    string key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, type);

                    if (eventDataByIndex.ContainsKey(key) == false)
                        continue;

                    string[] serverData = eventDataByIndex[key].ToArray();

                    popupDgv.Rows.Add(serverData);
                }
            }
            InitalizerCellDataPopup(form3, popupDgv);
        }

        private void GetRankingEventSchduleThread(Object Data)
        {
            lock (eventLock)
            {
                string[] data = Data.ToString().Split('#');

                string sendType = data[0];
                string serverIndex = data[1]; // 운영툴 주소때문에 사용하는 인덱스
                string eventType = data[2];
                string eventID = data[3];

                string requestData = thread_requestsuperorangetotal(sendType, serverIndex, eventType, eventID);

                string[] datas = requestData.Split('*');

                if (datas.Length < 1)
                    return;

                for (int i = 0; i < datas.Length; i++)
                {
                    string[] eventDatas = eventType != "0" ? datas[i].Split(',') : datas[i].Split('#');

                    if (eventDatas[0] == "0" || string.IsNullOrEmpty(eventDatas[0]))
                        continue;

                    string startDate = string.Empty;
                    string endDate = string.Empty;

                    if (eventType != "0")
                    {
                        startDate = eventDatas[1];
                        endDate = eventDatas[2];
                    }
                    else
                    {
                        if (DateTime.TryParseExact(eventDatas[1], "yyyy-MM-dd HH:mm:ss", null, DateTimeStyles.None, out DateTime _startDate))
                            startDate = _startDate.ToString("yyyy-MM-dd");
                        else
                            startDate = eventDatas[1];

                        if (DateTime.TryParseExact(eventDatas[2], "yyyy-MM-dd HH:mm:ss", null, DateTimeStyles.None, out DateTime dateTime))
                            endDate = dateTime.ToString("yyyy-MM-dd");
                        else
                            endDate = eventDatas[2];
                    }

                    if (string.IsNullOrEmpty(startDate) || string.IsNullOrEmpty(endDate))
                        continue;


                    if (startDate != endDate)
                    {
                        DateTime _startDate = DateTime.ParseExact(startDate, "yyyy-MM-dd", null);
                        DateTime _endDate = DateTime.ParseExact(endDate, "yyyy-MM-dd", null);

                        for (DateTime date = _startDate; date <= _endDate; date = date.AddDays(1))
                        {
                            string key = string.Format("{0}_{1}_{2}", serverIndex, date.ToString("yyyy-MM-dd"), eventType); // Server_Date_EventType_DataType

                            if (serverRankingEventScheduleData.ContainsKey(key) == false)
                                serverRankingEventScheduleData.Add(key, eventDatas);
                        }
                    }
                    else
                    {
                        string key = string.Format("{0}_{1}_{2}", serverIndex, startDate, eventType); // Server_Date_EventType_DataType

                        if (serverRankingEventScheduleData.ContainsKey(key) == false)
                            serverRankingEventScheduleData.Add(key, eventDatas);
                    }
                }
            }

        }

        private void lv_gachainfo_main_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick_2(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView2_CellContentClick_1(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView_EventSchedule_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView1_CellContentClick_3(object sender, DataGridViewCellEventArgs e)
        {

        }

        public Dictionary<string, int> addCell = new Dictionary<string, int>();

        private void dateGridView_EventSchedule_Click(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.RowIndex < 0 || e.ColumnIndex < 0)
                    return;

                ContextMenuStrip contextMenuStrip = new ContextMenuStrip();

                List<ToolStripMenuItem> titleList = new List<ToolStripMenuItem>();
                List<ToolStripMenuItem> itemList = new List<ToolStripMenuItem>();

                int count = -1;

                for (int i = 0; i < rankingeventtemplate.GetLength(0); i++)
                {
                    if (i % 10 == 0)
                    {
                        titleList.Add(new ToolStripMenuItem(i.ToString()));
                        count++;
                    }

                    if (string.IsNullOrEmpty(rankingeventtemplate[i, (int)rankingevent_.title]) == false)
                    {
                        ToolStripMenuItem item = new ToolStripMenuItem(rankingeventtemplate[i, (int)rankingevent_.title] + "_" + i);
                        item.Click += datagridview_ClickMenu;
                        titleList[count].DropDownItems.Add(item);
                    }
                }
                contextMenuStrip.Items.AddRange(titleList.ToArray());`
                DataGridView grid = sender as DataGridView;

                grid.Rows[e.RowIndex].Cells[e.ColumnIndex].ContextMenuStrip = contextMenuStrip;
            }
            else
            {
                DataGridView grid = sender as DataGridView;

                if (e.RowIndex < 0 || e.ColumnIndex < 0)
                    return;

                if (grid.Rows[e.RowIndex].Cells[e.ColumnIndex].ContextMenuStrip != null)
                {
                    grid.Rows[e.RowIndex].Cells[e.ColumnIndex].ContextMenuStrip.Visible = false;
                }
            }
        }

        private void datagridview_ClickMenu(object sender, EventArgs e)
        {
            string value = sender.ToString();

            for (int i = 0; i < dataGridView_EventSchedule.SelectedCells.Count; i++)
                dataGridView_EventSchedule.SelectedCells[i].Value = value;            
        }

        bool isChangeUsing = false;

        private void datagridview_changeValue(object sender, DataGridViewCellEventArgs e)
        {
            if (isChangeUsing || isTotalViewer || isSet)
                return;

            DataGridView grid = sender as DataGridView;
            DataGridViewCell cell = grid[e.ColumnIndex, e.RowIndex];

            if (e.ColumnIndex < 1 || e.RowIndex < 0)
                return;

            isChangeUsing = true;

            string sValue = cell.Value != null ? cell.Value.ToString() : string.Empty;

            string serverValue = grid[0, e.RowIndex].Value.ToString();
            string dateValue = grid.Columns[e.ColumnIndex].Name;

            if (currentEventType == -1)
            {
                eventSchedule_[serverValue][currentEventDataType] = sValue;
                isChangeUsing = false;
            }
            else
            {
                string key = $"{serverValue}_{currentEventType}_{currentEventDataType}";
                string addCellKey = $"{currentEventDataType}#{cell.RowIndex}#{cell.ColumnIndex}";

                string beforeValue = eventDataByIndex[key][cell.ColumnIndex];

                if (string.IsNullOrEmpty(sValue))
                {
                    eventDataByIndex[key][cell.ColumnIndex] = string.Empty;

                    if (addCell.ContainsKey(addCellKey))
                        addCell.Remove(addCellKey);

                    if (currentEventDataType == (int)EventScheduleData_.eventType)
                    {
                        string addCellIndexKey = $"{(int)EventScheduleData_.eventIndex}#{cell.RowIndex}#{cell.ColumnIndex}";

                        if (addCell.ContainsKey(addCellIndexKey))
                            addCell.Remove(addCellIndexKey);

                        string indexKey = $"{serverValue}_{currentEventType}_{(int)EventScheduleData_.eventIndex}";
                        string startDateKey = $"{serverValue}_{currentEventType}_{(int)EventScheduleData_.startDate}";
                        string endDateKey = $"{serverValue}_{ currentEventType}_{ (int)EventScheduleData_.endDate}";

                        // 앞뒤 타입 같고 인덱스 같을때 (뒤에놈들 한칸씩 밀어주기)
                        if (beforeValue == eventDataByIndex[key][cell.ColumnIndex - 1] && beforeValue == eventDataByIndex[key][cell.ColumnIndex + 1]) // 이벤트 타입 체크
                        {
                            string beforeIndex = eventDataByIndex[indexKey][cell.ColumnIndex];

                            if (beforeIndex == eventDataByIndex[indexKey][cell.ColumnIndex - 1] && beforeIndex == eventDataByIndex[indexKey][cell.ColumnIndex + 1])
                            {
                                for (int i = 1; i < grid.Columns.Count; i++)
                                {
                                    if (cell.ColumnIndex + i >= eventDataByIndex[indexKey].Count)
                                        break;

                                    if (int.TryParse(eventDataByIndex[indexKey][cell.ColumnIndex + i], out int beforeEventIndex))
                                    {
                                        beforeEventIndex++;
                                        eventDataByIndex[indexKey][cell.ColumnIndex + i] = beforeEventIndex.ToString();
                                    }
                                }
                            }
                        }
                        else
                        {
                            string beforeType = eventDataByIndex[key][cell.ColumnIndex - 1];
                            string afterType = eventDataByIndex[key][cell.ColumnIndex + 1];
                            if (string.IsNullOrEmpty(beforeType) || beforeType != beforeValue)
                            {
                                //for (int i = 1; cell.ColumnIndex - i > 0; i++)
                                //{
                                //    string beforeIndex = eventDataByIndex[indexKey][cell.ColumnIndex - i];

                                //    if (string.IsNullOrEmpty(beforeIndex))
                                //        continue;
                                //}

                                for (int i = 1; cell.ColumnIndex + i < grid.Columns.Count; i++)
                                {
                                    string afterIndex = eventDataByIndex[indexKey][cell.ColumnIndex + i];

                                    if (string.IsNullOrEmpty(afterIndex))
                                        continue;

                                    int.TryParse(afterIndex, out int _afterIndex);
                                    _afterIndex--;
                                    eventDataByIndex[indexKey][cell.ColumnIndex + i] = _afterIndex.ToString();
                                }
                            }
                        }
                       
                        eventDataByIndex[indexKey][cell.ColumnIndex] = string.Empty;
                        eventDataByIndex[startDateKey][cell.ColumnIndex] = string.Empty;
                        eventDataByIndex[endDateKey][cell.ColumnIndex] = string.Empty;
                    }
                }
                else
                {
                    if (lastBtn != null)
                        lastBtn.BackColor = Color.Red;

                    string indexKey = $"{serverValue}_{currentEventType}_{(int)EventScheduleData_.eventIndex}";
                    string startDateKey = $"{serverValue}_{currentEventType}_{(int)EventScheduleData_.startDate}";
                    string endDateKey = $"{serverValue}_{ currentEventType}_{ (int)EventScheduleData_.endDate}";

                    switch (currentEventDataType)
                    {
                        case (int)EventScheduleData_.eventIndex:
                            {
                                // 콘테스트일때만
                                eventDataByIndex[key][cell.ColumnIndex] = sValue;
                                subEventID[serverValue] = int.Parse(sValue);
                            }
                            break;
                        case (int)EventScheduleData_.eventType: // 이벤트 타입(템플릿)
                            {
                                string eventType = sValue.Contains("_") ? sValue.Split('_')[1] : sValue;

                                eventDataByIndex[key][cell.ColumnIndex] = eventType;

                                // 내 앞뒤로 같은 셀이 있는지 체크하기 위한 변수 - -1을 기본값으로 체크
                                int beforeCellIndex = -1;
                                int afterCellIndex = -1;

                                bool isBefore = false; // 이게 True면 beforeCellIndex + 1값을 셋팅 해주면됨 - False면
                                bool isBeforeConsecutive = false; // 연속값이 있어서 앞에꺼를 쓰면 되는지

                                bool isAfter = false;
                                bool isAfterConsecutive = false;

                                // 앞의 값 체크
                                for (int i = 1; i < cell.ColumnIndex - 1; i++)
                                {
                                    if (cell.ColumnIndex - i <= 0)
                                        break;

                                    string beforeEventType = eventDataByIndex[key][cell.ColumnIndex - i].Contains("_") ? eventDataByIndex[key][cell.ColumnIndex - i].Split('_')[1] : eventDataByIndex[key][cell.ColumnIndex - i];

                                    if (string.IsNullOrEmpty(beforeEventType) == false && beforeEventType == eventType) // 값이 잇는곳 까지 찾는다
                                    {
                                        beforeCellIndex = cell.ColumnIndex - i;

                                        if (i == 1)
                                            isBeforeConsecutive = true;
                                    }
                                    else if (string.IsNullOrEmpty(beforeEventType) == false && beforeEventType != eventType)
                                    {
                                        if(!isBeforeConsecutive)
                                            beforeCellIndex = cell.ColumnIndex - i;

                                        isBefore = true;
                                        break;
                                    }
                                    else if (beforeEventType != eventType && isBeforeConsecutive) // NULL이지만 연속됫던 값을 찾음
                                    {
                                        isBefore = true;
                                        break;
                                    }
                                }

                                if (isBefore) 
                                {
                                    string beforeEventIndex = eventDataByIndex[indexKey][beforeCellIndex];

                                    if (isBeforeConsecutive) // 이 경우엔 앞에 같은 타입이 연속으로 있었으니까 앞의 이벤트 Index를 따라감
                                        eventDataByIndex[indexKey][cell.ColumnIndex] = beforeEventIndex;
                                    else
                                        eventDataByIndex[indexKey][cell.ColumnIndex] = (int.Parse(beforeEventIndex) + 1).ToString();
                                }
                                else
                                {
                                    //eventDataByIndex[indexKey][cell.ColumnIndex];
                                }

                                // 뒤의 값 체크
                                for (int i = 1; i < grid.Columns.Count; i++)
                                {
                                    if (cell.ColumnIndex + i >= eventDataByIndex[key].Count)
                                        break;

                                    string afterEventType = eventDataByIndex[key][cell.ColumnIndex + i].Contains("_") ? eventDataByIndex[key][cell.ColumnIndex + i].Split('_')[1] : eventDataByIndex[key][cell.ColumnIndex + i];

                                    if (string.IsNullOrEmpty(afterEventType) == false && afterEventType == eventType) // 값이 잇는곳 까지 찾는다
                                    {
                                        afterCellIndex = cell.ColumnIndex + i;

                                        if (i == 1)
                                            isAfterConsecutive = true;
                                        else
                                        {
                                            isAfter = true;
                                            break;
                                        }
                                    }
                                    else if (string.IsNullOrEmpty(afterEventType) == false && afterEventType != eventType)
                                    {
                                        if (!isAfterConsecutive)
                                            afterCellIndex = cell.ColumnIndex + i;

                                        isAfter = true;
                                        break;
                                    }
                                    else if (afterEventType != eventType && isAfterConsecutive) // NULL이지만 연속됫던 값을 찾음
                                    {
                                        isAfter = true;
                                        break;
                                    }
                                    else if (afterEventType == eventType && isAfterConsecutive == false)
                                    {
                                        afterCellIndex = cell.ColumnIndex + i;
                                        isAfter = true;
                                        break;
                                    }
                                }

                                bool isUp = false;
                                bool isDown = false;

                                int changeValue = 0;

                                if (isAfter)
                                {
                                    if (isAfterConsecutive)
                                    {
                                        string afterIndex = eventDataByIndex[indexKey][afterCellIndex];

                                        if (eventDataByIndex[indexKey][cell.ColumnIndex] != afterIndex)
                                        {
                                            int _afterIndex = int.Parse(afterIndex);
                                            int _eventIndex = int.Parse(eventDataByIndex[indexKey][cell.ColumnIndex]);

                                            if (_afterIndex > _eventIndex)
                                            {
                                                changeValue = _afterIndex - _eventIndex;
                                                isDown = true;
                                            }
                                            else if (_afterIndex < _eventIndex)
                                            {
                                                changeValue = _eventIndex - _afterIndex;
                                                isUp = true;
                                            }
                                        }
                                        else
                                        {
                                            isUp = true;
                                        }
                                    }
                                    else
                                    {
                                        string afterIndex = eventDataByIndex[indexKey][afterCellIndex];

                                        if (eventDataByIndex[indexKey][cell.ColumnIndex] == afterIndex)
                                        {
                                            int _afterIndex = int.Parse(afterIndex);
                                            int _eventIndex = int.Parse(eventDataByIndex[indexKey][cell.ColumnIndex]);

                                            if (_afterIndex > _eventIndex)
                                            {
                                                changeValue = _afterIndex - _eventIndex;
                                                isDown = true;
                                            }
                                            else if (_afterIndex < _eventIndex)
                                            {
                                                changeValue = _eventIndex - _afterIndex;
                                                isUp = true;
                                            }
                                            else
                                            {
                                                changeValue = 1;
                                                isUp = true;
                                            }
                                        }
                                        else
                                        {
                                            int _afterIndex = int.Parse(afterIndex);
                                            int _eventIndex = int.Parse(eventDataByIndex[indexKey][cell.ColumnIndex]);

                                            if (_afterIndex - _eventIndex != 1)
                                            {
                                                if (_afterIndex > _eventIndex)
                                                {
                                                    changeValue = _afterIndex - _eventIndex;
                                                    isDown = true;
                                                }
                                                else if (_afterIndex < _eventIndex)
                                                {
                                                    changeValue = _eventIndex - _afterIndex;
                                                    isUp = true;
                                                }
                                                changeValue++;
                                            }
                                        }
                                    }

                                    if (isUp || isDown)
                                    {
                                        for (int i = 1; i < grid.Columns.Count; i++)
                                        {
                                            if (cell.ColumnIndex + i >= eventDataByIndex[indexKey].Count)
                                                break;

                                            string afterIndex = eventDataByIndex[indexKey][cell.ColumnIndex + i];

                                            if (string.IsNullOrEmpty(afterIndex))
                                                continue;

                                            int.TryParse(afterIndex, out int _afterIndex);

                                            if (isUp)
                                                _afterIndex += changeValue;
                                            else if (isDown)
                                                _afterIndex -= changeValue;

                                            eventDataByIndex[indexKey][cell.ColumnIndex + i] = _afterIndex.ToString();
                                        }
                                    }
                                }

                                eventDataByIndex[startDateKey][cell.ColumnIndex] = grid.Columns[cell.ColumnIndex].Name;
                                eventDataByIndex[endDateKey][cell.ColumnIndex] = grid.Columns[cell.ColumnIndex].Name;
                                
                                if (currentEventType > 1)
                                {
                                    string tempKey = string.Format("{0}_{1}_{2}", serverValue, currentEventType, (int)EventScheduleSubData_.temp);
                                    eventDataByIndex[tempKey][cell.ColumnIndex] = "0";
                                }
                            }
                                break;
                        case (int)EventScheduleData_.uniqueIndex: // 유니크 인덱스
                            {
                                if (string.IsNullOrEmpty(beforeValue))
                                {
                                    if (addCell.ContainsKey(addCellKey) == false)
                                        addCell.Add(addCellKey, 0);
                                }

                                if (sValue.Contains("_") == false)
                                {
                                    string currentEventTypeData = currentEventType != 0 ? currentEventType.ToString() : "Contest";
                                    if (sValue == "0")
                                        cell.Value = $"{dateValue}_{currentEventTypeData}_server{serverValue}";
                                    else
                                        cell.Value = $"{dateValue}_{currentEventTypeData}_{sValue}";
                                }

                                eventDataByIndex[key][cell.ColumnIndex] = cell.Value.ToString();

                            }
                            break;
                        case (int)EventScheduleData_.totalEventUniqueIndex1:
                        case (int)EventScheduleData_.totalEventUniqueIndex2:
                        case (int)EventScheduleData_.totalEventUniqueIndex3:
                        case (int)EventScheduleData_.totalEventUniqueIndex4:
                        case (int)EventScheduleData_.totalEventUniqueIndex5:
                            {
                                if (string.IsNullOrEmpty(beforeValue))
                                {
                                    if (addCell.ContainsKey(addCellKey) == false)
                                        addCell.Add(addCellKey, 0);
                                }

                                if (sValue != "0" && sValue.Contains("_") == false)
                                {
                                    string enumName = Enum.GetName(typeof(EventScheduleData_), currentEventDataType);

                                    char totalIndex = enumName[enumName.Length - 1];

                                    cell.Value = $"{dateValue}_{totalIndex}_total_{sValue}";
                                    string totalEventIndexKey = $"{serverValue}_{currentEventType}_{currentEventDataType - 2}";
                                    eventDataByIndex[totalEventIndexKey][cell.ColumnIndex] = sValue;
                                }
                                else if (sValue.Contains("_"))
                                {
                                    string[] values = sValue.Split('_');
                                    string totalEventIndexKey = $"{serverValue}_{currentEventType}_{currentEventDataType - 2}";
                                    eventDataByIndex[totalEventIndexKey][cell.ColumnIndex] = values[values.Length - 1];
                                }
                                else if (sValue == "0")
                                {
                                    string totalEventIndexKey = $"{serverValue}_{currentEventType}_{currentEventDataType - 2}";
                                    eventDataByIndex[totalEventIndexKey][cell.ColumnIndex] = sValue;
                                }

                                eventDataByIndex[key][cell.ColumnIndex] = cell.Value.ToString();
                            }
                            break;
                        case (int)EventScheduleData_.totalEventReward:
                        case (int)EventScheduleData_.totalEventReward2:
                        case (int)EventScheduleData_.totalEventReward3:
                        case (int)EventScheduleData_.totalEventReward4:
                        case (int)EventScheduleData_.totalEventReward5:
                            {
                                if (int.TryParse(sValue, out int iValue)) // 숫자
                                {
                                    if (string.IsNullOrEmpty(beforeValue))
                                    {
                                        if (addCell.ContainsKey(addCellKey) == false)
                                            addCell.Add(addCellKey, 0);
                                    }

                                    eventDataByIndex[key][cell.ColumnIndex] = sValue;


                                    if (totalRewardDic.ContainsKey(sValue))
                                        cell.Value = totalRewardDic[sValue];
                                }
                                else
                                {
                                    if (totalRewardDic.ContainsKey(sValue))
                                    {
                                        if (string.IsNullOrEmpty(beforeValue))
                                        {
                                            if (addCell.ContainsKey(addCellKey) == false)
                                                addCell.Add(addCellKey, 0);
                                        }

                                        string totalRewardIndex = totalRewardDic.ContainsKey(sValue) ? totalRewardDic[sValue] : string.Empty;

                                        if (string.IsNullOrEmpty(totalRewardIndex) == false)
                                            eventDataByIndex[key][cell.ColumnIndex] = totalRewardIndex;
                                    }
                                }
                            }
                            break;
                        default:
                            {
                                if (string.IsNullOrEmpty(beforeValue))
                                {
                                    if (addCell.ContainsKey(addCellKey) == false)
                                        addCell.Add(addCellKey, 0);
                                }

                                eventDataByIndex[key][cell.ColumnIndex] = sValue;
                            }
                            break;
                    }
                }

                if (addCell.ContainsKey(addCellKey))
                    cell.Style.BackColor = Color.Red;
                else
                    cell.Style.BackColor = eventColor.ContainsKey(sValue) ? eventColor[sValue] : Color.White;

                isChangeUsing = false;
            }
        }

        private void datagridview_AddRows(object sender, DataGridViewRowsAddedEventArgs e)
        {
            DataGridView grid = sender as DataGridView;

            for (int i = 0; i < grid.Rows[e.RowIndex].Cells.Count; i++)
            {
                string value = grid.Rows[e.RowIndex].Cells[i].Value.ToString();

                int.TryParse(value, out int _value);
                grid.Rows[e.RowIndex].Cells[i].Style.BackColor = Color.FromArgb(3 * (_value % 3), 3 * (_value % 3), 3 * (_value % 3));
            }
        }

        private void bt_Reward_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.reward);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_GuildReward_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.guildReward);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_Shop_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.shop);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_LimiteReward_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.limiteReward);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_EventType_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.eventType);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void label91_Click_2(object sender, EventArgs e)
        {

        }

        private void label91_Click(object sender, EventArgs e)
        {

        }

        private void label92_Click(object sender, EventArgs e)
        {

        }

        private void lb_EventSchedule_EndDate_Click(object sender, EventArgs e)
        {

        }

        private void textBox4_TextChanged_1(object sender, EventArgs e)
        {

        }

        private void bt_dayCharge_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.dayCharge);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_ServerEventIndex_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.uniqueIndex);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventIndex1_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventUniqueIndex1);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventReward1_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventReward);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void eventScheduel_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button != MouseButtons.Right)
                return;

            Button button = sender as Button;
            
            if (button == this.bt_TotalEventIndex1)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventUniqueIndex1, button.Text);

            if (button == this.bt_TotalEventIndex2)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventUniqueIndex2, button.Text);

            if (button == this.bt_TotalEventIndex3)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventUniqueIndex3, button.Text);

            if (button == this.bt_TotalEventIndex4)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventUniqueIndex4, button.Text);

            if (button == this.bt_TotalEventIndex5)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventUniqueIndex5, button.Text);

            if (button == this.bt_TotalEventReward1)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventReward, button.Text);

            if (button == this.bt_TotalEventReward2)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventReward2, button.Text);

            if (button == this.bt_TotalEventReward3)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventReward3, button.Text);

            if (button == this.bt_TotalEventReward4)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventReward4, button.Text);

            if (button == this.bt_TotalEventReward5)
                SetEventScheduleDataPopup((int)EventScheduleData_.totalEventReward5, button.Text);

            if (button == this.bt_dayCharge)
                SetEventScheduleDataPopup((int)EventScheduleData_.dayCharge, button.Text);

            if (button == this.bt_weekCharge)
                SetEventScheduleDataPopup((int)EventScheduleData_.weekCharge, button.Text);

            if (button == this.bt_EventScheduleIndex)
                SetEventScheduleDataPopup((int)EventScheduleData_.eventIndex, button.Text);

            if (button == this.bt_EventType)
                SetEventScheduleDataPopup((int)EventScheduleData_.eventType, button.Text);

            if (button == this.bt_ServerEventIndex)
                SetEventScheduleDataPopup((int)EventScheduleData_.uniqueIndex);

            if (button == this.bt_Reward)
                SetEventScheduleDataPopup((int)EventScheduleData_.reward);

            if (button == this.bt_GuildReward)
                SetEventScheduleDataPopup((int)EventScheduleData_.guildReward);

            if (button == this.bt_Shop)
                SetEventScheduleDataPopup((int)EventScheduleData_.shop);

            if (button == this.bt_LimiteReward)
                SetEventScheduleDataPopup((int)EventScheduleData_.limiteReward);
        }

        private void lv_ServerMonthData_Click(object sender, EventArgs e)
        {

        }

        private void lb_SaveEventSchedule_StartDate_Click(object sender, EventArgs e)
        {

        }

        private void bt_SaveEventSchedule_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_EventSchedule_StartServer.Text, out int startServer) && int.TryParse(tb_EventSchedule_EndServer.Text, out int endServer))
            {
                if (DateTime.TryParseExact(tb_SaveEventData_StartDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime startDate) == false ||
                DateTime.TryParseExact(tb_SaveEventData_EndDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime endDate) == false)
                {
                    if (currentEventType != -1)
                    {
                        MessageBox.Show("날짜형식 또는 서버 값이 틀렸습니다!");
                        return;
                    }

                    startDate = DateTime.Now;
                    endDate = DateTime.Now;
                }

                if (startDate.CompareTo(endDate) > 0)
                {
                    if (currentEventType != -1)
                    {
                        MessageBox.Show("시작날짜가 끝날짜보다 작아야 합니다.");
                        return;
                    }
                }

                if (startDate.CompareTo(DateTime.Today) == 0 || startDate.CompareTo(DateTime.Today) < 0)
                {
                    string pw = string.Empty;
                    if (InputBox("날짜 체크", "금일 날짜가 포함되어있습니다. 저장 하시겠습니까?", ref pw) == DialogResult.OK)
                    {
                        if (pw != "")
                        {
                            MessageBox.Show("암호가 틀렷습니다.");
                        }
                    }
                    else
                    {
                        MessageBox.Show("데이터 저장 취소");
                        return;
                    }
                }

                int startColumnIndex = (startDate - DateTime.Today).Days + 1 + dayGap;
                int endColumnIndex = startColumnIndex + (endDate - startDate).Days;

                int.TryParse(tb_EventSchedule_StartServer.Text, out int startServerIndex);
                int.TryParse(tb_EventSchedule_EndServer.Text, out int endServerIndex);

                Dictionary<string, List<string>> eventScheduleDataDic = new Dictionary<string, List<string>>();
                List<string> addCellKeyList = new List<string>();

                List<string> checkServer = new List<string>();

                for (int j = 0; j < combineServerList.Count; j++)
                {
                    string serverIndex = combineServerList[j];
                    int.TryParse(serverIndex, out int _serverIndex);

                    if (_serverIndex < startServerIndex || _serverIndex > endServerIndex)
                        continue;

                    if (string.IsNullOrEmpty(serverIndex))
                        continue;

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        serverIndex = "2";

                    string lastEventIndex = "";
                    bool isCheck = false;

                    if (currentEventType == -1) // 친밀도  데이터
                    {
                        string[] datas = eventSchedule_.ContainsKey(serverIndex) ? eventSchedule_[serverIndex] : new string[1];

                        if (datas.Length < 4)
                            continue;

                        string data = string.Join(",", datas);
                        if (eventScheduleDataDic.ContainsKey(serverIndex) == false)
                        {
                            List<string> list = new List<string>();
                            list.Add(data);
                            eventScheduleDataDic.Add(serverIndex, list);
                        }
                    }
                    else
                    {
                        for (int cIndex = startColumnIndex; cIndex <= endColumnIndex; cIndex++) // 날짜
                        {
                            string sendData = "";
                            List<string> eventDatas = new List<string>();
                            string date = dataGridView_EventSchedule.Columns[cIndex].Name;

                            for (int i = 0; i < (int)EventScheduleData_.max; i++) // 이벤트 데이터 순서
                            {
                                if (currentEventType != 1 && currentEventType != 0 && i >= (int)EventScheduleSubData_.max)
                                    break;

                                if (currentEventType != 1 && i >= (int)ContestData_.max)
                                    continue;

                                

                                string key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, i);
                                string data = eventDataByIndex[key][cIndex];

                                if (currentEventType == 0 && i == (int)ContestData_.temp)
                                    continue;

                                if (i == (int)EventScheduleData_.eventIndex)
                                {
                                    if (checkServer.Contains($"{serverIndex}#{data}"))
                                        break;
                                    else
                                    {
                                        checkServer.Add($"{serverIndex}#{data}");

                                        string startDateKey = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, (int)EventScheduleData_.startDate);
                                        string endDateKey = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, (int)EventScheduleData_.endDate);

                                        eventDataByIndex[startDateKey][cIndex] = dataGridView_EventSchedule.Columns[cIndex].Name;
                                        eventDataByIndex[endDateKey][cIndex] = dataGridView_EventSchedule.Columns[cIndex].Name;

                                        for (int k = 1; k + cIndex < dataGridView_EventSchedule.Columns.Count; k++)
                                        {
                                            if (data != eventDataByIndex[key][cIndex + k])
                                                break;
                                            else
                                                eventDataByIndex[endDateKey][cIndex] = dataGridView_EventSchedule.Columns[cIndex + k].Name;

                                        }
                                    }
                                }

                                if (currentEventType == 0)
                                {
                                    if (i == (int)EventScheduleData_.startDate)
                                    {
                                        if (DateTime.TryParseExact(data, "yyyy-MM-dd HH:mm:ss", null, DateTimeStyles.None, out DateTime startDateData) == false)
                                            data += " 00:00:00";
                                    }

                                    if (i == (int)EventScheduleData_.endDate)
                                    {
                                        if (DateTime.TryParseExact(data, "yyyy-MM-dd HH:mm:ss", null, DateTimeStyles.None, out DateTime endDateData) == false)
                                            data += " 23:00:00";
                                    }
                                }

                                if (string.IsNullOrEmpty(data) && i != (int)EventScheduleData_.totalEventUniqueIndex1 && i != (int)EventScheduleData_.totalEventUniqueIndex2 &&
                                    i != (int)EventScheduleData_.totalEventUniqueIndex3 && i != (int)EventScheduleData_.totalEventUniqueIndex4 && i != (int)EventScheduleData_.totalEventUniqueIndex5)
                                {
                                    if (i == (int)EventScheduleData_.hotPoint)
                                    {
                                        data = "1";
                                        eventDatas.Add(data);
                                    }
                                    else
                                    {
                                        string enumName = Enum.GetName(typeof(EventScheduleData_), i);
                                        MessageBox.Show($"{serverIndex}서버 {date} {enumName}이 비었습니다!!");
                                        return;
                                    }
                                }
                                else
                                {
                                    eventDatas.Add(data);

                                    int rowIndex = int.Parse(serverIndex) < 101 ? (int.Parse(serverIndex) / 5) - 1 : (int.Parse(serverIndex) % 5) + 19;
                                    string addCellKey = i + "#" + rowIndex.ToString() + "#" + cIndex;
                                    addCellKeyList.Add(addCellKey);
                                }
                            }

                            if (isCheck)
                                continue;

                            if (currentEventType == 1 && eventDatas.Count < (int)EventScheduleData_.max)
                                continue;

                            if (currentEventDataType > 1 && eventDatas.Count < (int)EventScheduleSubData_.max)
                                continue;

                            sendData = string.Join(",", eventDatas);
                            sendData += ",";

                            if (eventScheduleDataDic.ContainsKey(serverIndex.ToString()))
                                eventScheduleDataDic[serverIndex.ToString()].Add(sendData);
                            else
                            {
                                List<string> list = new List<string>();
                                list.Add(sendData);
                                eventScheduleDataDic.Add(serverIndex.ToString(), list);
                            }
                        }
                    }

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        break;
                }

                string checkDate = DateTime.Now.ToString("yyyy-MM-dd");

                if (MessageBox.Show("저장하기", "이벤트 데이터 확인", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) != DialogResult.OK)
                {
                    MessageBox.Show("이벤트 저장 취소");
                    return;
                }


                foreach (var eventData in eventScheduleDataDic)
                {
                    foreach (var data in eventData.Value)
                    {
                        //if (data.Contains(checkDate))
                        //{
                        //    string[] datas = data.Split(',');
                        //    if (datas[(int)EventScheduleData_.startDate].Contains(checkDate) || datas[(int)EventScheduleData_.endDate].Contains(checkDate) || datas[(int)EventScheduleData_.uniqueIndex].Contains(checkDate))
                        //    {
                        //        MessageBox.Show("오늘 날짜가 들어간 데이터가 있음!!");
                        //        return;
                        //    }
                        //}

                        string serverIndex = eventData.Key;

                        if (string.IsNullOrEmpty(serverIndex))
                            continue;

                        string result = requestsuperorangetotal(30, serverIndex, currentEventType.ToString(), data, "0");

                        if (result.Contains("Fail"))
                        {
                            string failType = result.Split(':')[1];
                            switch (failType)
                            {
                                case "0":
                                    {
                                        string[] datas = data.Split(',');
                                        string desc = datas[(int)EventScheduleData_.eventIndex] + "의 이전 ID 가 없습니다";
                                        MessageBox.Show(desc);
                                        return;
                                    }
                            }
                        }
                        else if (result.Contains("Check"))
                        {
                            if (MessageBox.Show(result + "\n 데이터를 덮어씌우겠습니까?", "이벤트 ID 중복", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.OK)
                                requestsuperorangetotal(30, serverIndex, currentEventType.ToString(), data, "1");
                            else
                            {
                                MessageBox.Show("이벤트 저장을 중지합니다.");
                                return;
                            }
                        }
                        else if (result.Contains("Success"))
                        {
                        }
                    }

                    if (ConnectState == ServerState.Beta)
                        return;
                }

                MessageBox.Show("Success");

                for (int i = 0; i < addCellKeyList.Count; i++)
                {
                    if (addCell.ContainsKey(addCellKeyList[i]))
                        addCell.Remove(addCellKeyList[i]);
                }

                dataGridView_EventSchedule.Update();

                bt_EventScheduleIndex.BackColor = Color.Transparent;
                bt_EventType.BackColor = Color.Transparent;
                bt_ServerEventIndex.BackColor = Color.Transparent;
                bt_weekCharge.BackColor = Color.Transparent;
                bt_dayCharge.BackColor = Color.Transparent;
                bt_Reward.BackColor = Color.Transparent;
                bt_GuildReward.BackColor = Color.Transparent;
                bt_Shop.BackColor = Color.Transparent;
                bt_LimiteReward.BackColor = Color.Transparent;
                bt_TotalEventIndex1.BackColor = Color.Transparent;
                bt_TotalEventIndex2.BackColor = Color.Transparent;
                bt_TotalEventIndex3.BackColor = Color.Transparent;
                bt_TotalEventIndex4.BackColor = Color.Transparent;
                bt_TotalEventIndex5.BackColor = Color.Transparent;
                bt_TotalEventReward1.BackColor = Color.Transparent;
                bt_TotalEventReward2.BackColor = Color.Transparent;
                bt_TotalEventReward3.BackColor = Color.Transparent;
                bt_TotalEventReward4.BackColor = Color.Transparent;
                bt_TotalEventReward5.BackColor = Color.Transparent;
            }
        }

        Button lastBtn = null;

        private void bt_EventScheduleIndex_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.eventIndex);
            lb_CurrentEventDataType.Text = lastBtn.Text;
        }

        private void label94_Click(object sender, EventArgs e)
        {

        }

        private void listView_TotalBilling_Info_CellContentClick_1(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void lb_userRanking_Click(object sender, EventArgs e)
        {

        }

        private void tb_userRanking_TextChanged_2(object sender, EventArgs e)
        {

        }

        private void bt_userRanking_Click(object sender, EventArgs e)
        {
            string maxValue = tb_userRanking.Text;
            string serverIndex = tb_server_number.Text;

            if (string.IsNullOrEmpty(maxValue))
            {
                maxValue = "10";
                tb_userRanking.Text = maxValue;
            }

            if (string.IsNullOrEmpty(serverIndex))
            {
                serverIndex = "1";
                tb_server_number.Text = serverIndex;
            }

            string retData = requestsuperorangetotal(29, serverIndex, maxValue, "0");

            int x = 50;
            int y = 50;

            int left = 100;
            int ygap = 20;

            string[] getdatas = retData.Split('|');
            for (int i = 0; i < panel_server_ranker.Controls.Count;)
                panel_server_ranker.Controls.Remove((Control)panel_server_ranker.Controls[i]);


            for (int i = 0; i < getdatas.Length - 1; i++)
            {
                string[] userdata = getdatas[i].Split('#');

                int vippoint = int.Parse(userdata[(int)rankerdata_.viptotalcrystal]) / 100;
                int viptotalgrade = int.Parse(userdata[(int)rankerdata_.viptotalgrade]);
                string hp = ((double)((int)(double.Parse(userdata[(int)rankerdata_.hp]) / 10000)) / 10000).ToString();
                string point = userdata[(int)rankerdata_.point];
                string point1 = userdata[(int)rankerdata_.point1];
                string lastconnecttime = userdata[(int)rankerdata_.lastconnecttime];

                string textdata = userdata[(int)rankerdata_.nickname] + " \n " + hp + " [" + viptotalgrade + "]" + vippoint;
                //string textdata2 = hp + " " + "[" + viptotalgrade + "]" + vippoint;

                createtext(0, (y + ygap) * i, 150, textdata, (Control)panel_server_ranker);

                var ts = DateTime.Now - DateTime.Parse(lastconnecttime);

                string timedesc = "";
                if (ts.Days > 0)
                    timedesc = ts.Days + "일전";
                else if (ts.Hours > 0)
                    timedesc = ts.Hours + "시간전";
                else if (ts.Minutes > 0)
                    timedesc = ts.Minutes + "분전";
                else
                    timedesc = ts.Seconds + "초전";

                createtext(0, (y + ygap) * i + 30, left, timedesc, (Control)panel_server_ranker);

                if (userdata[(int)rankerdata_.itemid1].Length > 0)
                {
                    createpicturebox(left + x * 1, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid1]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_server_ranker);
                    createtext(left + x * 1 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel1], (Control)panel_server_ranker);
                }
                if (userdata[(int)rankerdata_.itemid2].Length > 0)
                {
                    createpicturebox(left + x * 2, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid2]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_server_ranker);
                    createtext(left + x * 2 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel2], (Control)panel_server_ranker);
                }

                if (userdata[(int)rankerdata_.itemid3].Length > 0)
                {
                    createpicturebox(left + x * 3, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid3]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_server_ranker);
                    createtext(left + x * 3 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel3], (Control)panel_server_ranker);
                }

                if (userdata[(int)rankerdata_.itemid4].Length > 0)
                {
                    createpicturebox(left + x * 4, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid4]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_server_ranker);
                    createtext(left + x * 4 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel4], (Control)panel_server_ranker);
                }

                if (userdata[(int)rankerdata_.itemid5].Length > 0)
                {
                    createpicturebox(left + x * 5, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid5]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_server_ranker);
                    createtext(left + x * 5 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel5], (Control)panel_server_ranker);
                }

                if (userdata[(int)rankerdata_.itemid6].Length > 0)
                {
                    createpicturebox(left + x * 6, (y + ygap) * i, x, y, itemtemplate[int.Parse(userdata[(int)rankerdata_.itemid6]), (int)itemTemplate_.profile_src], tb_ranker_itempath.Text, (Control)panel_server_ranker);
                    createtext(left + x * 6 + x / 2, (y + ygap) * i + y, 20, userdata[(int)rankerdata_.itemlevel6], (Control)panel_server_ranker);
                }


                string tid1 = userdata[(int)rankerdata_.tid1];
                string tid2 = userdata[(int)rankerdata_.tid2];
                string tid3 = userdata[(int)rankerdata_.tid3];

                string checkid1 = "";
                string checkid2 = "";
                string checkid3 = "";

                if (tid1.Length > 0)
                    checkid1 = sometemplate[int.Parse(tid1), (int)someTemplate_.mainID];
                if (tid2.Length > 0)
                    checkid2 = sometemplate[int.Parse(tid2), (int)someTemplate_.mainID];
                if (tid3.Length > 0)
                    checkid3 = sometemplate[int.Parse(tid3), (int)someTemplate_.mainID];

                string real1 = checkid1 == "0" ? tid1 : checkid1;
                string real2 = checkid2 == "0" ? tid2 : checkid2;
                string real3 = checkid3 == "0" ? tid3 : checkid3;

                if (tid1.Length > 0 && real1.Length > 0)
                {
                    var pic = createpicturebox(left + x * 7, (y + ygap) * i, x, y, "_" + real1 + "\\" + sometemplate[int.Parse(tid1), (int)someTemplate_.profile_src], tb_ranker_path.Text, (Control)panel_server_ranker);
                    var labeltext = createtext(left + x * 7, (y + ygap) * i + y, 40, userdata[(int)rankerdata_.skillfriendship1], (Control)panel_server_ranker);

                    string tooltiptext = getAccessorytextdata(userdata[(int)rankerdata_.accdata1]);
                    CreateTooltip(pic, tooltiptext.Length > 0 ? tooltiptext : "없음");
                    labeltext.ForeColor = getaccessorytopColor(userdata[(int)rankerdata_.accdata1]);

                }
                if (tid2.Length > 0 && real2.Length > 0)
                {
                    var pic = createpicturebox(left + x * 8, (y + ygap) * i, x, y, "_" + real2 + "\\" + sometemplate[int.Parse(tid2), (int)someTemplate_.profile_src], tb_ranker_path.Text, (Control)panel_server_ranker);
                    var labeltext = createtext(left + x * 8, (y + ygap) * i + y, 40, userdata[(int)rankerdata_.skillfriendship2], (Control)panel_server_ranker);

                    string tooltiptext = getAccessorytextdata(userdata[(int)rankerdata_.accdata2]);
                    CreateTooltip(pic, tooltiptext.Length > 0 ? tooltiptext : "없음");
                    labeltext.ForeColor = getaccessorytopColor(userdata[(int)rankerdata_.accdata2]);
                }
                if (tid3.Length > 0 && real3.Length > 0)
                {
                    var pic = createpicturebox(left + x * 9, (y + ygap) * i, x, y, "_" + real3 + "\\" + sometemplate[int.Parse(tid3), (int)someTemplate_.profile_src], tb_ranker_path.Text, (Control)panel_server_ranker);
                    var labeltext = createtext(left + x * 9, (y + ygap) * i + y, 40, userdata[(int)rankerdata_.skillfriendship3], (Control)panel_server_ranker);

                    string tooltiptext = getAccessorytextdata(userdata[(int)rankerdata_.accdata3]);
                    CreateTooltip(pic, tooltiptext.Length > 0 ? tooltiptext : "없음");
                    labeltext.ForeColor = getaccessorytopColor(userdata[(int)rankerdata_.accdata3]);
                }
            }
        }

        private void bt_LoadServerBillUserList_Click(object sender, EventArgs e)
        {
            string serverIndex = tb_server_number.Text;

            if (string.IsNullOrEmpty(serverIndex))
            {
                serverIndex = "1";
                tb_server_number.Text = serverIndex;
            }

            string retData = requestsuperorangetotal(29, serverIndex, "", "1");

            string[] userDatas = retData.Split('&');

            lv_server_billuserlist.Rows.Clear();
            lv_server_billuserlist.Columns.Clear();
            lv_server_billuserlist.Columns.Add("0", "id");
            lv_server_billuserlist.Columns.Add("0", "billing");
            lv_server_billuserlist.Columns.Add("0", "billtotal");

            for(int i = 0; i < userDatas.Length; i++)
            {
                string[] datas = userDatas[i].Split('#');

                if (datas.Length < 3)
                    continue;

                lv_server_billuserlist.Rows.Add(datas[0], int.Parse(datas[1]).ToString("N0"), int.Parse(datas[2]).ToString("N0"));
            }
        }

        private void lv_server_billuserlist_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void bt_PackageStartDate_Up_Click(object sender, EventArgs e)
        {
            if (DateTime.TryParseExact(tb_TotalBilling_StartDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime date))
            {
                date = date.AddDays(1);
                tb_TotalBilling_StartDate.Text = date.ToString("yyyy-MM-dd");
            }
            else
            {
                tb_TotalBilling_StartDate.Text = DateTime.Now.ToString("yyyy-MM-dd");
            }
        }

        private void bt_PackageStartDate_Down_Click(object sender, EventArgs e)
        {
            if (DateTime.TryParseExact(tb_TotalBilling_StartDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime date))
            {
                date = date.AddDays(-1);
                tb_TotalBilling_StartDate.Text = date.ToString("yyyy-MM-dd");
            }
            else
            {
                tb_TotalBilling_StartDate.Text = DateTime.Now.ToString("yyyy-MM-dd");
            }

        }

        private void bt_PackageEndDate_Up_Click(object sender, EventArgs e)
        {
            if (DateTime.TryParseExact(tb_TotalBilling_EndDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime date))
            {
                date = date.AddDays(1);
                tb_TotalBilling_EndDate.Text = date.ToString("yyyy-MM-dd");
            }
            else
            {
                tb_TotalBilling_EndDate.Text = DateTime.Now.ToString("yyyy-MM-dd");
            }
        }

        private void bt_PackageEndDate_Down_Click(object sender, EventArgs e)
        {
            if (DateTime.TryParseExact(tb_TotalBilling_EndDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime date))
            {
                date = date.AddDays(-1);
                tb_TotalBilling_EndDate.Text = date.ToString("yyyy-MM-dd");
            }
            else
            {
                tb_TotalBilling_EndDate.Text = DateTime.Now.ToString("yyyy-MM-dd");
            }
        }

        private void bt_serverIndex_Up_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_server_number.Text, out int serverIndex))
            {
                if (serverIndex <= 100)
                {
                    if (serverIndex + 5 > 101)
                        serverIndex = 101;
                    else
                        serverIndex += 5;
                }
                else
                    serverIndex += 1;
                tb_server_number.Text = serverIndex.ToString();
            }
            else
            {
                tb_server_number.Text = "1";
            }
        }

        private void bt_serverIndex_Down_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_server_number.Text, out int serverIndex))
            {
                if (serverIndex <= 100)
                {
                    if (serverIndex - 5 < 0)
                        serverIndex = 1;
                    else
                        serverIndex -= 5;
                }
                else
                    serverIndex -= 1;

                if (serverIndex <= 0)
                    serverIndex = 1;

                tb_server_number.Text = serverIndex.ToString();
            }
            else
            {
                tb_server_number.Text = "1";
            }
        }

        private void bt_PackageStartServer_Up_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_TotalBilling_StartServer.Text, out int serverIndex))
            {
                if (serverIndex + 1 > 20 && serverIndex + 1 < 101)
                    serverIndex = 101;
                else
                    serverIndex += 1;

                tb_TotalBilling_StartServer.Text = serverIndex.ToString();
            }
            else
            {
                tb_TotalBilling_StartServer.Text = "1";
            }
        }

        private void bt_PackageStartServer_Down_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_TotalBilling_StartServer.Text, out int serverIndex))
            {
                if (serverIndex - 1 < 100 && serverIndex - 1 > 20)
                    serverIndex = 20;
                else
                    serverIndex -= 1;

                if (serverIndex <= 0)
                    serverIndex = 1;

                tb_TotalBilling_StartServer.Text = serverIndex.ToString();
            }
            else
            {
                tb_TotalBilling_StartServer.Text = "1";
            }
        }

        private void bt_PackageEndServer_Up_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_TotalBilling_EndServer.Text, out int serverIndex))
            {
                if (serverIndex + 1 > 20 && serverIndex + 1 < 101)
                    serverIndex = 101;
                else
                    serverIndex += 1;

                tb_TotalBilling_EndServer.Text = serverIndex.ToString();
            }
            else
            {
                tb_TotalBilling_EndServer.Text = "1";
            }
        }

        private void bt_PackageEndServer_Down_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_TotalBilling_EndServer.Text, out int serverIndex))
            {
                if (serverIndex - 1 < 100 && serverIndex - 1 > 20)
                    serverIndex = 20;
                else
                    serverIndex -= 1;

                if (serverIndex <= 0)
                    serverIndex = 1;

                tb_TotalBilling_EndServer.Text = serverIndex.ToString();
            }
            else
            {
                tb_TotalBilling_EndServer.Text = "1";
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {

        }

        private void lb_TotalServerInfo_Click(object sender, EventArgs e)
        {

        }

        private void lb_TotalStartServer_Click(object sender, EventArgs e)
        {

        }

        private void lb_TotalEndServer_Click(object sender, EventArgs e)
        {

        }

        private void button5_Click_1(object sender, EventArgs e)
        {
            string startServer = tb_TotalStartServer.Text;
            string endServer = tb_TotalEndServer.Text;

            if (string.IsNullOrEmpty(startServer))
            {
                startServer = "1";
                tb_TotalStartServer.Text = startServer;
            }

            if (string.IsNullOrEmpty(endServer))
            {
                endServer = requestsuperorangetotal(10, "6", "0");
                tb_TotalEndServer.Text = endServer;
            }

            int.TryParse(startServer, out int _startServer);
            int.TryParse(endServer, out int _endServer);

            for (int serverIndex = _startServer; serverIndex <= _endServer; serverIndex++)
            {
                if (serverIndex < 101)
                {
                    if (serverIndex % 5 != 0)
                        continue;
                }

                string retData = requestsuperorangetotal(29, serverIndex.ToString(), "", "2");

                if (string.IsNullOrEmpty(retData))
                    continue;

                if (totalServerInfoDic.ContainsKey(serverIndex.ToString()) == false)
                    totalServerInfoDic.Add(serverIndex.ToString(), retData);

                tb_temp.Text += serverIndex + ",";
            }

            dgv_TotalServerInfo.Columns.Clear();
            dgv_TotalServerInfo.Rows.Clear();

            dgv_TotalServerInfo.Columns.Add("0", "서버/순위");
            dgv_TotalServerInfo.Columns.Add("1", "서버인원/닉네임");
            dgv_TotalServerInfo.Columns.Add("2", "전투력");

            foreach(var data in totalServerInfoDic)
            {
                string[] datas = data.Value.Split('&');

                string[] userDatas = datas[3].Split('*');

                dgv_TotalServerInfo.Rows.Add(datas[0], datas[1], datas[2]);

                for (int i= 0; i < userDatas.Length; i++)
                {
                    string[] userData = userDatas[i].Split('#');
                    dgv_TotalServerInfo.Rows.Add(userData[0], userData[1]);
                }
            }

            string frontServerBillingData = requestsuperorangetotal(29, "95", "", "3");
            string backServerBillingData = requestsuperorangetotal(29, "101", "", "3");

            string[] frontServerBillingDatas = frontServerBillingData.Split('&');
            string[] backServerBillingDatas = backServerBillingData.Split('&');

            for (int i = 0; i < frontServerBillingDatas.Length; i++)
            {
                string[] datas = frontServerBillingDatas[i].Split('-');

                int.TryParse(datas[0], out int server);

                if (server > 20)
                    continue;

                int.TryParse(datas[1], out int value);

                chart_Billing.Series[0].Points.AddXY(server, value);
            }

            for (int i = 0; i < backServerBillingDatas.Length; i++)
            {
                string[] datas = backServerBillingDatas[i].Split('-');

                int.TryParse(datas[0], out int server);
                int.TryParse(datas[1], out int value);

                chart_Billing.Series[0].Points.AddXY(server, value);
            }
        }

        static object totalServerInfoDicLock = new object();

        static Dictionary<string, string> totalServerInfoDic = new Dictionary<string, string>();

        private void textBox4_TextChanged_2(object sender, EventArgs e)
        {

        }

        private void dgv_TotalServerInfo_CellContentClick_4(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void chart_Billing_Click(object sender, EventArgs e)
        {

        }

        private void textBox4_TextChanged_3(object sender, EventArgs e)
        {

        }

        private void FAQ_Server_Input_TextChanged(object sender, EventArgs e)
        {

        }

        private void tb_SaveEventData_StartDate_TextChanged(object sender, EventArgs e)
        {

        }

        int currentEventType = 0;

        private void bt_SubEvent_Click(object sender, EventArgs e)
        {
            serverRankingEventScheduleData.Clear();
            rankingEventScheduleData.Clear();
            eventDataByIndex.Clear();
            dataGridView_EventSchedule.Columns.Clear();
            addCell.Clear();
            eventColor.Clear();
            subEventID.Clear();

            int _count = ConnectState == ServerState.Live ? combineServerList.Count : 1;

            if (ConnectState == ServerState.LiveTW)
            {
                int.TryParse(requestsuperorangetotal(10, "1", "0", "", ""), out _count);
            }


            Thread[] T = new Thread[_count];

            int threadCount = 0;

            string subNum = tb_SubEventNum.Text;

            if (string.IsNullOrEmpty(subNum))
            {
                subNum = "2";
                tb_SubEventNum.Text = subNum;
            }

            int.TryParse(subNum, out currentEventType);

            for (int i = 0; i < T.Length; i++)
            {
                string serverIndex = "";
                if (ConnectState == ServerState.LiveTW)
                {
                    serverIndex = (i + 1).ToString();
                }
                else
                {
                    serverIndex = combineServerList[i];
                }
                if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                    serverIndex = "2";

                string data = "27" + "#" + serverIndex + "#" + currentEventType + "#" + "0";
                T[threadCount] = new Thread(new ParameterizedThreadStart(GetRankingEventSchduleThread));
                T[threadCount].Start(data);
                threadCount++;
            }

            if (subNum != "0")
                lb_CurrentEventType.Text = $"현재 이벤트 타입 : 서브이벤트{currentEventType - 1}";
            else
                lb_CurrentEventType.Text = "현재 이벤트 타입 : 콘테스트";

            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : 이벤트 타입";

            threadCount = 0;

            int count = 0;

            for (int i = 0; i < T.Length; i++) // 모든 스레드에서 정보 넣어줄떄까지 대기
            {
                T[i].Join();
                count++;
            }

            dataGridView_EventSchedule.Columns.Add(count.ToString(), "서버");

            Random rand = new Random();

            eventColor.Add("0", Color.White);

            for (int i = 1; i < 300; i++)
            {
                if (i < rankingeventtemplate.GetLength(0))
                {
                    string data = rankingeventtemplate[i, (int)rankingevent_.index];
                    string title = rankingeventtemplate[i, (int)rankingevent_.title];

                    if (string.IsNullOrEmpty(data) || string.IsNullOrEmpty(title))
                    {
                        Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        do
                        {
                            color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        } while (eventColor.ContainsValue(color));

                        if (eventColor.ContainsKey(i.ToString()) == false)
                            eventColor.Add(i.ToString(), Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                    }
                    else
                    {
                        if (eventIndexByTitle.ContainsKey(title) == false)
                            eventIndexByTitle.Add(title, data);
                        if (eventIndexByTitle.ContainsKey(data) == false)
                            eventIndexByTitle.Add(data, title);

                        Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        do
                        {
                            color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        } while (eventColor.ContainsValue(color));

                        if (eventColor.ContainsKey(data) == false)
                            eventColor.Add(data, Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                        if (eventColor.ContainsKey(title + "_" + data) == false)
                            eventColor.Add(title + "_" + data, eventColor[data]);
                    }
                }
                else
                {
                    Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                    do
                    {
                        color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                    } while (eventColor.ContainsValue(color));

                    if (eventColor.ContainsKey(i.ToString()) == false)
                        eventColor.Add(i.ToString(), Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                }
            }

            string baseDate = tb_EventSchedule_BaseDate.Text;
            DateTime time = string.IsNullOrEmpty(baseDate) ? DateTime.Now : DateTime.ParseExact(baseDate, "yyyy-MM-dd", null);
            baseDateTime = time;
            dayGap = (DateTime.Today - time).Days;

            for (DateTime date = time.AddDays(-100); date <= time.AddMonths(1); date = date.AddDays(1))
            {
                string dateKey = date.ToString("yyyy-MM-dd");
                foreach (var serverData in combineServerList)
                {
                    string serverIndex = serverData;
                    string key = string.Format("{0}_{1}_{2}", serverIndex, dateKey, currentEventType); // Server_Date_EventType

                    if (subEventID.ContainsKey(serverIndex) == false)
                        subEventID.Add(serverIndex, 0);

                    if(serverRankingEventScheduleData.ContainsKey(key))
                    {
                        string[] datas = serverRankingEventScheduleData[key];

                        if (int.TryParse(datas[0], out int index))
                        {
                            if (subEventID[serverIndex] < index)
                                subEventID[serverIndex] = index;
                        }
                    }
                }
            }

            for (DateTime date = time; date <= time.AddMonths(1); date = date.AddDays(1))
            {
                string dateKey = date.ToString("yyyy-MM-dd");
                eventDateList.Add(dateKey);

                dataGridView_EventSchedule.Columns.Add(dateKey, dateKey);

                for (int i = 0; i < combineServerList.Count; i++)
                {
                    string serverIndex = combineServerList[i];

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        serverIndex = "2";

                    string key = string.Format("{0}_{1}_{2}", serverIndex, dateKey, currentEventType); // Server_Date_EventType
                    string[] data = null;

                    if (currentEventType != 0)
                    {
                        data = serverRankingEventScheduleData.ContainsKey(key) ? serverRankingEventScheduleData[key] : new string[(int)EventScheduleSubData_.max]
                        { "", "", "", "", "", "", ""};
                    }
                    else
                    {
                        data = serverRankingEventScheduleData.ContainsKey(key) ? serverRankingEventScheduleData[key] : new string[(int)ContestData_.max]
                            {"", "", "", "", "", "", "", "", "", ""};
                    }

                    if (subEventID.ContainsKey(serverIndex) == false)
                        subEventID.Add(serverIndex, 0);

                    for (int j = 0; j < data.Length; j++)
                    {
                        string dataKey = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, j); // Server_EventType_DataType

                        if (j == 0)
                        {
                            if (int.TryParse(data[j], out int index))
                            {
                                if (subEventID.ContainsKey(serverIndex))
                                {
                                    if (subEventID[serverIndex] < index)
                                        subEventID[serverIndex] = index;
                                }
                                else
                                    subEventID.Add(serverIndex, index);
                            }
                        }

                        if (eventDataByIndex.ContainsKey(dataKey))
                            eventDataByIndex[dataKey].Add(data[j]);
                        else
                        {
                            List<string> temp = new List<string>();

                            temp.Add(serverIndex.ToString());
                            temp.Add(data[j]);

                            eventDataByIndex.Add(dataKey, temp);
                        }
                    }

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        break;
                }
            }
            ChangeButton();
            SetEventScheduleData((int)EventScheduleData_.eventType);
        }

        private void tb_lastserverid_TextChanged(object sender, EventArgs e)
        {

        }

        private void ChangeButton()
        {
            if (currentEventType == 1)
            {
                bt_EventScheduleIndex.Visible = true;
                bt_EventScheduleIndex.Text = "이벤트 ID";

                bt_EventType.Visible = true;
                bt_EventType.Text = "이벤트 Type";

                bt_ServerEventIndex.Visible = true;
                bt_ServerEventIndex.Text = "유니크인덱스";

                bt_weekCharge.Visible = true;
                bt_weekCharge.Text = "연속충전";

                bt_dayCharge.Visible = true;
                bt_dayCharge.Text = "일일충전";

                bt_Reward.Visible = true;
                bt_GuildReward.Visible = true;
                bt_LimiteReward.Visible = true;
                bt_Shop.Visible = true;
                bt_TotalEventIndex1.Visible = true;
                bt_TotalEventIndex2.Visible = true;
                bt_TotalEventIndex3.Visible = true;
                bt_TotalEventIndex4.Visible = true;
                bt_TotalEventIndex5.Visible = true;
                bt_TotalEventReward1.Visible = true;
                bt_TotalEventReward2.Visible = true;
                bt_TotalEventReward3.Visible = true;
                bt_TotalEventReward4.Visible = true;
                bt_TotalEventReward5.Visible = true;                
            }
            else if (currentEventType == 0)
            {
                bt_EventScheduleIndex.Visible = true;
                bt_EventScheduleIndex.Text = "이벤트 ID";

                bt_EventType.Visible = true;
                bt_EventType.Text = "이벤트 Type";

                bt_ServerEventIndex.Visible = true;
                bt_ServerEventIndex.Text = "유니크인덱스";

                bt_weekCharge.Visible = true;
                bt_weekCharge.Text = "1";

                bt_dayCharge.Visible = true;
                bt_dayCharge.Text = "2";

                bt_Reward.Visible = true;
                bt_Reward.Text = "개인보상";

                bt_GuildReward.Visible = true;
                bt_GuildReward.Text = "길드보상";

                bt_LimiteReward.Visible = false;
                bt_Shop.Visible = false;
                bt_TotalEventIndex1.Visible = false;
                bt_TotalEventIndex2.Visible = false;
                bt_TotalEventIndex3.Visible = false;
                bt_TotalEventIndex4.Visible = false;
                bt_TotalEventIndex5.Visible = false;
                bt_TotalEventReward1.Visible = false;
                bt_TotalEventReward2.Visible = false;
                bt_TotalEventReward3.Visible = false;
                bt_TotalEventReward4.Visible = false;
                bt_TotalEventReward5.Visible = false;

                
            }
            else if (currentEventType == -1)
            {
                bt_EventScheduleIndex.Visible = true;
                bt_EventScheduleIndex.Text = "ID";

                bt_EventType.Visible = true;
                bt_EventType.Text = "이름";

                bt_ServerEventIndex.Visible = true;
                bt_ServerEventIndex.Text = "배너";

                bt_weekCharge.Visible = false;
                bt_dayCharge.Visible = false;
                bt_Reward.Visible = false;
                bt_GuildReward.Visible = false;
                bt_Shop.Visible = false;
                bt_LimiteReward.Visible = false;
                bt_TotalEventIndex1.Visible = false;
                bt_TotalEventIndex2.Visible = false;
                bt_TotalEventIndex3.Visible = false;
                bt_TotalEventIndex4.Visible = false;
                bt_TotalEventIndex5.Visible = false;
                bt_TotalEventReward1.Visible = false;
                bt_TotalEventReward2.Visible = false;
                bt_TotalEventReward3.Visible = false;
                bt_TotalEventReward4.Visible = false;
                bt_TotalEventReward5.Visible = false;
            }
            else
            {
                bt_EventScheduleIndex.Visible = true;
                bt_EventScheduleIndex.Text = "이벤트 ID";

                bt_EventType.Visible = true;
                bt_EventType.Text = "이벤트 Type";

                bt_ServerEventIndex.Visible = true;
                bt_ServerEventIndex.Text = "유니크인덱스";

                bt_weekCharge.Visible = true;
                bt_weekCharge.Text = "개인보상";

                bt_dayCharge.Visible = true;
                bt_dayCharge.Text = "temp";

                bt_Reward.Visible = false;
                bt_GuildReward.Visible = false;
                bt_LimiteReward.Visible = false;
                bt_Shop.Visible = false;
                bt_TotalEventIndex1.Visible = false;
                bt_TotalEventIndex2.Visible = false;
                bt_TotalEventIndex3.Visible = false;
                bt_TotalEventIndex4.Visible = false;
                bt_TotalEventIndex5.Visible = false;
                bt_TotalEventReward1.Visible = false;
                bt_TotalEventReward2.Visible = false;
                bt_TotalEventReward3.Visible = false;
                bt_TotalEventReward4.Visible = false;
                bt_TotalEventReward5.Visible = false;
            }
        }

        private void tb_SubEventNum_Click(object sender, EventArgs e)
        {

        }

        private void bt_TotalEventIndex2_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventUniqueIndex2);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventReward2_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventReward2);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventIndex3_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventUniqueIndex3);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventReward3_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventReward3);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventIndex4_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventUniqueIndex4);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventReward4_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventReward4);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventIndex5_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventUniqueIndex5);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_TotalEventReward5_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.totalEventReward5);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_EventScheduleTotalReward_Viewer_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData_Total((int)EventScheduleData_.totalEventReward);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void bt_SubEventSchedule_Total_Click(object sender, EventArgs e)
        {
            serverRankingEventScheduleData.Clear();
            rankingEventScheduleData.Clear();
            eventDataByIndex.Clear();
            dataGridView_EventSchedule.Columns.Clear();
            addCell.Clear();
            eventColor.Clear();

            int _count = ConnectState == ServerState.Live ? combineServerList.Count : 1;

            if (ConnectState == ServerState.LiveTW && combineServerList.Count <= 0 )
            {
                int.TryParse(requestsuperorangetotal(10, "1", "0", "", ""), out _count);
            }

            currentEventDataType = (int)EventScheduleData_.eventType;

            Thread[] T = new Thread[_count];

            int threadCount = 0;

            string subNum = tb_SubEventNum.Text;

            if (string.IsNullOrEmpty(subNum))
            {
                subNum = "2";
                tb_SubEventNum.Text = subNum;
            }

            int.TryParse(subNum, out currentEventType);

            currentEventType = 2;

            Random rand = new Random();

            eventColor.Add("0", Color.White);

            for (int i = 1; i < 300; i++)
            {
                if (i < rankingeventtemplate.GetLength(0))
                {
                    string data = rankingeventtemplate[i, (int)rankingevent_.index];
                    string title = rankingeventtemplate[i, (int)rankingevent_.title];

                    if (string.IsNullOrEmpty(data) || string.IsNullOrEmpty(title))
                    {
                        Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        do
                        {
                            color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        } while (eventColor.ContainsValue(color));

                        if (eventColor.ContainsKey(i.ToString()) == false)
                            eventColor.Add(i.ToString(), Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                    }
                    else
                    {
                        if (eventIndexByTitle.ContainsKey(title) == false)
                            eventIndexByTitle.Add(title, data);
                        if (eventIndexByTitle.ContainsKey(data) == false)
                            eventIndexByTitle.Add(data, title);

                        Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        do
                        {
                            color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                        } while (eventColor.ContainsValue(color));

                        if (eventColor.ContainsKey(data) == false)
                            eventColor.Add(data, Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                        if (eventColor.ContainsKey(title + "_" + data) == false)
                            eventColor.Add(title + "_" + data, eventColor[data]);
                    }
                }
                else
                {
                    Color color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                    do
                    {
                        color = Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256));
                    } while (eventColor.ContainsValue(color));

                    if (eventColor.ContainsKey(i.ToString()) == false)
                        eventColor.Add(i.ToString(), Color.FromArgb(rand.Next(50, 256), rand.Next(50, 256), rand.Next(50, 256)));
                }
            }
            int count = 0;
            for (int eventType = 2; eventType < 8; eventType++)
            {
                for (int i = 0; i < combineServerList.Count; i++)
                {
                    string serverIndex = "";
                    if (ConnectState == ServerState.LiveTW)
                    {
                        serverIndex = (i + 1).ToString();
                    }
                    else
                    {
                        serverIndex = combineServerList[i];
                    }

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        serverIndex = "2";

                    string data = "27" + "#" + serverIndex + "#" + eventType + "#" + 0;
                    T[threadCount] = new Thread(new ParameterizedThreadStart(GetRankingEventSchduleThread));
                    T[threadCount].Start(data);
                    threadCount++;

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        break;
                }

                threadCount = 0;                

                for (int i = 0; i < T.Length; i++) // 모든 스레드에서 정보 넣어줄떄까지 대기
                {
                    T[i].Join();
                    count++;
                }
            }

            DateTime time = DateTime.Now;

            dataGridView_EventSchedule.Columns.Add(count.ToString(), "서버");


            for (DateTime date = DateTime.Now; date <= time.AddMonths(1); date = date.AddDays(1))
            {
                string dateKey = date.ToString("yyyy-MM-dd");
                eventDateList.Add(dateKey);

                dataGridView_EventSchedule.Columns.Add(dateKey, dateKey);

                for (int eventType = 2; eventType < 8; eventType++)
                {
                    for (int i = 0; i < combineServerList.Count; i++)
                    {
                        string serverIndex = combineServerList[i];

                        string key = string.Format("{0}_{1}_{2}", serverIndex, dateKey, eventType); // Server_Date_EventType

                        //if (serverRankingEventScheduleData.ContainsKey(key) == false)
                        //    continue;

                        string[] data = null;

                        if (eventType != 0)
                        {
                            data = serverRankingEventScheduleData.ContainsKey(key) ? serverRankingEventScheduleData[key] : new string[(int)EventScheduleSubData_.max]
                            { "", "", "", "", "", "", ""};
                        }
                        else
                        {
                            data = serverRankingEventScheduleData.ContainsKey(key) ? serverRankingEventScheduleData[key] : new string[(int)ContestData_.max]
                                {"", "", "", "", "", "", "", "", "", ""};
                        }

                        for (int j = 0; j < data.Length; j++)
                        {
                            string dataKey = string.Format("{0}_{1}_{2}", serverIndex, eventType, j); // Server_EventType_DataType

                            if (eventDataByIndex.ContainsKey(dataKey))
                                eventDataByIndex[dataKey].Add(data[j]);
                            else
                            {
                                List<string> temp = new List<string>();

                                temp.Add(serverIndex.ToString());
                                temp.Add(data[j]);

                                eventDataByIndex.Add(dataKey, temp);
                            }
                        }
                    }
                }
            }

            if (!isFirst)
            {
                this.dataGridView_EventSchedule.ColumnHeadersHeight = this.dataGridView_EventSchedule.ColumnHeadersHeight * 2;
                isFirst = true;
            }

            SetEventScheduleData_Total((int)EventScheduleData_.eventType);
        }

        private void lv_serverinfo_vip_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void dgv_Statistics_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void tb_EventSchedule_StartServer_TextChanged(object sender, EventArgs e)
        {

        }

        private void panel_chatting_total_Paint(object sender, PaintEventArgs e)
        {

        }

        private void tb_EventSchedule_BaseDate_TextChanged_4(object sender, EventArgs e)
        {

        }

        private void lb_EventSchedule_BaseDate_Click(object sender, EventArgs e)
        {

        }

        public Dictionary<string, string[]> eventSchedule_ = new Dictionary<string, string[]>();

        private void bt_EventSchedule_Friend_Click(object sender, EventArgs e)
        {
            currentEventType = -1;
            currentEventDataType = 0;

            int _count = ConnectState == ServerState.Live ? combineServerList.Count : 1;

            if (ConnectState == ServerState.LiveTW)
            {
                int.TryParse(requestsuperorangetotal(10, "1", "0", "", ""), out _count);
            }


            for (int i = 0; i < _count; i++)
            {
                string serverIndex = "";

                if (ConnectState == ServerState.LiveTW)
                {
                    serverIndex = (i + 1).ToString();
                }
                else
                    serverIndex =  combineServerList[i];

                string retData = requestsuperorangetotal(27, serverIndex, "", "0");

                if (eventSchedule_.ContainsKey(serverIndex) == false)
                {
                    string[] data = retData.Split('#');

                    if (data.Length < 4)
                        data = new string[4] { "", "", "", "" };

                    eventSchedule_.Add(serverIndex, data);
                }
            }
            ChangeButton();
            SetEventScheduleData((int)EventScheduleData_.eventIndex);
        }

        private void tb_FAQ_Nickname_TextChanged_4(object sender, EventArgs e)
        {

        }

        private void lb_FAQ_Nickname_Click_1(object sender, EventArgs e)
        {

        }

        private void bt_EventSchedule_Delete_Click(object sender, EventArgs e)
        {
            if (int.TryParse(tb_EventSchedule_StartServer.Text, out int startServer) && int.TryParse(tb_EventSchedule_EndServer.Text, out int endServer))
            {
                if (DateTime.TryParseExact(tb_SaveEventData_StartDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime startDate) == false ||
                DateTime.TryParseExact(tb_SaveEventData_EndDate.Text, "yyyy-MM-dd", null, DateTimeStyles.None, out DateTime endDate) == false)
                {
                    if (currentEventType != -1)
                    {
                        MessageBox.Show("날짜형식 또는 서버 값이 틀렸습니다!");
                        return;
                    }

                    startDate = DateTime.Now;
                    endDate = DateTime.Now;
                }

                if (startDate.CompareTo(endDate) > 0)
                {
                    if (currentEventType != -1)
                    {
                        MessageBox.Show("시작날짜가 끝날짜보다 작아야 합니다.");
                        return;
                    }
                }

                if (startDate.CompareTo(DateTime.Today) == 0 || startDate.CompareTo(DateTime.Today) < 0)
                {
                    string pw = string.Empty;
                    if (InputBox("날짜 체크", "금일 날짜가 포함되어있습니다. 저장 하시겠습니까?", ref pw) == DialogResult.OK)
                    {
                        if (pw != "")
                        {
                            MessageBox.Show("암호가 틀렷습니다.");
                        }
                    }
                    else
                    {
                        MessageBox.Show("데이터 저장 취소");
                        return;
                    }
                }

                int startColumnIndex = (startDate - DateTime.Today).Days + 1 + dayGap;
                int endColumnIndex = startColumnIndex + (endDate - startDate).Days;

                int.TryParse(tb_EventSchedule_StartServer.Text, out int startServerIndex);
                int.TryParse(tb_EventSchedule_EndServer.Text, out int endServerIndex);

                Dictionary<string, List<string>> eventScheduleDataDic = new Dictionary<string, List<string>>();
                List<string> addCellKeyList = new List<string>();

                List<string> idList = new List<string>();

                for (int j = 0; j < combineServerList.Count; j++)
                {
                    string serverIndex = combineServerList[j];
                    int.TryParse(serverIndex, out int _serverIndex);

                    if (_serverIndex < startServerIndex || _serverIndex > endServerIndex)
                        continue;

                    if (string.IsNullOrEmpty(serverIndex))
                        continue;

                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        serverIndex = "2";

                    string lastEventIndex = "";
                    bool isCheck = false;

                    if (currentEventType == -1) // 친밀도  데이터
                    {
                        idList.Add(serverIndex);
                    }
                    else
                    {
                        for (int cIndex = startColumnIndex; cIndex <= endColumnIndex; cIndex++) // 날짜
                        {
                            List<string> eventDatas = new List<string>();
                            string date = dataGridView_EventSchedule.Columns[cIndex].Name;
                            string key = string.Format("{0}_{1}_{2}", serverIndex, currentEventType, 0);
                            string data = eventDataByIndex[key][cIndex];

                            idList.Add(serverIndex + "#" + data);
                        }
                    }


                    if (ConnectState != ServerState.Live && ConnectState != ServerState.LiveTW)
                        break;
                }

                if (MessageBox.Show("삭제하기", "이벤트 데이터 삭제", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) != DialogResult.OK)
                {
                    MessageBox.Show("이벤트 삭제 취소");
                    return;
                }


                for (int i = 0; i < idList.Count; i++)
                {
                    string serverIndex = string.Empty;
                    string index = string.Empty;

                    if (idList[i].Contains("#"))
                    {
                        serverIndex = idList[i].Split('#')[0];
                        index = idList[i].Split('#')[1];
                    }
                    else
                        serverIndex = idList[i];

                    if (string.IsNullOrEmpty(serverIndex))
                        continue;

                    string result = requestsuperorangetotal(32, serverIndex, currentEventType.ToString(), index);                    
                }

                MessageBox.Show("Success");

                for (int i = 0; i < addCellKeyList.Count; i++)
                {
                    if (addCell.ContainsKey(addCellKeyList[i]))
                        addCell.Remove(addCellKeyList[i]);
                }

                dataGridView_EventSchedule.Update();

                bt_EventScheduleIndex.BackColor = Color.Transparent;
                bt_EventType.BackColor = Color.Transparent;
                bt_ServerEventIndex.BackColor = Color.Transparent;
                bt_weekCharge.BackColor = Color.Transparent;
                bt_dayCharge.BackColor = Color.Transparent;
                bt_Reward.BackColor = Color.Transparent;
                bt_GuildReward.BackColor = Color.Transparent;
                bt_Shop.BackColor = Color.Transparent;
                bt_LimiteReward.BackColor = Color.Transparent;
                bt_TotalEventIndex1.BackColor = Color.Transparent;
                bt_TotalEventIndex2.BackColor = Color.Transparent;
                bt_TotalEventIndex3.BackColor = Color.Transparent;
                bt_TotalEventIndex4.BackColor = Color.Transparent;
                bt_TotalEventIndex5.BackColor = Color.Transparent;
                bt_TotalEventReward1.BackColor = Color.Transparent;
                bt_TotalEventReward2.BackColor = Color.Transparent;
                bt_TotalEventReward3.BackColor = Color.Transparent;
                bt_TotalEventReward4.BackColor = Color.Transparent;
                bt_TotalEventReward5.BackColor = Color.Transparent;

                if (currentEventType == 1)
                {
                    lb_CurrentEventType.Text = "현재 이벤트 타입 : 메인이벤트";
                    lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : 이벤트 타입";
                    LoadServerEventSchedule();
                }
                else
                    bt_SubEvent_Click(null, null);
            }
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void lb_Log_ServerIndex_Click(object sender, EventArgs e)
        {

        }

        private void lb_Log_UserID_Click(object sender, EventArgs e)
        {

        }

        private void tb_Log_ServerIndex_Changed(object sender, EventArgs e)
        {

        }

        private void tb_Log_UserID_Changed(object sender, EventArgs e)
        {

        }

        private void dtp_Log_StartTime_ValueChanged(object sender, EventArgs e)
        {

        }

        private void dtp_Log_EndTime_ValueChanged(object sender, EventArgs e)
        {

        }

        private void lb_Log_StartTime_Click(object sender, EventArgs e)
        {

        }

        private void lb_Log_EndTime_Click(object sender, EventArgs e)
        {

        }

        private void bt_Log_Load_Click(object sender, EventArgs e)
        {
            try
            {
                using (var connection = new MySqlConnection($"Server={MySqlIP};Port={MySqlPort};Database={MySqlDatabase};Uid={MySqlUid};pwd={MySqlPassword};"))
                {
                    connection.Open();

                    string serverIndex = tb_Log_ServerIndex.Text;
                    string userID = tb_Log_UserID.Text;
                    
                    DateTime startTime = DateTime.Parse(tb_Log_StartTime.Text);
                    DateTime endTime = DateTime.Parse(tb_Log_EndTime.Text);
                    string addStringQuery = addQuery.Text;
                    Queue<string> dateQueue = new Queue<string>();

                    for (DateTime date = startTime; date <= endTime; date = date.AddDays(1))
                        dateQueue.Enqueue(date.ToString("yyyy-MM-dd"));

                    Queue<string> logQueue = new Queue<string>();
                    string st = "'" + tb_Log_StartTime.Text + "'";
                    string et = "'" + tb_Log_EndTime.Text + "'";
                    while (dateQueue.Count > 0)
                    {
                        string query = $"SELECT * FROM {dateQueue.Dequeue().Replace('-', '_')}"; // WHRER Time >= {startTime.ToString("yyyy-MM-dd HH:mm:ss")} WHERE Time <= {endTime.ToString("yyyy-MM-dd HH:mm:ss")}";
                        query += $" use index (TIME_INDEXER)";
                        query += $" Where Time >= {st} AND Time <= {et}";

                        if (string.IsNullOrEmpty(serverIndex) == false)
                        {
                            //serverIndex = "\"" + serverIndex + "\"";
                            query += $" AND Server = {serverIndex}";
                        }


                        if (string.IsNullOrEmpty(userID) == false)
                        {
                            string u = "'" + userID + "'";
                            query += $" AND UserID = {u}";

                        }
                        query += addStringQuery;

                        MySqlCommand cmd = new MySqlCommand(query, connection);
                        MySqlDataReader reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            string logText = string.Empty;
                            string _packetType = reader["PacketType"].ToString();
                            if (_packetType == "0")
                                continue;
                            string _totalPacketType = reader["TotalPacket_Type"].ToString();
                            string _server = reader["Server"].ToString();
                            string _time = reader["Time"].ToString();
                            string _userID = reader["UserID"].ToString();
                            DateTime.TryParse(_time, out DateTime dt);
                            if (dt < startTime || dt > endTime)
                                continue;
                            logText += $"패킷 타입 : {_packetType} | TotalPacketType : {_totalPacketType} | Server : {_server} | Time : {_time} | UserID : {_userID}\n";

                            Queue<string> dataQueue = new Queue<string>();

                            for (int i = 1; i <= 20; i++)
                            {
                                //dataQueue.Enqueue(reader[$"Data{i}"].ToString());
                                logText += " |";
                                string readData = reader[$"Data{i}"].ToString();
                                logText += readData;
                                if (readData == "0")
                                    break;
                            }
                            logQueue.Enqueue(logText);
                            //logQueue.Enqueue($"")
                        }
                    }

                    dgv_Log.Columns.Clear();
                    dgv_Log.Rows.Clear();
                    dgv_Log.Columns.Add("Data", "Data");
                    dgv_Log.RowsDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;

                    //for (int i = 1; i < 21; i++)
                    //    dgv_Log.Columns.Add($"Data{i}", $"Data{i}");

                    while (logQueue.Count > 0)
                    {
                        dgv_Log.Rows.Add(logQueue.Dequeue());
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void tb_Log_StarTime_Changed(object sender, EventArgs e)
        {

        }

        private void tb_Log_EndTime_Changed(object sender, EventArgs e)
        {

        }

        private void dgv_Log_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void bt_GuildCharge_Click(object sender, EventArgs e)
        {
            lastBtn = sender as Button;
            SetEventScheduleData((int)EventScheduleData_.guildCharge);
            lb_CurrentEventDataType.Text = "현재 수정 데이터 타입 : " + lastBtn.Text;
        }

        private void load_csv_button_Click(object sender, EventArgs e)
        {

            get_servertutorialData.Clear();
            get_servertutorialConnectedData.Clear();
            get_servertutorialoutData.Clear();
            get_servertutorialoutData3.Clear();

            string startDate = tb_csv_date_start.Text;
            string endDate = tb_csv_date_end.Text;

            string _startserver = tb_csv_server_end.Text;
            string _endserver = tb_csv_server_end.Text;

            if (string.IsNullOrEmpty(startDate) || startDate == "") startDate = DateTime.Now.ToString("yyyy-MM-dd");
            if (string.IsNullOrEmpty(endDate) || endDate == "") endDate = DateTime.Now.ToString("yyyy-MM-dd");
            if (string.IsNullOrEmpty(_startserver) || _startserver == "") _startserver = "1";
            if (string.IsNullOrEmpty(_endserver) || _endserver == "") _endserver = requestsuperorangetotal(10, "1", "0", "", "");
            int start = int.Parse(_startserver);
            int end = int.Parse(_endserver);
            Thread[] T = new Thread[end - start + 1];
            int servercount = 0;
            for (int servernumber = start; servernumber <= end; servernumber++)
            {
                T[servercount] = new Thread(new ParameterizedThreadStart(Thread_sendservertotal_tutorialLoad));
                string datas = servernumber + "," + 33 + "," + startDate + "," + endDate;    //packettype
                T[servercount].Start(datas);
                servercount++;
            }
            servercount = 0;
            for (int servernumber = start; servernumber <= end; servernumber++)
            {
                T[servercount].Join();
                servercount++;

            }
            Dictionary<string, int> MissionDict = new Dictionary<string, int>();
            Dictionary<string, int> ConnectedDict = new Dictionary<string, int>();
            Dictionary<string, int> outDict = new Dictionary<string, int>();
            Dictionary<string, int> outDict3 = new Dictionary<string, int>();
            foreach (KeyValuePair<int, string> temp in get_servertutorialData)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (MissionDict.ContainsKey(key))
                        MissionDict[key] += value;
                    else
                        MissionDict.Add(key, value);
                }
            }

            foreach (KeyValuePair<int, string> temp in get_servertutorialConnectedData)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (ConnectedDict.ContainsKey(key))
                        ConnectedDict[key] += value;
                    else
                        ConnectedDict.Add(key, value);
                }
            }
            foreach (KeyValuePair<int, string> temp in get_servertutorialoutData)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (outDict.ContainsKey(key))
                        outDict[key] += value;
                    else
                        outDict.Add(key, value);
                }
            }

            foreach (KeyValuePair<int, string> temp in get_servertutorialoutData3)
            {
                string[] datas = temp.Value.Split('$');

                foreach (string data in datas)
                {
                    if (string.IsNullOrEmpty(data) || data == "") continue;
                    string key = data.Split(',')[0];
                    string _value = data.Split(',')[1];
                    int value = 0;
                    int.TryParse(_value, out value);
                    if (outDict3.ContainsKey(key))
                        outDict3[key] += value;
                    else
                        outDict3.Add(key, value);
                }
            }

            int allPlayingUser = 0;
            foreach (KeyValuePair<string, int> temp in ConnectedDict)
            {
                allPlayingUser += temp.Value;
            }


            var csv = new StringBuilder();
            int Base = 0;
            int before = 0;
            int NonPlayBase = 0;
            int NonPlaybefore = 0;
            //allPlayingUser = 0;
            int continueCount = 0;
            csv.AppendLine(cell);
            foreach (KeyValuePair<string, int> temp in MissionDict)
            {
                string makedata = temp.Key;

                string title = specialMissionTemplate[int.Parse(temp.Key), (int)SpecialMissionTemplate_.title];
                makedata += "," + title;

                makedata += "," + temp.Value;
                if (Base == 0)
                {
                    Base = temp.Value;
                    before = temp.Value;
                }
                continueCount = 0;

                makedata += "," + (((double)temp.Value / (double)Base) * 100).ToString("N3") + "%";
                makedata += "," + (temp.Value - before);
                before = temp.Value;


                if (ConnectedDict.ContainsKey(temp.Key))
                    makedata += "," + ConnectedDict[temp.Key];
                else
                {
                    continueCount++;
                    makedata += "," + 0;
                }

                if (outDict.ContainsKey(temp.Key))
                    makedata += "," + outDict[temp.Key];
                else
                {
                    continueCount++;
                    makedata += "," + 0;
                }

                if (outDict3.ContainsKey(temp.Key))
                    makedata += "," + outDict3[temp.Key];
                else
                {
                    if (continueCount >= 2) continue;
                    makedata += "," + 0;
                }

                int nonplayer = (temp.Value - allPlayingUser);
                makedata += "," + nonplayer;
                if (NonPlayBase == 0)
                {
                    NonPlayBase = nonplayer;
                    NonPlaybefore = nonplayer;
                }
                makedata += "," + (((double)nonplayer / (double)NonPlayBase) * 100).ToString("N3") + "%";
                makedata += "," + (nonplayer - NonPlaybefore);
                NonPlaybefore = nonplayer;

                if (ConnectedDict.ContainsKey(temp.Key))
                {
                    allPlayingUser -= ConnectedDict[temp.Key];
                }

                csv.AppendLine(makedata);
            }
            string filepath = string.Format("D:\\{0}.csv", DateTime.Now.Ticks);

            File.AppendAllText(filepath, csv.ToString(), Encoding.UTF8);
        }

        RedisClient m_redis = null;

        public static string ByteToString(byte[] byteText)
        {
            if (byteText != null)
                return System.Text.Encoding.Unicode.GetString(byteText);

            return "";
        }
        public static string ByteToString8(byte[] byteText)
        {
            if (byteText != null)
                return System.Text.Encoding.UTF8.GetString(byteText);

            return "";
        }
        private void bt_rediskey_Click(object sender, EventArgs e)
        {
            string key = tb_rediskey.Text;
            string IP = tb_redisip.Text;
            string port = tb_redisport.Text;

            if( m_redis == null )
            {
                m_redis = new RedisClient(IP, int.Parse(port));
            }

            lb_redisreturn.Items.Clear();

            byte[][] ddd = m_redis.Keys(key);
            foreach( var item in ddd)
            {
                string kkk = ByteToString8(item);
                lb_redisreturn.Items.Add(kkk);
            }
        }

        private void bt_redis2_Click(object sender, EventArgs e)
        {
            bool get = radioButton1.Checked;
            bool hget = radioButton2.Checked;
            bool zrange = radioButton3.Checked;

            string key = lb_redisreturn.SelectedItem.ToString();

            lb_redis2.Items.Clear();

            if (get == true)
            {
                try
                {

                    byte[] ddd = m_redis.Get(key);

                    string kkk = ByteToString8(ddd);
                    lb_redis2.Items.Add(kkk);
                }
                catch
                {

                }
            }

            if (hget == true)
            {
                try
                {
                    byte[][] ddd = m_redis.HGetAll(key);
                    foreach (var item in ddd)
                    {
                        string kkk = ByteToString(item);
                        lb_redis2.Items.Add(kkk);
                    }
                }
                catch
                {

                }
            }

            if (get == true)
            {
                try
                {
                    byte[][] ddd = m_redis.ZRange(key, 0, -1);

                    foreach (var item in ddd)
                    {
                        string kkk = ByteToString8(item);
                        lb_redis2.Items.Add(kkk);
                    }
                }
                catch
                {

                }
            }


        }

        private void lb_redisreturn_SelectedIndexChanged(object sender, EventArgs e)
        {
            string key = lb_redisreturn.SelectedItem.ToString();
            tb_getkey.Text = key;
        }
    }


    class ListViewItemComparer : IComparer
    {
        private int col;
        public string sort = "asc";
        public ListViewItemComparer()
        {
            col = 0;
        }

        public ListViewItemComparer(int column, string sort)
        {
            col = column;
            this.sort = sort;
        }

        public int Compare(object x, object y)
        {
            string xtext = ((ListViewItem)x).SubItems[col].Text;
            string ytext = ((ListViewItem)y).SubItems[col].Text;

            if (sort == "asc")
            {
                int xxx = 0;
                int yyy = 0;
                if (int.TryParse(xtext, out xxx) == true && int.TryParse(ytext, out yyy) == true)
                {
                    return xxx.CompareTo(yyy);
                }
                else
                    return String.Compare(xtext, ytext);
            }
            else
            {
                int xxx = 0;
                int yyy = 0;
                if (int.TryParse(xtext, out xxx) == true && int.TryParse(ytext, out yyy) == true)
                {
                    return yyy.CompareTo(xxx);
                }
                else
                    return String.Compare(ytext, xtext);
            }
        }
    }
}
